// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `AbortMultipartUpload`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AbortMultipartUpload {
    _private: (),
}
impl AbortMultipartUpload {
    /// Creates a new `AbortMultipartUpload` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct AbortMultipartUploadOperationInputWrapper(pub crate::input::AbortMultipartUploadInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for AbortMultipartUploadOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(AbortMultipartUploadOperationInputWrapper(
            crate::operation_deser::parse_abort_multipart_upload_request(req).await?,
        ))
    }
}
pub enum AbortMultipartUploadOperationOutputWrapper {
    Output(crate::output::AbortMultipartUploadOutput),
    Error(crate::error::AbortMultipartUploadError),
}
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for AbortMultipartUploadOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        let mut response = match self {
            Self::Output(o) => {
                match crate::operation_ser::serialize_abort_multipart_upload_response(o) {
                    Ok(response) => response,
                    Err(e) => e.into_response(),
                }
            }
            Self::Error(err) => {
                match crate::operation_ser::serialize_abort_multipart_upload_error(&err) {
                    Ok(mut response) => {
                        response.extensions_mut().insert(
                            aws_smithy_http_server::ExtensionModeledError::new(err.name()),
                        );
                        response
                    }
                    Err(e) => e.into_response(),
                }
            }
        };
        response
            .extensions_mut()
            .insert(aws_smithy_http_server::RequestExtensions::new(
                "com.amazonaws.s3",
                "AbortMultipartUpload",
            ));
        response
    }
}
impl
    From<Result<crate::output::AbortMultipartUploadOutput, crate::error::AbortMultipartUploadError>>
    for AbortMultipartUploadOperationOutputWrapper
{
    fn from(
        res: Result<
            crate::output::AbortMultipartUploadOutput,
            crate::error::AbortMultipartUploadError,
        >,
    ) -> Self {
        match res {
            Ok(v) => Self::Output(v),
            Err(e) => Self::Error(e),
        }
    }
}
impl From<AbortMultipartUploadOperationInputWrapper> for crate::input::AbortMultipartUploadInput {
    fn from(i: AbortMultipartUploadOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `CompleteMultipartUpload`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CompleteMultipartUpload {
    _private: (),
}
impl CompleteMultipartUpload {
    /// Creates a new `CompleteMultipartUpload` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct CompleteMultipartUploadOperationInputWrapper(
    pub crate::input::CompleteMultipartUploadInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for CompleteMultipartUploadOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(CompleteMultipartUploadOperationInputWrapper(
            crate::operation_deser::parse_complete_multipart_upload_request(req).await?,
        ))
    }
}
pub struct CompleteMultipartUploadOperationOutputWrapper(
    pub crate::output::CompleteMultipartUploadOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for CompleteMultipartUploadOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_complete_multipart_upload_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::CompleteMultipartUploadOutput>
    for CompleteMultipartUploadOperationOutputWrapper
{
    fn from(o: crate::output::CompleteMultipartUploadOutput) -> Self {
        Self(o)
    }
}
impl From<CompleteMultipartUploadOperationInputWrapper>
    for crate::input::CompleteMultipartUploadInput
{
    fn from(i: CompleteMultipartUploadOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `CopyObject`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CopyObject {
    _private: (),
}
impl CopyObject {
    /// Creates a new `CopyObject` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct CopyObjectOperationInputWrapper(pub crate::input::CopyObjectInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for CopyObjectOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(CopyObjectOperationInputWrapper(
            crate::operation_deser::parse_copy_object_request(req).await?,
        ))
    }
}
pub enum CopyObjectOperationOutputWrapper {
    Output(crate::output::CopyObjectOutput),
    Error(crate::error::CopyObjectError),
}
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for CopyObjectOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        let mut response = match self {
            Self::Output(o) => match crate::operation_ser::serialize_copy_object_response(o) {
                Ok(response) => response,
                Err(e) => e.into_response(),
            },
            Self::Error(err) => match crate::operation_ser::serialize_copy_object_error(&err) {
                Ok(mut response) => {
                    response.extensions_mut().insert(
                        aws_smithy_http_server::ExtensionModeledError::new(err.name()),
                    );
                    response
                }
                Err(e) => e.into_response(),
            },
        };
        response
            .extensions_mut()
            .insert(aws_smithy_http_server::RequestExtensions::new(
                "com.amazonaws.s3",
                "CopyObject",
            ));
        response
    }
}
impl From<Result<crate::output::CopyObjectOutput, crate::error::CopyObjectError>>
    for CopyObjectOperationOutputWrapper
{
    fn from(res: Result<crate::output::CopyObjectOutput, crate::error::CopyObjectError>) -> Self {
        match res {
            Ok(v) => Self::Output(v),
            Err(e) => Self::Error(e),
        }
    }
}
impl From<CopyObjectOperationInputWrapper> for crate::input::CopyObjectInput {
    fn from(i: CopyObjectOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `CreateBucket`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateBucket {
    _private: (),
}
impl CreateBucket {
    /// Creates a new `CreateBucket` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct CreateBucketOperationInputWrapper(pub crate::input::CreateBucketInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for CreateBucketOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(CreateBucketOperationInputWrapper(
            crate::operation_deser::parse_create_bucket_request(req).await?,
        ))
    }
}
pub enum CreateBucketOperationOutputWrapper {
    Output(crate::output::CreateBucketOutput),
    Error(crate::error::CreateBucketError),
}
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for CreateBucketOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        let mut response = match self {
            Self::Output(o) => match crate::operation_ser::serialize_create_bucket_response(o) {
                Ok(response) => response,
                Err(e) => e.into_response(),
            },
            Self::Error(err) => match crate::operation_ser::serialize_create_bucket_error(&err) {
                Ok(mut response) => {
                    response.extensions_mut().insert(
                        aws_smithy_http_server::ExtensionModeledError::new(err.name()),
                    );
                    response
                }
                Err(e) => e.into_response(),
            },
        };
        response
            .extensions_mut()
            .insert(aws_smithy_http_server::RequestExtensions::new(
                "com.amazonaws.s3",
                "CreateBucket",
            ));
        response
    }
}
impl From<Result<crate::output::CreateBucketOutput, crate::error::CreateBucketError>>
    for CreateBucketOperationOutputWrapper
{
    fn from(
        res: Result<crate::output::CreateBucketOutput, crate::error::CreateBucketError>,
    ) -> Self {
        match res {
            Ok(v) => Self::Output(v),
            Err(e) => Self::Error(e),
        }
    }
}
impl From<CreateBucketOperationInputWrapper> for crate::input::CreateBucketInput {
    fn from(i: CreateBucketOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `CreateMultipartUpload`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateMultipartUpload {
    _private: (),
}
impl CreateMultipartUpload {
    /// Creates a new `CreateMultipartUpload` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct CreateMultipartUploadOperationInputWrapper(pub crate::input::CreateMultipartUploadInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for CreateMultipartUploadOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(CreateMultipartUploadOperationInputWrapper(
            crate::operation_deser::parse_create_multipart_upload_request(req).await?,
        ))
    }
}
pub struct CreateMultipartUploadOperationOutputWrapper(
    pub crate::output::CreateMultipartUploadOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for CreateMultipartUploadOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_create_multipart_upload_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::CreateMultipartUploadOutput>
    for CreateMultipartUploadOperationOutputWrapper
{
    fn from(o: crate::output::CreateMultipartUploadOutput) -> Self {
        Self(o)
    }
}
impl From<CreateMultipartUploadOperationInputWrapper> for crate::input::CreateMultipartUploadInput {
    fn from(i: CreateMultipartUploadOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `DeleteBucket`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteBucket {
    _private: (),
}
impl DeleteBucket {
    /// Creates a new `DeleteBucket` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct DeleteBucketOperationInputWrapper(pub crate::input::DeleteBucketInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for DeleteBucketOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(DeleteBucketOperationInputWrapper(
            crate::operation_deser::parse_delete_bucket_request(req).await?,
        ))
    }
}
pub struct DeleteBucketOperationOutputWrapper(pub crate::output::DeleteBucketOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for DeleteBucketOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_delete_bucket_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::DeleteBucketOutput> for DeleteBucketOperationOutputWrapper {
    fn from(o: crate::output::DeleteBucketOutput) -> Self {
        Self(o)
    }
}
impl From<DeleteBucketOperationInputWrapper> for crate::input::DeleteBucketInput {
    fn from(i: DeleteBucketOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `DeleteBucketAnalyticsConfiguration`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteBucketAnalyticsConfiguration {
    _private: (),
}
impl DeleteBucketAnalyticsConfiguration {
    /// Creates a new `DeleteBucketAnalyticsConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct DeleteBucketAnalyticsConfigurationOperationInputWrapper(
    pub crate::input::DeleteBucketAnalyticsConfigurationInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B>
    for DeleteBucketAnalyticsConfigurationOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(DeleteBucketAnalyticsConfigurationOperationInputWrapper(
            crate::operation_deser::parse_delete_bucket_analytics_configuration_request(req)
                .await?,
        ))
    }
}
pub struct DeleteBucketAnalyticsConfigurationOperationOutputWrapper(
    pub crate::output::DeleteBucketAnalyticsConfigurationOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse
    for DeleteBucketAnalyticsConfigurationOperationOutputWrapper
{
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_delete_bucket_analytics_configuration_response(self.0)
        {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::DeleteBucketAnalyticsConfigurationOutput>
    for DeleteBucketAnalyticsConfigurationOperationOutputWrapper
{
    fn from(o: crate::output::DeleteBucketAnalyticsConfigurationOutput) -> Self {
        Self(o)
    }
}
impl From<DeleteBucketAnalyticsConfigurationOperationInputWrapper>
    for crate::input::DeleteBucketAnalyticsConfigurationInput
{
    fn from(i: DeleteBucketAnalyticsConfigurationOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `DeleteBucketCors`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteBucketCors {
    _private: (),
}
impl DeleteBucketCors {
    /// Creates a new `DeleteBucketCors` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct DeleteBucketCorsOperationInputWrapper(pub crate::input::DeleteBucketCorsInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for DeleteBucketCorsOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(DeleteBucketCorsOperationInputWrapper(
            crate::operation_deser::parse_delete_bucket_cors_request(req).await?,
        ))
    }
}
pub struct DeleteBucketCorsOperationOutputWrapper(pub crate::output::DeleteBucketCorsOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for DeleteBucketCorsOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_delete_bucket_cors_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::DeleteBucketCorsOutput> for DeleteBucketCorsOperationOutputWrapper {
    fn from(o: crate::output::DeleteBucketCorsOutput) -> Self {
        Self(o)
    }
}
impl From<DeleteBucketCorsOperationInputWrapper> for crate::input::DeleteBucketCorsInput {
    fn from(i: DeleteBucketCorsOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `DeleteBucketEncryption`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteBucketEncryption {
    _private: (),
}
impl DeleteBucketEncryption {
    /// Creates a new `DeleteBucketEncryption` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct DeleteBucketEncryptionOperationInputWrapper(
    pub crate::input::DeleteBucketEncryptionInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for DeleteBucketEncryptionOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(DeleteBucketEncryptionOperationInputWrapper(
            crate::operation_deser::parse_delete_bucket_encryption_request(req).await?,
        ))
    }
}
pub struct DeleteBucketEncryptionOperationOutputWrapper(
    pub crate::output::DeleteBucketEncryptionOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for DeleteBucketEncryptionOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_delete_bucket_encryption_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::DeleteBucketEncryptionOutput>
    for DeleteBucketEncryptionOperationOutputWrapper
{
    fn from(o: crate::output::DeleteBucketEncryptionOutput) -> Self {
        Self(o)
    }
}
impl From<DeleteBucketEncryptionOperationInputWrapper>
    for crate::input::DeleteBucketEncryptionInput
{
    fn from(i: DeleteBucketEncryptionOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `DeleteBucketIntelligentTieringConfiguration`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteBucketIntelligentTieringConfiguration {
    _private: (),
}
impl DeleteBucketIntelligentTieringConfiguration {
    /// Creates a new `DeleteBucketIntelligentTieringConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct DeleteBucketIntelligentTieringConfigurationOperationInputWrapper(
    pub crate::input::DeleteBucketIntelligentTieringConfigurationInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B>
    for DeleteBucketIntelligentTieringConfigurationOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(DeleteBucketIntelligentTieringConfigurationOperationInputWrapper(crate::operation_deser::parse_delete_bucket_intelligent_tiering_configuration_request(req).await?))
    }
}
pub struct DeleteBucketIntelligentTieringConfigurationOperationOutputWrapper(
    pub crate::output::DeleteBucketIntelligentTieringConfigurationOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse
    for DeleteBucketIntelligentTieringConfigurationOperationOutputWrapper
{
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_delete_bucket_intelligent_tiering_configuration_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response()
        }
    }
}
impl From<crate::output::DeleteBucketIntelligentTieringConfigurationOutput>
    for DeleteBucketIntelligentTieringConfigurationOperationOutputWrapper
{
    fn from(o: crate::output::DeleteBucketIntelligentTieringConfigurationOutput) -> Self {
        Self(o)
    }
}
impl From<DeleteBucketIntelligentTieringConfigurationOperationInputWrapper>
    for crate::input::DeleteBucketIntelligentTieringConfigurationInput
{
    fn from(i: DeleteBucketIntelligentTieringConfigurationOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `DeleteBucketInventoryConfiguration`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteBucketInventoryConfiguration {
    _private: (),
}
impl DeleteBucketInventoryConfiguration {
    /// Creates a new `DeleteBucketInventoryConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct DeleteBucketInventoryConfigurationOperationInputWrapper(
    pub crate::input::DeleteBucketInventoryConfigurationInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B>
    for DeleteBucketInventoryConfigurationOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(DeleteBucketInventoryConfigurationOperationInputWrapper(
            crate::operation_deser::parse_delete_bucket_inventory_configuration_request(req)
                .await?,
        ))
    }
}
pub struct DeleteBucketInventoryConfigurationOperationOutputWrapper(
    pub crate::output::DeleteBucketInventoryConfigurationOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse
    for DeleteBucketInventoryConfigurationOperationOutputWrapper
{
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_delete_bucket_inventory_configuration_response(self.0)
        {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::DeleteBucketInventoryConfigurationOutput>
    for DeleteBucketInventoryConfigurationOperationOutputWrapper
{
    fn from(o: crate::output::DeleteBucketInventoryConfigurationOutput) -> Self {
        Self(o)
    }
}
impl From<DeleteBucketInventoryConfigurationOperationInputWrapper>
    for crate::input::DeleteBucketInventoryConfigurationInput
{
    fn from(i: DeleteBucketInventoryConfigurationOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `DeleteBucketLifecycle`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteBucketLifecycle {
    _private: (),
}
impl DeleteBucketLifecycle {
    /// Creates a new `DeleteBucketLifecycle` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct DeleteBucketLifecycleOperationInputWrapper(pub crate::input::DeleteBucketLifecycleInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for DeleteBucketLifecycleOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(DeleteBucketLifecycleOperationInputWrapper(
            crate::operation_deser::parse_delete_bucket_lifecycle_request(req).await?,
        ))
    }
}
pub struct DeleteBucketLifecycleOperationOutputWrapper(
    pub crate::output::DeleteBucketLifecycleOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for DeleteBucketLifecycleOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_delete_bucket_lifecycle_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::DeleteBucketLifecycleOutput>
    for DeleteBucketLifecycleOperationOutputWrapper
{
    fn from(o: crate::output::DeleteBucketLifecycleOutput) -> Self {
        Self(o)
    }
}
impl From<DeleteBucketLifecycleOperationInputWrapper> for crate::input::DeleteBucketLifecycleInput {
    fn from(i: DeleteBucketLifecycleOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `DeleteBucketMetricsConfiguration`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteBucketMetricsConfiguration {
    _private: (),
}
impl DeleteBucketMetricsConfiguration {
    /// Creates a new `DeleteBucketMetricsConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct DeleteBucketMetricsConfigurationOperationInputWrapper(
    pub crate::input::DeleteBucketMetricsConfigurationInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for DeleteBucketMetricsConfigurationOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(DeleteBucketMetricsConfigurationOperationInputWrapper(
            crate::operation_deser::parse_delete_bucket_metrics_configuration_request(req).await?,
        ))
    }
}
pub struct DeleteBucketMetricsConfigurationOperationOutputWrapper(
    pub crate::output::DeleteBucketMetricsConfigurationOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for DeleteBucketMetricsConfigurationOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_delete_bucket_metrics_configuration_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::DeleteBucketMetricsConfigurationOutput>
    for DeleteBucketMetricsConfigurationOperationOutputWrapper
{
    fn from(o: crate::output::DeleteBucketMetricsConfigurationOutput) -> Self {
        Self(o)
    }
}
impl From<DeleteBucketMetricsConfigurationOperationInputWrapper>
    for crate::input::DeleteBucketMetricsConfigurationInput
{
    fn from(i: DeleteBucketMetricsConfigurationOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `DeleteBucketOwnershipControls`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteBucketOwnershipControls {
    _private: (),
}
impl DeleteBucketOwnershipControls {
    /// Creates a new `DeleteBucketOwnershipControls` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct DeleteBucketOwnershipControlsOperationInputWrapper(
    pub crate::input::DeleteBucketOwnershipControlsInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for DeleteBucketOwnershipControlsOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(DeleteBucketOwnershipControlsOperationInputWrapper(
            crate::operation_deser::parse_delete_bucket_ownership_controls_request(req).await?,
        ))
    }
}
pub struct DeleteBucketOwnershipControlsOperationOutputWrapper(
    pub crate::output::DeleteBucketOwnershipControlsOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for DeleteBucketOwnershipControlsOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_delete_bucket_ownership_controls_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::DeleteBucketOwnershipControlsOutput>
    for DeleteBucketOwnershipControlsOperationOutputWrapper
{
    fn from(o: crate::output::DeleteBucketOwnershipControlsOutput) -> Self {
        Self(o)
    }
}
impl From<DeleteBucketOwnershipControlsOperationInputWrapper>
    for crate::input::DeleteBucketOwnershipControlsInput
{
    fn from(i: DeleteBucketOwnershipControlsOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `DeleteBucketPolicy`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteBucketPolicy {
    _private: (),
}
impl DeleteBucketPolicy {
    /// Creates a new `DeleteBucketPolicy` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct DeleteBucketPolicyOperationInputWrapper(pub crate::input::DeleteBucketPolicyInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for DeleteBucketPolicyOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(DeleteBucketPolicyOperationInputWrapper(
            crate::operation_deser::parse_delete_bucket_policy_request(req).await?,
        ))
    }
}
pub struct DeleteBucketPolicyOperationOutputWrapper(pub crate::output::DeleteBucketPolicyOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for DeleteBucketPolicyOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_delete_bucket_policy_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::DeleteBucketPolicyOutput> for DeleteBucketPolicyOperationOutputWrapper {
    fn from(o: crate::output::DeleteBucketPolicyOutput) -> Self {
        Self(o)
    }
}
impl From<DeleteBucketPolicyOperationInputWrapper> for crate::input::DeleteBucketPolicyInput {
    fn from(i: DeleteBucketPolicyOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `DeleteBucketReplication`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteBucketReplication {
    _private: (),
}
impl DeleteBucketReplication {
    /// Creates a new `DeleteBucketReplication` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct DeleteBucketReplicationOperationInputWrapper(
    pub crate::input::DeleteBucketReplicationInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for DeleteBucketReplicationOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(DeleteBucketReplicationOperationInputWrapper(
            crate::operation_deser::parse_delete_bucket_replication_request(req).await?,
        ))
    }
}
pub struct DeleteBucketReplicationOperationOutputWrapper(
    pub crate::output::DeleteBucketReplicationOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for DeleteBucketReplicationOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_delete_bucket_replication_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::DeleteBucketReplicationOutput>
    for DeleteBucketReplicationOperationOutputWrapper
{
    fn from(o: crate::output::DeleteBucketReplicationOutput) -> Self {
        Self(o)
    }
}
impl From<DeleteBucketReplicationOperationInputWrapper>
    for crate::input::DeleteBucketReplicationInput
{
    fn from(i: DeleteBucketReplicationOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `DeleteBucketTagging`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteBucketTagging {
    _private: (),
}
impl DeleteBucketTagging {
    /// Creates a new `DeleteBucketTagging` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct DeleteBucketTaggingOperationInputWrapper(pub crate::input::DeleteBucketTaggingInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for DeleteBucketTaggingOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(DeleteBucketTaggingOperationInputWrapper(
            crate::operation_deser::parse_delete_bucket_tagging_request(req).await?,
        ))
    }
}
pub struct DeleteBucketTaggingOperationOutputWrapper(pub crate::output::DeleteBucketTaggingOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for DeleteBucketTaggingOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_delete_bucket_tagging_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::DeleteBucketTaggingOutput> for DeleteBucketTaggingOperationOutputWrapper {
    fn from(o: crate::output::DeleteBucketTaggingOutput) -> Self {
        Self(o)
    }
}
impl From<DeleteBucketTaggingOperationInputWrapper> for crate::input::DeleteBucketTaggingInput {
    fn from(i: DeleteBucketTaggingOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `DeleteBucketWebsite`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteBucketWebsite {
    _private: (),
}
impl DeleteBucketWebsite {
    /// Creates a new `DeleteBucketWebsite` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct DeleteBucketWebsiteOperationInputWrapper(pub crate::input::DeleteBucketWebsiteInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for DeleteBucketWebsiteOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(DeleteBucketWebsiteOperationInputWrapper(
            crate::operation_deser::parse_delete_bucket_website_request(req).await?,
        ))
    }
}
pub struct DeleteBucketWebsiteOperationOutputWrapper(pub crate::output::DeleteBucketWebsiteOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for DeleteBucketWebsiteOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_delete_bucket_website_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::DeleteBucketWebsiteOutput> for DeleteBucketWebsiteOperationOutputWrapper {
    fn from(o: crate::output::DeleteBucketWebsiteOutput) -> Self {
        Self(o)
    }
}
impl From<DeleteBucketWebsiteOperationInputWrapper> for crate::input::DeleteBucketWebsiteInput {
    fn from(i: DeleteBucketWebsiteOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `DeleteObject`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteObject {
    _private: (),
}
impl DeleteObject {
    /// Creates a new `DeleteObject` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct DeleteObjectOperationInputWrapper(pub crate::input::DeleteObjectInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for DeleteObjectOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(DeleteObjectOperationInputWrapper(
            crate::operation_deser::parse_delete_object_request(req).await?,
        ))
    }
}
pub struct DeleteObjectOperationOutputWrapper(pub crate::output::DeleteObjectOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for DeleteObjectOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_delete_object_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::DeleteObjectOutput> for DeleteObjectOperationOutputWrapper {
    fn from(o: crate::output::DeleteObjectOutput) -> Self {
        Self(o)
    }
}
impl From<DeleteObjectOperationInputWrapper> for crate::input::DeleteObjectInput {
    fn from(i: DeleteObjectOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `DeleteObjects`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteObjects {
    _private: (),
}
impl DeleteObjects {
    /// Creates a new `DeleteObjects` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct DeleteObjectsOperationInputWrapper(pub crate::input::DeleteObjectsInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for DeleteObjectsOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(DeleteObjectsOperationInputWrapper(
            crate::operation_deser::parse_delete_objects_request(req).await?,
        ))
    }
}
pub struct DeleteObjectsOperationOutputWrapper(pub crate::output::DeleteObjectsOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for DeleteObjectsOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_delete_objects_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::DeleteObjectsOutput> for DeleteObjectsOperationOutputWrapper {
    fn from(o: crate::output::DeleteObjectsOutput) -> Self {
        Self(o)
    }
}
impl From<DeleteObjectsOperationInputWrapper> for crate::input::DeleteObjectsInput {
    fn from(i: DeleteObjectsOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `DeleteObjectTagging`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteObjectTagging {
    _private: (),
}
impl DeleteObjectTagging {
    /// Creates a new `DeleteObjectTagging` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct DeleteObjectTaggingOperationInputWrapper(pub crate::input::DeleteObjectTaggingInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for DeleteObjectTaggingOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(DeleteObjectTaggingOperationInputWrapper(
            crate::operation_deser::parse_delete_object_tagging_request(req).await?,
        ))
    }
}
pub struct DeleteObjectTaggingOperationOutputWrapper(pub crate::output::DeleteObjectTaggingOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for DeleteObjectTaggingOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_delete_object_tagging_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::DeleteObjectTaggingOutput> for DeleteObjectTaggingOperationOutputWrapper {
    fn from(o: crate::output::DeleteObjectTaggingOutput) -> Self {
        Self(o)
    }
}
impl From<DeleteObjectTaggingOperationInputWrapper> for crate::input::DeleteObjectTaggingInput {
    fn from(i: DeleteObjectTaggingOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `DeletePublicAccessBlock`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeletePublicAccessBlock {
    _private: (),
}
impl DeletePublicAccessBlock {
    /// Creates a new `DeletePublicAccessBlock` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct DeletePublicAccessBlockOperationInputWrapper(
    pub crate::input::DeletePublicAccessBlockInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for DeletePublicAccessBlockOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(DeletePublicAccessBlockOperationInputWrapper(
            crate::operation_deser::parse_delete_public_access_block_request(req).await?,
        ))
    }
}
pub struct DeletePublicAccessBlockOperationOutputWrapper(
    pub crate::output::DeletePublicAccessBlockOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for DeletePublicAccessBlockOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_delete_public_access_block_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::DeletePublicAccessBlockOutput>
    for DeletePublicAccessBlockOperationOutputWrapper
{
    fn from(o: crate::output::DeletePublicAccessBlockOutput) -> Self {
        Self(o)
    }
}
impl From<DeletePublicAccessBlockOperationInputWrapper>
    for crate::input::DeletePublicAccessBlockInput
{
    fn from(i: DeletePublicAccessBlockOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `GetBucketAccelerateConfiguration`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetBucketAccelerateConfiguration {
    _private: (),
}
impl GetBucketAccelerateConfiguration {
    /// Creates a new `GetBucketAccelerateConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct GetBucketAccelerateConfigurationOperationInputWrapper(
    pub crate::input::GetBucketAccelerateConfigurationInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for GetBucketAccelerateConfigurationOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(GetBucketAccelerateConfigurationOperationInputWrapper(
            crate::operation_deser::parse_get_bucket_accelerate_configuration_request(req).await?,
        ))
    }
}
pub struct GetBucketAccelerateConfigurationOperationOutputWrapper(
    pub crate::output::GetBucketAccelerateConfigurationOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for GetBucketAccelerateConfigurationOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_get_bucket_accelerate_configuration_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::GetBucketAccelerateConfigurationOutput>
    for GetBucketAccelerateConfigurationOperationOutputWrapper
{
    fn from(o: crate::output::GetBucketAccelerateConfigurationOutput) -> Self {
        Self(o)
    }
}
impl From<GetBucketAccelerateConfigurationOperationInputWrapper>
    for crate::input::GetBucketAccelerateConfigurationInput
{
    fn from(i: GetBucketAccelerateConfigurationOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `GetBucketAcl`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetBucketAcl {
    _private: (),
}
impl GetBucketAcl {
    /// Creates a new `GetBucketAcl` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct GetBucketAclOperationInputWrapper(pub crate::input::GetBucketAclInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for GetBucketAclOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(GetBucketAclOperationInputWrapper(
            crate::operation_deser::parse_get_bucket_acl_request(req).await?,
        ))
    }
}
pub struct GetBucketAclOperationOutputWrapper(pub crate::output::GetBucketAclOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for GetBucketAclOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_get_bucket_acl_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::GetBucketAclOutput> for GetBucketAclOperationOutputWrapper {
    fn from(o: crate::output::GetBucketAclOutput) -> Self {
        Self(o)
    }
}
impl From<GetBucketAclOperationInputWrapper> for crate::input::GetBucketAclInput {
    fn from(i: GetBucketAclOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `GetBucketAnalyticsConfiguration`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetBucketAnalyticsConfiguration {
    _private: (),
}
impl GetBucketAnalyticsConfiguration {
    /// Creates a new `GetBucketAnalyticsConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct GetBucketAnalyticsConfigurationOperationInputWrapper(
    pub crate::input::GetBucketAnalyticsConfigurationInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for GetBucketAnalyticsConfigurationOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(GetBucketAnalyticsConfigurationOperationInputWrapper(
            crate::operation_deser::parse_get_bucket_analytics_configuration_request(req).await?,
        ))
    }
}
pub struct GetBucketAnalyticsConfigurationOperationOutputWrapper(
    pub crate::output::GetBucketAnalyticsConfigurationOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for GetBucketAnalyticsConfigurationOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_get_bucket_analytics_configuration_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::GetBucketAnalyticsConfigurationOutput>
    for GetBucketAnalyticsConfigurationOperationOutputWrapper
{
    fn from(o: crate::output::GetBucketAnalyticsConfigurationOutput) -> Self {
        Self(o)
    }
}
impl From<GetBucketAnalyticsConfigurationOperationInputWrapper>
    for crate::input::GetBucketAnalyticsConfigurationInput
{
    fn from(i: GetBucketAnalyticsConfigurationOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `GetBucketCors`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetBucketCors {
    _private: (),
}
impl GetBucketCors {
    /// Creates a new `GetBucketCors` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct GetBucketCorsOperationInputWrapper(pub crate::input::GetBucketCorsInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for GetBucketCorsOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(GetBucketCorsOperationInputWrapper(
            crate::operation_deser::parse_get_bucket_cors_request(req).await?,
        ))
    }
}
pub struct GetBucketCorsOperationOutputWrapper(pub crate::output::GetBucketCorsOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for GetBucketCorsOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_get_bucket_cors_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::GetBucketCorsOutput> for GetBucketCorsOperationOutputWrapper {
    fn from(o: crate::output::GetBucketCorsOutput) -> Self {
        Self(o)
    }
}
impl From<GetBucketCorsOperationInputWrapper> for crate::input::GetBucketCorsInput {
    fn from(i: GetBucketCorsOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `GetBucketEncryption`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetBucketEncryption {
    _private: (),
}
impl GetBucketEncryption {
    /// Creates a new `GetBucketEncryption` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct GetBucketEncryptionOperationInputWrapper(pub crate::input::GetBucketEncryptionInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for GetBucketEncryptionOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(GetBucketEncryptionOperationInputWrapper(
            crate::operation_deser::parse_get_bucket_encryption_request(req).await?,
        ))
    }
}
pub struct GetBucketEncryptionOperationOutputWrapper(pub crate::output::GetBucketEncryptionOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for GetBucketEncryptionOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_get_bucket_encryption_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::GetBucketEncryptionOutput> for GetBucketEncryptionOperationOutputWrapper {
    fn from(o: crate::output::GetBucketEncryptionOutput) -> Self {
        Self(o)
    }
}
impl From<GetBucketEncryptionOperationInputWrapper> for crate::input::GetBucketEncryptionInput {
    fn from(i: GetBucketEncryptionOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `GetBucketIntelligentTieringConfiguration`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetBucketIntelligentTieringConfiguration {
    _private: (),
}
impl GetBucketIntelligentTieringConfiguration {
    /// Creates a new `GetBucketIntelligentTieringConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct GetBucketIntelligentTieringConfigurationOperationInputWrapper(
    pub crate::input::GetBucketIntelligentTieringConfigurationInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B>
    for GetBucketIntelligentTieringConfigurationOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(
            GetBucketIntelligentTieringConfigurationOperationInputWrapper(
                crate::operation_deser::parse_get_bucket_intelligent_tiering_configuration_request(
                    req,
                )
                .await?,
            ),
        )
    }
}
pub struct GetBucketIntelligentTieringConfigurationOperationOutputWrapper(
    pub crate::output::GetBucketIntelligentTieringConfigurationOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse
    for GetBucketIntelligentTieringConfigurationOperationOutputWrapper
{
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_get_bucket_intelligent_tiering_configuration_response(
            self.0,
        ) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::GetBucketIntelligentTieringConfigurationOutput>
    for GetBucketIntelligentTieringConfigurationOperationOutputWrapper
{
    fn from(o: crate::output::GetBucketIntelligentTieringConfigurationOutput) -> Self {
        Self(o)
    }
}
impl From<GetBucketIntelligentTieringConfigurationOperationInputWrapper>
    for crate::input::GetBucketIntelligentTieringConfigurationInput
{
    fn from(i: GetBucketIntelligentTieringConfigurationOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `GetBucketInventoryConfiguration`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetBucketInventoryConfiguration {
    _private: (),
}
impl GetBucketInventoryConfiguration {
    /// Creates a new `GetBucketInventoryConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct GetBucketInventoryConfigurationOperationInputWrapper(
    pub crate::input::GetBucketInventoryConfigurationInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for GetBucketInventoryConfigurationOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(GetBucketInventoryConfigurationOperationInputWrapper(
            crate::operation_deser::parse_get_bucket_inventory_configuration_request(req).await?,
        ))
    }
}
pub struct GetBucketInventoryConfigurationOperationOutputWrapper(
    pub crate::output::GetBucketInventoryConfigurationOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for GetBucketInventoryConfigurationOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_get_bucket_inventory_configuration_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::GetBucketInventoryConfigurationOutput>
    for GetBucketInventoryConfigurationOperationOutputWrapper
{
    fn from(o: crate::output::GetBucketInventoryConfigurationOutput) -> Self {
        Self(o)
    }
}
impl From<GetBucketInventoryConfigurationOperationInputWrapper>
    for crate::input::GetBucketInventoryConfigurationInput
{
    fn from(i: GetBucketInventoryConfigurationOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `GetBucketLifecycleConfiguration`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetBucketLifecycleConfiguration {
    _private: (),
}
impl GetBucketLifecycleConfiguration {
    /// Creates a new `GetBucketLifecycleConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct GetBucketLifecycleConfigurationOperationInputWrapper(
    pub crate::input::GetBucketLifecycleConfigurationInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for GetBucketLifecycleConfigurationOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(GetBucketLifecycleConfigurationOperationInputWrapper(
            crate::operation_deser::parse_get_bucket_lifecycle_configuration_request(req).await?,
        ))
    }
}
pub struct GetBucketLifecycleConfigurationOperationOutputWrapper(
    pub crate::output::GetBucketLifecycleConfigurationOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for GetBucketLifecycleConfigurationOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_get_bucket_lifecycle_configuration_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::GetBucketLifecycleConfigurationOutput>
    for GetBucketLifecycleConfigurationOperationOutputWrapper
{
    fn from(o: crate::output::GetBucketLifecycleConfigurationOutput) -> Self {
        Self(o)
    }
}
impl From<GetBucketLifecycleConfigurationOperationInputWrapper>
    for crate::input::GetBucketLifecycleConfigurationInput
{
    fn from(i: GetBucketLifecycleConfigurationOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `GetBucketLocation`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetBucketLocation {
    _private: (),
}
impl GetBucketLocation {
    /// Creates a new `GetBucketLocation` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct GetBucketLocationOperationInputWrapper(pub crate::input::GetBucketLocationInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for GetBucketLocationOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(GetBucketLocationOperationInputWrapper(
            crate::operation_deser::parse_get_bucket_location_request(req).await?,
        ))
    }
}
pub struct GetBucketLocationOperationOutputWrapper(pub crate::output::GetBucketLocationOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for GetBucketLocationOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_get_bucket_location_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::GetBucketLocationOutput> for GetBucketLocationOperationOutputWrapper {
    fn from(o: crate::output::GetBucketLocationOutput) -> Self {
        Self(o)
    }
}
impl From<GetBucketLocationOperationInputWrapper> for crate::input::GetBucketLocationInput {
    fn from(i: GetBucketLocationOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `GetBucketLogging`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetBucketLogging {
    _private: (),
}
impl GetBucketLogging {
    /// Creates a new `GetBucketLogging` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct GetBucketLoggingOperationInputWrapper(pub crate::input::GetBucketLoggingInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for GetBucketLoggingOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(GetBucketLoggingOperationInputWrapper(
            crate::operation_deser::parse_get_bucket_logging_request(req).await?,
        ))
    }
}
pub struct GetBucketLoggingOperationOutputWrapper(pub crate::output::GetBucketLoggingOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for GetBucketLoggingOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_get_bucket_logging_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::GetBucketLoggingOutput> for GetBucketLoggingOperationOutputWrapper {
    fn from(o: crate::output::GetBucketLoggingOutput) -> Self {
        Self(o)
    }
}
impl From<GetBucketLoggingOperationInputWrapper> for crate::input::GetBucketLoggingInput {
    fn from(i: GetBucketLoggingOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `GetBucketMetricsConfiguration`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetBucketMetricsConfiguration {
    _private: (),
}
impl GetBucketMetricsConfiguration {
    /// Creates a new `GetBucketMetricsConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct GetBucketMetricsConfigurationOperationInputWrapper(
    pub crate::input::GetBucketMetricsConfigurationInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for GetBucketMetricsConfigurationOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(GetBucketMetricsConfigurationOperationInputWrapper(
            crate::operation_deser::parse_get_bucket_metrics_configuration_request(req).await?,
        ))
    }
}
pub struct GetBucketMetricsConfigurationOperationOutputWrapper(
    pub crate::output::GetBucketMetricsConfigurationOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for GetBucketMetricsConfigurationOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_get_bucket_metrics_configuration_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::GetBucketMetricsConfigurationOutput>
    for GetBucketMetricsConfigurationOperationOutputWrapper
{
    fn from(o: crate::output::GetBucketMetricsConfigurationOutput) -> Self {
        Self(o)
    }
}
impl From<GetBucketMetricsConfigurationOperationInputWrapper>
    for crate::input::GetBucketMetricsConfigurationInput
{
    fn from(i: GetBucketMetricsConfigurationOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `GetBucketNotificationConfiguration`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetBucketNotificationConfiguration {
    _private: (),
}
impl GetBucketNotificationConfiguration {
    /// Creates a new `GetBucketNotificationConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct GetBucketNotificationConfigurationOperationInputWrapper(
    pub crate::input::GetBucketNotificationConfigurationInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B>
    for GetBucketNotificationConfigurationOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(GetBucketNotificationConfigurationOperationInputWrapper(
            crate::operation_deser::parse_get_bucket_notification_configuration_request(req)
                .await?,
        ))
    }
}
pub struct GetBucketNotificationConfigurationOperationOutputWrapper(
    pub crate::output::GetBucketNotificationConfigurationOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse
    for GetBucketNotificationConfigurationOperationOutputWrapper
{
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_get_bucket_notification_configuration_response(self.0)
        {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::GetBucketNotificationConfigurationOutput>
    for GetBucketNotificationConfigurationOperationOutputWrapper
{
    fn from(o: crate::output::GetBucketNotificationConfigurationOutput) -> Self {
        Self(o)
    }
}
impl From<GetBucketNotificationConfigurationOperationInputWrapper>
    for crate::input::GetBucketNotificationConfigurationInput
{
    fn from(i: GetBucketNotificationConfigurationOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `GetBucketOwnershipControls`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetBucketOwnershipControls {
    _private: (),
}
impl GetBucketOwnershipControls {
    /// Creates a new `GetBucketOwnershipControls` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct GetBucketOwnershipControlsOperationInputWrapper(
    pub crate::input::GetBucketOwnershipControlsInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for GetBucketOwnershipControlsOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(GetBucketOwnershipControlsOperationInputWrapper(
            crate::operation_deser::parse_get_bucket_ownership_controls_request(req).await?,
        ))
    }
}
pub struct GetBucketOwnershipControlsOperationOutputWrapper(
    pub crate::output::GetBucketOwnershipControlsOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for GetBucketOwnershipControlsOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_get_bucket_ownership_controls_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::GetBucketOwnershipControlsOutput>
    for GetBucketOwnershipControlsOperationOutputWrapper
{
    fn from(o: crate::output::GetBucketOwnershipControlsOutput) -> Self {
        Self(o)
    }
}
impl From<GetBucketOwnershipControlsOperationInputWrapper>
    for crate::input::GetBucketOwnershipControlsInput
{
    fn from(i: GetBucketOwnershipControlsOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `GetBucketPolicy`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetBucketPolicy {
    _private: (),
}
impl GetBucketPolicy {
    /// Creates a new `GetBucketPolicy` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct GetBucketPolicyOperationInputWrapper(pub crate::input::GetBucketPolicyInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for GetBucketPolicyOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(GetBucketPolicyOperationInputWrapper(
            crate::operation_deser::parse_get_bucket_policy_request(req).await?,
        ))
    }
}
pub struct GetBucketPolicyOperationOutputWrapper(pub crate::output::GetBucketPolicyOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for GetBucketPolicyOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_get_bucket_policy_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::GetBucketPolicyOutput> for GetBucketPolicyOperationOutputWrapper {
    fn from(o: crate::output::GetBucketPolicyOutput) -> Self {
        Self(o)
    }
}
impl From<GetBucketPolicyOperationInputWrapper> for crate::input::GetBucketPolicyInput {
    fn from(i: GetBucketPolicyOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `GetBucketPolicyStatus`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetBucketPolicyStatus {
    _private: (),
}
impl GetBucketPolicyStatus {
    /// Creates a new `GetBucketPolicyStatus` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct GetBucketPolicyStatusOperationInputWrapper(pub crate::input::GetBucketPolicyStatusInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for GetBucketPolicyStatusOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(GetBucketPolicyStatusOperationInputWrapper(
            crate::operation_deser::parse_get_bucket_policy_status_request(req).await?,
        ))
    }
}
pub struct GetBucketPolicyStatusOperationOutputWrapper(
    pub crate::output::GetBucketPolicyStatusOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for GetBucketPolicyStatusOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_get_bucket_policy_status_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::GetBucketPolicyStatusOutput>
    for GetBucketPolicyStatusOperationOutputWrapper
{
    fn from(o: crate::output::GetBucketPolicyStatusOutput) -> Self {
        Self(o)
    }
}
impl From<GetBucketPolicyStatusOperationInputWrapper> for crate::input::GetBucketPolicyStatusInput {
    fn from(i: GetBucketPolicyStatusOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `GetBucketReplication`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetBucketReplication {
    _private: (),
}
impl GetBucketReplication {
    /// Creates a new `GetBucketReplication` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct GetBucketReplicationOperationInputWrapper(pub crate::input::GetBucketReplicationInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for GetBucketReplicationOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(GetBucketReplicationOperationInputWrapper(
            crate::operation_deser::parse_get_bucket_replication_request(req).await?,
        ))
    }
}
pub struct GetBucketReplicationOperationOutputWrapper(
    pub crate::output::GetBucketReplicationOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for GetBucketReplicationOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_get_bucket_replication_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::GetBucketReplicationOutput>
    for GetBucketReplicationOperationOutputWrapper
{
    fn from(o: crate::output::GetBucketReplicationOutput) -> Self {
        Self(o)
    }
}
impl From<GetBucketReplicationOperationInputWrapper> for crate::input::GetBucketReplicationInput {
    fn from(i: GetBucketReplicationOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `GetBucketRequestPayment`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetBucketRequestPayment {
    _private: (),
}
impl GetBucketRequestPayment {
    /// Creates a new `GetBucketRequestPayment` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct GetBucketRequestPaymentOperationInputWrapper(
    pub crate::input::GetBucketRequestPaymentInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for GetBucketRequestPaymentOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(GetBucketRequestPaymentOperationInputWrapper(
            crate::operation_deser::parse_get_bucket_request_payment_request(req).await?,
        ))
    }
}
pub struct GetBucketRequestPaymentOperationOutputWrapper(
    pub crate::output::GetBucketRequestPaymentOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for GetBucketRequestPaymentOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_get_bucket_request_payment_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::GetBucketRequestPaymentOutput>
    for GetBucketRequestPaymentOperationOutputWrapper
{
    fn from(o: crate::output::GetBucketRequestPaymentOutput) -> Self {
        Self(o)
    }
}
impl From<GetBucketRequestPaymentOperationInputWrapper>
    for crate::input::GetBucketRequestPaymentInput
{
    fn from(i: GetBucketRequestPaymentOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `GetBucketTagging`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetBucketTagging {
    _private: (),
}
impl GetBucketTagging {
    /// Creates a new `GetBucketTagging` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct GetBucketTaggingOperationInputWrapper(pub crate::input::GetBucketTaggingInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for GetBucketTaggingOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(GetBucketTaggingOperationInputWrapper(
            crate::operation_deser::parse_get_bucket_tagging_request(req).await?,
        ))
    }
}
pub struct GetBucketTaggingOperationOutputWrapper(pub crate::output::GetBucketTaggingOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for GetBucketTaggingOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_get_bucket_tagging_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::GetBucketTaggingOutput> for GetBucketTaggingOperationOutputWrapper {
    fn from(o: crate::output::GetBucketTaggingOutput) -> Self {
        Self(o)
    }
}
impl From<GetBucketTaggingOperationInputWrapper> for crate::input::GetBucketTaggingInput {
    fn from(i: GetBucketTaggingOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `GetBucketVersioning`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetBucketVersioning {
    _private: (),
}
impl GetBucketVersioning {
    /// Creates a new `GetBucketVersioning` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct GetBucketVersioningOperationInputWrapper(pub crate::input::GetBucketVersioningInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for GetBucketVersioningOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(GetBucketVersioningOperationInputWrapper(
            crate::operation_deser::parse_get_bucket_versioning_request(req).await?,
        ))
    }
}
pub struct GetBucketVersioningOperationOutputWrapper(pub crate::output::GetBucketVersioningOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for GetBucketVersioningOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_get_bucket_versioning_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::GetBucketVersioningOutput> for GetBucketVersioningOperationOutputWrapper {
    fn from(o: crate::output::GetBucketVersioningOutput) -> Self {
        Self(o)
    }
}
impl From<GetBucketVersioningOperationInputWrapper> for crate::input::GetBucketVersioningInput {
    fn from(i: GetBucketVersioningOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `GetBucketWebsite`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetBucketWebsite {
    _private: (),
}
impl GetBucketWebsite {
    /// Creates a new `GetBucketWebsite` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct GetBucketWebsiteOperationInputWrapper(pub crate::input::GetBucketWebsiteInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for GetBucketWebsiteOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(GetBucketWebsiteOperationInputWrapper(
            crate::operation_deser::parse_get_bucket_website_request(req).await?,
        ))
    }
}
pub struct GetBucketWebsiteOperationOutputWrapper(pub crate::output::GetBucketWebsiteOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for GetBucketWebsiteOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_get_bucket_website_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::GetBucketWebsiteOutput> for GetBucketWebsiteOperationOutputWrapper {
    fn from(o: crate::output::GetBucketWebsiteOutput) -> Self {
        Self(o)
    }
}
impl From<GetBucketWebsiteOperationInputWrapper> for crate::input::GetBucketWebsiteInput {
    fn from(i: GetBucketWebsiteOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `GetObject`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetObject {
    _private: (),
}
impl GetObject {
    /// Creates a new `GetObject` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct GetObjectOperationInputWrapper(pub crate::input::GetObjectInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for GetObjectOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(GetObjectOperationInputWrapper(
            crate::operation_deser::parse_get_object_request(req).await?,
        ))
    }
}
pub enum GetObjectOperationOutputWrapper {
    Output(crate::output::GetObjectOutput),
    Error(crate::error::GetObjectError),
}
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for GetObjectOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        let mut response = match self {
            Self::Output(o) => match crate::operation_ser::serialize_get_object_response(o) {
                Ok(response) => response,
                Err(e) => e.into_response(),
            },
            Self::Error(err) => match crate::operation_ser::serialize_get_object_error(&err) {
                Ok(mut response) => {
                    response.extensions_mut().insert(
                        aws_smithy_http_server::ExtensionModeledError::new(err.name()),
                    );
                    response
                }
                Err(e) => e.into_response(),
            },
        };
        response
            .extensions_mut()
            .insert(aws_smithy_http_server::RequestExtensions::new(
                "com.amazonaws.s3",
                "GetObject",
            ));
        response
    }
}
impl From<Result<crate::output::GetObjectOutput, crate::error::GetObjectError>>
    for GetObjectOperationOutputWrapper
{
    fn from(res: Result<crate::output::GetObjectOutput, crate::error::GetObjectError>) -> Self {
        match res {
            Ok(v) => Self::Output(v),
            Err(e) => Self::Error(e),
        }
    }
}
impl From<GetObjectOperationInputWrapper> for crate::input::GetObjectInput {
    fn from(i: GetObjectOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `GetObjectAcl`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetObjectAcl {
    _private: (),
}
impl GetObjectAcl {
    /// Creates a new `GetObjectAcl` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct GetObjectAclOperationInputWrapper(pub crate::input::GetObjectAclInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for GetObjectAclOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(GetObjectAclOperationInputWrapper(
            crate::operation_deser::parse_get_object_acl_request(req).await?,
        ))
    }
}
pub enum GetObjectAclOperationOutputWrapper {
    Output(crate::output::GetObjectAclOutput),
    Error(crate::error::GetObjectAclError),
}
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for GetObjectAclOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        let mut response = match self {
            Self::Output(o) => match crate::operation_ser::serialize_get_object_acl_response(o) {
                Ok(response) => response,
                Err(e) => e.into_response(),
            },
            Self::Error(err) => match crate::operation_ser::serialize_get_object_acl_error(&err) {
                Ok(mut response) => {
                    response.extensions_mut().insert(
                        aws_smithy_http_server::ExtensionModeledError::new(err.name()),
                    );
                    response
                }
                Err(e) => e.into_response(),
            },
        };
        response
            .extensions_mut()
            .insert(aws_smithy_http_server::RequestExtensions::new(
                "com.amazonaws.s3",
                "GetObjectAcl",
            ));
        response
    }
}
impl From<Result<crate::output::GetObjectAclOutput, crate::error::GetObjectAclError>>
    for GetObjectAclOperationOutputWrapper
{
    fn from(
        res: Result<crate::output::GetObjectAclOutput, crate::error::GetObjectAclError>,
    ) -> Self {
        match res {
            Ok(v) => Self::Output(v),
            Err(e) => Self::Error(e),
        }
    }
}
impl From<GetObjectAclOperationInputWrapper> for crate::input::GetObjectAclInput {
    fn from(i: GetObjectAclOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `GetObjectLegalHold`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetObjectLegalHold {
    _private: (),
}
impl GetObjectLegalHold {
    /// Creates a new `GetObjectLegalHold` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct GetObjectLegalHoldOperationInputWrapper(pub crate::input::GetObjectLegalHoldInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for GetObjectLegalHoldOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(GetObjectLegalHoldOperationInputWrapper(
            crate::operation_deser::parse_get_object_legal_hold_request(req).await?,
        ))
    }
}
pub struct GetObjectLegalHoldOperationOutputWrapper(pub crate::output::GetObjectLegalHoldOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for GetObjectLegalHoldOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_get_object_legal_hold_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::GetObjectLegalHoldOutput> for GetObjectLegalHoldOperationOutputWrapper {
    fn from(o: crate::output::GetObjectLegalHoldOutput) -> Self {
        Self(o)
    }
}
impl From<GetObjectLegalHoldOperationInputWrapper> for crate::input::GetObjectLegalHoldInput {
    fn from(i: GetObjectLegalHoldOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `GetObjectLockConfiguration`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetObjectLockConfiguration {
    _private: (),
}
impl GetObjectLockConfiguration {
    /// Creates a new `GetObjectLockConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct GetObjectLockConfigurationOperationInputWrapper(
    pub crate::input::GetObjectLockConfigurationInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for GetObjectLockConfigurationOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(GetObjectLockConfigurationOperationInputWrapper(
            crate::operation_deser::parse_get_object_lock_configuration_request(req).await?,
        ))
    }
}
pub struct GetObjectLockConfigurationOperationOutputWrapper(
    pub crate::output::GetObjectLockConfigurationOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for GetObjectLockConfigurationOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_get_object_lock_configuration_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::GetObjectLockConfigurationOutput>
    for GetObjectLockConfigurationOperationOutputWrapper
{
    fn from(o: crate::output::GetObjectLockConfigurationOutput) -> Self {
        Self(o)
    }
}
impl From<GetObjectLockConfigurationOperationInputWrapper>
    for crate::input::GetObjectLockConfigurationInput
{
    fn from(i: GetObjectLockConfigurationOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `GetObjectRetention`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetObjectRetention {
    _private: (),
}
impl GetObjectRetention {
    /// Creates a new `GetObjectRetention` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct GetObjectRetentionOperationInputWrapper(pub crate::input::GetObjectRetentionInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for GetObjectRetentionOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(GetObjectRetentionOperationInputWrapper(
            crate::operation_deser::parse_get_object_retention_request(req).await?,
        ))
    }
}
pub struct GetObjectRetentionOperationOutputWrapper(pub crate::output::GetObjectRetentionOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for GetObjectRetentionOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_get_object_retention_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::GetObjectRetentionOutput> for GetObjectRetentionOperationOutputWrapper {
    fn from(o: crate::output::GetObjectRetentionOutput) -> Self {
        Self(o)
    }
}
impl From<GetObjectRetentionOperationInputWrapper> for crate::input::GetObjectRetentionInput {
    fn from(i: GetObjectRetentionOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `GetObjectTagging`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetObjectTagging {
    _private: (),
}
impl GetObjectTagging {
    /// Creates a new `GetObjectTagging` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct GetObjectTaggingOperationInputWrapper(pub crate::input::GetObjectTaggingInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for GetObjectTaggingOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(GetObjectTaggingOperationInputWrapper(
            crate::operation_deser::parse_get_object_tagging_request(req).await?,
        ))
    }
}
pub struct GetObjectTaggingOperationOutputWrapper(pub crate::output::GetObjectTaggingOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for GetObjectTaggingOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_get_object_tagging_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::GetObjectTaggingOutput> for GetObjectTaggingOperationOutputWrapper {
    fn from(o: crate::output::GetObjectTaggingOutput) -> Self {
        Self(o)
    }
}
impl From<GetObjectTaggingOperationInputWrapper> for crate::input::GetObjectTaggingInput {
    fn from(i: GetObjectTaggingOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `GetObjectTorrent`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetObjectTorrent {
    _private: (),
}
impl GetObjectTorrent {
    /// Creates a new `GetObjectTorrent` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct GetObjectTorrentOperationInputWrapper(pub crate::input::GetObjectTorrentInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for GetObjectTorrentOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(GetObjectTorrentOperationInputWrapper(
            crate::operation_deser::parse_get_object_torrent_request(req).await?,
        ))
    }
}
pub struct GetObjectTorrentOperationOutputWrapper(pub crate::output::GetObjectTorrentOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for GetObjectTorrentOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_get_object_torrent_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::GetObjectTorrentOutput> for GetObjectTorrentOperationOutputWrapper {
    fn from(o: crate::output::GetObjectTorrentOutput) -> Self {
        Self(o)
    }
}
impl From<GetObjectTorrentOperationInputWrapper> for crate::input::GetObjectTorrentInput {
    fn from(i: GetObjectTorrentOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `GetPublicAccessBlock`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetPublicAccessBlock {
    _private: (),
}
impl GetPublicAccessBlock {
    /// Creates a new `GetPublicAccessBlock` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct GetPublicAccessBlockOperationInputWrapper(pub crate::input::GetPublicAccessBlockInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for GetPublicAccessBlockOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(GetPublicAccessBlockOperationInputWrapper(
            crate::operation_deser::parse_get_public_access_block_request(req).await?,
        ))
    }
}
pub struct GetPublicAccessBlockOperationOutputWrapper(
    pub crate::output::GetPublicAccessBlockOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for GetPublicAccessBlockOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_get_public_access_block_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::GetPublicAccessBlockOutput>
    for GetPublicAccessBlockOperationOutputWrapper
{
    fn from(o: crate::output::GetPublicAccessBlockOutput) -> Self {
        Self(o)
    }
}
impl From<GetPublicAccessBlockOperationInputWrapper> for crate::input::GetPublicAccessBlockInput {
    fn from(i: GetPublicAccessBlockOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `HeadBucket`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct HeadBucket {
    _private: (),
}
impl HeadBucket {
    /// Creates a new `HeadBucket` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct HeadBucketOperationInputWrapper(pub crate::input::HeadBucketInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for HeadBucketOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(HeadBucketOperationInputWrapper(
            crate::operation_deser::parse_head_bucket_request(req).await?,
        ))
    }
}
pub enum HeadBucketOperationOutputWrapper {
    Output(crate::output::HeadBucketOutput),
    Error(crate::error::HeadBucketError),
}
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for HeadBucketOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        let mut response = match self {
            Self::Output(o) => match crate::operation_ser::serialize_head_bucket_response(o) {
                Ok(response) => response,
                Err(e) => e.into_response(),
            },
            Self::Error(err) => match crate::operation_ser::serialize_head_bucket_error(&err) {
                Ok(mut response) => {
                    response.extensions_mut().insert(
                        aws_smithy_http_server::ExtensionModeledError::new(err.name()),
                    );
                    response
                }
                Err(e) => e.into_response(),
            },
        };
        response
            .extensions_mut()
            .insert(aws_smithy_http_server::RequestExtensions::new(
                "com.amazonaws.s3",
                "HeadBucket",
            ));
        response
    }
}
impl From<Result<crate::output::HeadBucketOutput, crate::error::HeadBucketError>>
    for HeadBucketOperationOutputWrapper
{
    fn from(res: Result<crate::output::HeadBucketOutput, crate::error::HeadBucketError>) -> Self {
        match res {
            Ok(v) => Self::Output(v),
            Err(e) => Self::Error(e),
        }
    }
}
impl From<HeadBucketOperationInputWrapper> for crate::input::HeadBucketInput {
    fn from(i: HeadBucketOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `HeadObject`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct HeadObject {
    _private: (),
}
impl HeadObject {
    /// Creates a new `HeadObject` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct HeadObjectOperationInputWrapper(pub crate::input::HeadObjectInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for HeadObjectOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(HeadObjectOperationInputWrapper(
            crate::operation_deser::parse_head_object_request(req).await?,
        ))
    }
}
pub enum HeadObjectOperationOutputWrapper {
    Output(crate::output::HeadObjectOutput),
    Error(crate::error::HeadObjectError),
}
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for HeadObjectOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        let mut response = match self {
            Self::Output(o) => match crate::operation_ser::serialize_head_object_response(o) {
                Ok(response) => response,
                Err(e) => e.into_response(),
            },
            Self::Error(err) => match crate::operation_ser::serialize_head_object_error(&err) {
                Ok(mut response) => {
                    response.extensions_mut().insert(
                        aws_smithy_http_server::ExtensionModeledError::new(err.name()),
                    );
                    response
                }
                Err(e) => e.into_response(),
            },
        };
        response
            .extensions_mut()
            .insert(aws_smithy_http_server::RequestExtensions::new(
                "com.amazonaws.s3",
                "HeadObject",
            ));
        response
    }
}
impl From<Result<crate::output::HeadObjectOutput, crate::error::HeadObjectError>>
    for HeadObjectOperationOutputWrapper
{
    fn from(res: Result<crate::output::HeadObjectOutput, crate::error::HeadObjectError>) -> Self {
        match res {
            Ok(v) => Self::Output(v),
            Err(e) => Self::Error(e),
        }
    }
}
impl From<HeadObjectOperationInputWrapper> for crate::input::HeadObjectInput {
    fn from(i: HeadObjectOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `ListBucketAnalyticsConfigurations`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListBucketAnalyticsConfigurations {
    _private: (),
}
impl ListBucketAnalyticsConfigurations {
    /// Creates a new `ListBucketAnalyticsConfigurations` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct ListBucketAnalyticsConfigurationsOperationInputWrapper(
    pub crate::input::ListBucketAnalyticsConfigurationsInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B>
    for ListBucketAnalyticsConfigurationsOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(ListBucketAnalyticsConfigurationsOperationInputWrapper(
            crate::operation_deser::parse_list_bucket_analytics_configurations_request(req).await?,
        ))
    }
}
pub struct ListBucketAnalyticsConfigurationsOperationOutputWrapper(
    pub crate::output::ListBucketAnalyticsConfigurationsOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for ListBucketAnalyticsConfigurationsOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_list_bucket_analytics_configurations_response(self.0)
        {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::ListBucketAnalyticsConfigurationsOutput>
    for ListBucketAnalyticsConfigurationsOperationOutputWrapper
{
    fn from(o: crate::output::ListBucketAnalyticsConfigurationsOutput) -> Self {
        Self(o)
    }
}
impl From<ListBucketAnalyticsConfigurationsOperationInputWrapper>
    for crate::input::ListBucketAnalyticsConfigurationsInput
{
    fn from(i: ListBucketAnalyticsConfigurationsOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `ListBucketIntelligentTieringConfigurations`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListBucketIntelligentTieringConfigurations {
    _private: (),
}
impl ListBucketIntelligentTieringConfigurations {
    /// Creates a new `ListBucketIntelligentTieringConfigurations` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct ListBucketIntelligentTieringConfigurationsOperationInputWrapper(
    pub crate::input::ListBucketIntelligentTieringConfigurationsInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B>
    for ListBucketIntelligentTieringConfigurationsOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(ListBucketIntelligentTieringConfigurationsOperationInputWrapper(crate::operation_deser::parse_list_bucket_intelligent_tiering_configurations_request(req).await?))
    }
}
pub struct ListBucketIntelligentTieringConfigurationsOperationOutputWrapper(
    pub crate::output::ListBucketIntelligentTieringConfigurationsOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse
    for ListBucketIntelligentTieringConfigurationsOperationOutputWrapper
{
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_list_bucket_intelligent_tiering_configurations_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response()
        }
    }
}
impl From<crate::output::ListBucketIntelligentTieringConfigurationsOutput>
    for ListBucketIntelligentTieringConfigurationsOperationOutputWrapper
{
    fn from(o: crate::output::ListBucketIntelligentTieringConfigurationsOutput) -> Self {
        Self(o)
    }
}
impl From<ListBucketIntelligentTieringConfigurationsOperationInputWrapper>
    for crate::input::ListBucketIntelligentTieringConfigurationsInput
{
    fn from(i: ListBucketIntelligentTieringConfigurationsOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `ListBucketInventoryConfigurations`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListBucketInventoryConfigurations {
    _private: (),
}
impl ListBucketInventoryConfigurations {
    /// Creates a new `ListBucketInventoryConfigurations` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct ListBucketInventoryConfigurationsOperationInputWrapper(
    pub crate::input::ListBucketInventoryConfigurationsInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B>
    for ListBucketInventoryConfigurationsOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(ListBucketInventoryConfigurationsOperationInputWrapper(
            crate::operation_deser::parse_list_bucket_inventory_configurations_request(req).await?,
        ))
    }
}
pub struct ListBucketInventoryConfigurationsOperationOutputWrapper(
    pub crate::output::ListBucketInventoryConfigurationsOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for ListBucketInventoryConfigurationsOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_list_bucket_inventory_configurations_response(self.0)
        {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::ListBucketInventoryConfigurationsOutput>
    for ListBucketInventoryConfigurationsOperationOutputWrapper
{
    fn from(o: crate::output::ListBucketInventoryConfigurationsOutput) -> Self {
        Self(o)
    }
}
impl From<ListBucketInventoryConfigurationsOperationInputWrapper>
    for crate::input::ListBucketInventoryConfigurationsInput
{
    fn from(i: ListBucketInventoryConfigurationsOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `ListBucketMetricsConfigurations`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListBucketMetricsConfigurations {
    _private: (),
}
impl ListBucketMetricsConfigurations {
    /// Creates a new `ListBucketMetricsConfigurations` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct ListBucketMetricsConfigurationsOperationInputWrapper(
    pub crate::input::ListBucketMetricsConfigurationsInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for ListBucketMetricsConfigurationsOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(ListBucketMetricsConfigurationsOperationInputWrapper(
            crate::operation_deser::parse_list_bucket_metrics_configurations_request(req).await?,
        ))
    }
}
pub struct ListBucketMetricsConfigurationsOperationOutputWrapper(
    pub crate::output::ListBucketMetricsConfigurationsOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for ListBucketMetricsConfigurationsOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_list_bucket_metrics_configurations_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::ListBucketMetricsConfigurationsOutput>
    for ListBucketMetricsConfigurationsOperationOutputWrapper
{
    fn from(o: crate::output::ListBucketMetricsConfigurationsOutput) -> Self {
        Self(o)
    }
}
impl From<ListBucketMetricsConfigurationsOperationInputWrapper>
    for crate::input::ListBucketMetricsConfigurationsInput
{
    fn from(i: ListBucketMetricsConfigurationsOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `ListBuckets`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListBuckets {
    _private: (),
}
impl ListBuckets {
    /// Creates a new `ListBuckets` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct ListBucketsOperationInputWrapper(pub crate::input::ListBucketsInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for ListBucketsOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(ListBucketsOperationInputWrapper(
            crate::operation_deser::parse_list_buckets_request(req).await?,
        ))
    }
}
pub struct ListBucketsOperationOutputWrapper(pub crate::output::ListBucketsOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for ListBucketsOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_list_buckets_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::ListBucketsOutput> for ListBucketsOperationOutputWrapper {
    fn from(o: crate::output::ListBucketsOutput) -> Self {
        Self(o)
    }
}
impl From<ListBucketsOperationInputWrapper> for crate::input::ListBucketsInput {
    fn from(i: ListBucketsOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `ListMultipartUploads`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListMultipartUploads {
    _private: (),
}
impl ListMultipartUploads {
    /// Creates a new `ListMultipartUploads` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct ListMultipartUploadsOperationInputWrapper(pub crate::input::ListMultipartUploadsInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for ListMultipartUploadsOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(ListMultipartUploadsOperationInputWrapper(
            crate::operation_deser::parse_list_multipart_uploads_request(req).await?,
        ))
    }
}
pub struct ListMultipartUploadsOperationOutputWrapper(
    pub crate::output::ListMultipartUploadsOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for ListMultipartUploadsOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_list_multipart_uploads_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::ListMultipartUploadsOutput>
    for ListMultipartUploadsOperationOutputWrapper
{
    fn from(o: crate::output::ListMultipartUploadsOutput) -> Self {
        Self(o)
    }
}
impl From<ListMultipartUploadsOperationInputWrapper> for crate::input::ListMultipartUploadsInput {
    fn from(i: ListMultipartUploadsOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `ListObjects`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListObjects {
    _private: (),
}
impl ListObjects {
    /// Creates a new `ListObjects` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct ListObjectsOperationInputWrapper(pub crate::input::ListObjectsInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for ListObjectsOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(ListObjectsOperationInputWrapper(
            crate::operation_deser::parse_list_objects_request(req).await?,
        ))
    }
}
pub enum ListObjectsOperationOutputWrapper {
    Output(crate::output::ListObjectsOutput),
    Error(crate::error::ListObjectsError),
}
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for ListObjectsOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        let mut response = match self {
            Self::Output(o) => match crate::operation_ser::serialize_list_objects_response(o) {
                Ok(response) => response,
                Err(e) => e.into_response(),
            },
            Self::Error(err) => match crate::operation_ser::serialize_list_objects_error(&err) {
                Ok(mut response) => {
                    response.extensions_mut().insert(
                        aws_smithy_http_server::ExtensionModeledError::new(err.name()),
                    );
                    response
                }
                Err(e) => e.into_response(),
            },
        };
        response
            .extensions_mut()
            .insert(aws_smithy_http_server::RequestExtensions::new(
                "com.amazonaws.s3",
                "ListObjects",
            ));
        response
    }
}
impl From<Result<crate::output::ListObjectsOutput, crate::error::ListObjectsError>>
    for ListObjectsOperationOutputWrapper
{
    fn from(res: Result<crate::output::ListObjectsOutput, crate::error::ListObjectsError>) -> Self {
        match res {
            Ok(v) => Self::Output(v),
            Err(e) => Self::Error(e),
        }
    }
}
impl From<ListObjectsOperationInputWrapper> for crate::input::ListObjectsInput {
    fn from(i: ListObjectsOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `ListObjectsV2`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListObjectsV2 {
    _private: (),
}
impl ListObjectsV2 {
    /// Creates a new `ListObjectsV2` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct ListObjectsV2OperationInputWrapper(pub crate::input::ListObjectsV2Input);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for ListObjectsV2OperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(ListObjectsV2OperationInputWrapper(
            crate::operation_deser::parse_list_objects_v2_request(req).await?,
        ))
    }
}
pub enum ListObjectsV2OperationOutputWrapper {
    Output(crate::output::ListObjectsV2Output),
    Error(crate::error::ListObjectsV2Error),
}
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for ListObjectsV2OperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        let mut response = match self {
            Self::Output(o) => match crate::operation_ser::serialize_list_objects_v2_response(o) {
                Ok(response) => response,
                Err(e) => e.into_response(),
            },
            Self::Error(err) => match crate::operation_ser::serialize_list_objects_v2_error(&err) {
                Ok(mut response) => {
                    response.extensions_mut().insert(
                        aws_smithy_http_server::ExtensionModeledError::new(err.name()),
                    );
                    response
                }
                Err(e) => e.into_response(),
            },
        };
        response
            .extensions_mut()
            .insert(aws_smithy_http_server::RequestExtensions::new(
                "com.amazonaws.s3",
                "ListObjectsV2",
            ));
        response
    }
}
impl From<Result<crate::output::ListObjectsV2Output, crate::error::ListObjectsV2Error>>
    for ListObjectsV2OperationOutputWrapper
{
    fn from(
        res: Result<crate::output::ListObjectsV2Output, crate::error::ListObjectsV2Error>,
    ) -> Self {
        match res {
            Ok(v) => Self::Output(v),
            Err(e) => Self::Error(e),
        }
    }
}
impl From<ListObjectsV2OperationInputWrapper> for crate::input::ListObjectsV2Input {
    fn from(i: ListObjectsV2OperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `ListObjectVersions`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListObjectVersions {
    _private: (),
}
impl ListObjectVersions {
    /// Creates a new `ListObjectVersions` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct ListObjectVersionsOperationInputWrapper(pub crate::input::ListObjectVersionsInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for ListObjectVersionsOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(ListObjectVersionsOperationInputWrapper(
            crate::operation_deser::parse_list_object_versions_request(req).await?,
        ))
    }
}
pub struct ListObjectVersionsOperationOutputWrapper(pub crate::output::ListObjectVersionsOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for ListObjectVersionsOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_list_object_versions_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::ListObjectVersionsOutput> for ListObjectVersionsOperationOutputWrapper {
    fn from(o: crate::output::ListObjectVersionsOutput) -> Self {
        Self(o)
    }
}
impl From<ListObjectVersionsOperationInputWrapper> for crate::input::ListObjectVersionsInput {
    fn from(i: ListObjectVersionsOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `ListParts`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListParts {
    _private: (),
}
impl ListParts {
    /// Creates a new `ListParts` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct ListPartsOperationInputWrapper(pub crate::input::ListPartsInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for ListPartsOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(ListPartsOperationInputWrapper(
            crate::operation_deser::parse_list_parts_request(req).await?,
        ))
    }
}
pub struct ListPartsOperationOutputWrapper(pub crate::output::ListPartsOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for ListPartsOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_list_parts_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::ListPartsOutput> for ListPartsOperationOutputWrapper {
    fn from(o: crate::output::ListPartsOutput) -> Self {
        Self(o)
    }
}
impl From<ListPartsOperationInputWrapper> for crate::input::ListPartsInput {
    fn from(i: ListPartsOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `PutBucketAccelerateConfiguration`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutBucketAccelerateConfiguration {
    _private: (),
}
impl PutBucketAccelerateConfiguration {
    /// Creates a new `PutBucketAccelerateConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct PutBucketAccelerateConfigurationOperationInputWrapper(
    pub crate::input::PutBucketAccelerateConfigurationInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for PutBucketAccelerateConfigurationOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(PutBucketAccelerateConfigurationOperationInputWrapper(
            crate::operation_deser::parse_put_bucket_accelerate_configuration_request(req).await?,
        ))
    }
}
pub struct PutBucketAccelerateConfigurationOperationOutputWrapper(
    pub crate::output::PutBucketAccelerateConfigurationOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for PutBucketAccelerateConfigurationOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_put_bucket_accelerate_configuration_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::PutBucketAccelerateConfigurationOutput>
    for PutBucketAccelerateConfigurationOperationOutputWrapper
{
    fn from(o: crate::output::PutBucketAccelerateConfigurationOutput) -> Self {
        Self(o)
    }
}
impl From<PutBucketAccelerateConfigurationOperationInputWrapper>
    for crate::input::PutBucketAccelerateConfigurationInput
{
    fn from(i: PutBucketAccelerateConfigurationOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `PutBucketAcl`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutBucketAcl {
    _private: (),
}
impl PutBucketAcl {
    /// Creates a new `PutBucketAcl` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct PutBucketAclOperationInputWrapper(pub crate::input::PutBucketAclInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for PutBucketAclOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(PutBucketAclOperationInputWrapper(
            crate::operation_deser::parse_put_bucket_acl_request(req).await?,
        ))
    }
}
pub struct PutBucketAclOperationOutputWrapper(pub crate::output::PutBucketAclOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for PutBucketAclOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_put_bucket_acl_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::PutBucketAclOutput> for PutBucketAclOperationOutputWrapper {
    fn from(o: crate::output::PutBucketAclOutput) -> Self {
        Self(o)
    }
}
impl From<PutBucketAclOperationInputWrapper> for crate::input::PutBucketAclInput {
    fn from(i: PutBucketAclOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `PutBucketAnalyticsConfiguration`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutBucketAnalyticsConfiguration {
    _private: (),
}
impl PutBucketAnalyticsConfiguration {
    /// Creates a new `PutBucketAnalyticsConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct PutBucketAnalyticsConfigurationOperationInputWrapper(
    pub crate::input::PutBucketAnalyticsConfigurationInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for PutBucketAnalyticsConfigurationOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(PutBucketAnalyticsConfigurationOperationInputWrapper(
            crate::operation_deser::parse_put_bucket_analytics_configuration_request(req).await?,
        ))
    }
}
pub struct PutBucketAnalyticsConfigurationOperationOutputWrapper(
    pub crate::output::PutBucketAnalyticsConfigurationOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for PutBucketAnalyticsConfigurationOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_put_bucket_analytics_configuration_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::PutBucketAnalyticsConfigurationOutput>
    for PutBucketAnalyticsConfigurationOperationOutputWrapper
{
    fn from(o: crate::output::PutBucketAnalyticsConfigurationOutput) -> Self {
        Self(o)
    }
}
impl From<PutBucketAnalyticsConfigurationOperationInputWrapper>
    for crate::input::PutBucketAnalyticsConfigurationInput
{
    fn from(i: PutBucketAnalyticsConfigurationOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `PutBucketCors`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutBucketCors {
    _private: (),
}
impl PutBucketCors {
    /// Creates a new `PutBucketCors` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct PutBucketCorsOperationInputWrapper(pub crate::input::PutBucketCorsInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for PutBucketCorsOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(PutBucketCorsOperationInputWrapper(
            crate::operation_deser::parse_put_bucket_cors_request(req).await?,
        ))
    }
}
pub struct PutBucketCorsOperationOutputWrapper(pub crate::output::PutBucketCorsOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for PutBucketCorsOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_put_bucket_cors_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::PutBucketCorsOutput> for PutBucketCorsOperationOutputWrapper {
    fn from(o: crate::output::PutBucketCorsOutput) -> Self {
        Self(o)
    }
}
impl From<PutBucketCorsOperationInputWrapper> for crate::input::PutBucketCorsInput {
    fn from(i: PutBucketCorsOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `PutBucketEncryption`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutBucketEncryption {
    _private: (),
}
impl PutBucketEncryption {
    /// Creates a new `PutBucketEncryption` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct PutBucketEncryptionOperationInputWrapper(pub crate::input::PutBucketEncryptionInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for PutBucketEncryptionOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(PutBucketEncryptionOperationInputWrapper(
            crate::operation_deser::parse_put_bucket_encryption_request(req).await?,
        ))
    }
}
pub struct PutBucketEncryptionOperationOutputWrapper(pub crate::output::PutBucketEncryptionOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for PutBucketEncryptionOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_put_bucket_encryption_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::PutBucketEncryptionOutput> for PutBucketEncryptionOperationOutputWrapper {
    fn from(o: crate::output::PutBucketEncryptionOutput) -> Self {
        Self(o)
    }
}
impl From<PutBucketEncryptionOperationInputWrapper> for crate::input::PutBucketEncryptionInput {
    fn from(i: PutBucketEncryptionOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `PutBucketIntelligentTieringConfiguration`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutBucketIntelligentTieringConfiguration {
    _private: (),
}
impl PutBucketIntelligentTieringConfiguration {
    /// Creates a new `PutBucketIntelligentTieringConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct PutBucketIntelligentTieringConfigurationOperationInputWrapper(
    pub crate::input::PutBucketIntelligentTieringConfigurationInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B>
    for PutBucketIntelligentTieringConfigurationOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(
            PutBucketIntelligentTieringConfigurationOperationInputWrapper(
                crate::operation_deser::parse_put_bucket_intelligent_tiering_configuration_request(
                    req,
                )
                .await?,
            ),
        )
    }
}
pub struct PutBucketIntelligentTieringConfigurationOperationOutputWrapper(
    pub crate::output::PutBucketIntelligentTieringConfigurationOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse
    for PutBucketIntelligentTieringConfigurationOperationOutputWrapper
{
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_put_bucket_intelligent_tiering_configuration_response(
            self.0,
        ) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::PutBucketIntelligentTieringConfigurationOutput>
    for PutBucketIntelligentTieringConfigurationOperationOutputWrapper
{
    fn from(o: crate::output::PutBucketIntelligentTieringConfigurationOutput) -> Self {
        Self(o)
    }
}
impl From<PutBucketIntelligentTieringConfigurationOperationInputWrapper>
    for crate::input::PutBucketIntelligentTieringConfigurationInput
{
    fn from(i: PutBucketIntelligentTieringConfigurationOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `PutBucketInventoryConfiguration`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutBucketInventoryConfiguration {
    _private: (),
}
impl PutBucketInventoryConfiguration {
    /// Creates a new `PutBucketInventoryConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct PutBucketInventoryConfigurationOperationInputWrapper(
    pub crate::input::PutBucketInventoryConfigurationInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for PutBucketInventoryConfigurationOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(PutBucketInventoryConfigurationOperationInputWrapper(
            crate::operation_deser::parse_put_bucket_inventory_configuration_request(req).await?,
        ))
    }
}
pub struct PutBucketInventoryConfigurationOperationOutputWrapper(
    pub crate::output::PutBucketInventoryConfigurationOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for PutBucketInventoryConfigurationOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_put_bucket_inventory_configuration_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::PutBucketInventoryConfigurationOutput>
    for PutBucketInventoryConfigurationOperationOutputWrapper
{
    fn from(o: crate::output::PutBucketInventoryConfigurationOutput) -> Self {
        Self(o)
    }
}
impl From<PutBucketInventoryConfigurationOperationInputWrapper>
    for crate::input::PutBucketInventoryConfigurationInput
{
    fn from(i: PutBucketInventoryConfigurationOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `PutBucketLifecycleConfiguration`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutBucketLifecycleConfiguration {
    _private: (),
}
impl PutBucketLifecycleConfiguration {
    /// Creates a new `PutBucketLifecycleConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct PutBucketLifecycleConfigurationOperationInputWrapper(
    pub crate::input::PutBucketLifecycleConfigurationInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for PutBucketLifecycleConfigurationOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(PutBucketLifecycleConfigurationOperationInputWrapper(
            crate::operation_deser::parse_put_bucket_lifecycle_configuration_request(req).await?,
        ))
    }
}
pub struct PutBucketLifecycleConfigurationOperationOutputWrapper(
    pub crate::output::PutBucketLifecycleConfigurationOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for PutBucketLifecycleConfigurationOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_put_bucket_lifecycle_configuration_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::PutBucketLifecycleConfigurationOutput>
    for PutBucketLifecycleConfigurationOperationOutputWrapper
{
    fn from(o: crate::output::PutBucketLifecycleConfigurationOutput) -> Self {
        Self(o)
    }
}
impl From<PutBucketLifecycleConfigurationOperationInputWrapper>
    for crate::input::PutBucketLifecycleConfigurationInput
{
    fn from(i: PutBucketLifecycleConfigurationOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `PutBucketLogging`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutBucketLogging {
    _private: (),
}
impl PutBucketLogging {
    /// Creates a new `PutBucketLogging` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct PutBucketLoggingOperationInputWrapper(pub crate::input::PutBucketLoggingInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for PutBucketLoggingOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(PutBucketLoggingOperationInputWrapper(
            crate::operation_deser::parse_put_bucket_logging_request(req).await?,
        ))
    }
}
pub struct PutBucketLoggingOperationOutputWrapper(pub crate::output::PutBucketLoggingOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for PutBucketLoggingOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_put_bucket_logging_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::PutBucketLoggingOutput> for PutBucketLoggingOperationOutputWrapper {
    fn from(o: crate::output::PutBucketLoggingOutput) -> Self {
        Self(o)
    }
}
impl From<PutBucketLoggingOperationInputWrapper> for crate::input::PutBucketLoggingInput {
    fn from(i: PutBucketLoggingOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `PutBucketMetricsConfiguration`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutBucketMetricsConfiguration {
    _private: (),
}
impl PutBucketMetricsConfiguration {
    /// Creates a new `PutBucketMetricsConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct PutBucketMetricsConfigurationOperationInputWrapper(
    pub crate::input::PutBucketMetricsConfigurationInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for PutBucketMetricsConfigurationOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(PutBucketMetricsConfigurationOperationInputWrapper(
            crate::operation_deser::parse_put_bucket_metrics_configuration_request(req).await?,
        ))
    }
}
pub struct PutBucketMetricsConfigurationOperationOutputWrapper(
    pub crate::output::PutBucketMetricsConfigurationOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for PutBucketMetricsConfigurationOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_put_bucket_metrics_configuration_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::PutBucketMetricsConfigurationOutput>
    for PutBucketMetricsConfigurationOperationOutputWrapper
{
    fn from(o: crate::output::PutBucketMetricsConfigurationOutput) -> Self {
        Self(o)
    }
}
impl From<PutBucketMetricsConfigurationOperationInputWrapper>
    for crate::input::PutBucketMetricsConfigurationInput
{
    fn from(i: PutBucketMetricsConfigurationOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `PutBucketNotificationConfiguration`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutBucketNotificationConfiguration {
    _private: (),
}
impl PutBucketNotificationConfiguration {
    /// Creates a new `PutBucketNotificationConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct PutBucketNotificationConfigurationOperationInputWrapper(
    pub crate::input::PutBucketNotificationConfigurationInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B>
    for PutBucketNotificationConfigurationOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(PutBucketNotificationConfigurationOperationInputWrapper(
            crate::operation_deser::parse_put_bucket_notification_configuration_request(req)
                .await?,
        ))
    }
}
pub struct PutBucketNotificationConfigurationOperationOutputWrapper(
    pub crate::output::PutBucketNotificationConfigurationOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse
    for PutBucketNotificationConfigurationOperationOutputWrapper
{
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_put_bucket_notification_configuration_response(self.0)
        {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::PutBucketNotificationConfigurationOutput>
    for PutBucketNotificationConfigurationOperationOutputWrapper
{
    fn from(o: crate::output::PutBucketNotificationConfigurationOutput) -> Self {
        Self(o)
    }
}
impl From<PutBucketNotificationConfigurationOperationInputWrapper>
    for crate::input::PutBucketNotificationConfigurationInput
{
    fn from(i: PutBucketNotificationConfigurationOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `PutBucketOwnershipControls`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutBucketOwnershipControls {
    _private: (),
}
impl PutBucketOwnershipControls {
    /// Creates a new `PutBucketOwnershipControls` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct PutBucketOwnershipControlsOperationInputWrapper(
    pub crate::input::PutBucketOwnershipControlsInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for PutBucketOwnershipControlsOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(PutBucketOwnershipControlsOperationInputWrapper(
            crate::operation_deser::parse_put_bucket_ownership_controls_request(req).await?,
        ))
    }
}
pub struct PutBucketOwnershipControlsOperationOutputWrapper(
    pub crate::output::PutBucketOwnershipControlsOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for PutBucketOwnershipControlsOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_put_bucket_ownership_controls_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::PutBucketOwnershipControlsOutput>
    for PutBucketOwnershipControlsOperationOutputWrapper
{
    fn from(o: crate::output::PutBucketOwnershipControlsOutput) -> Self {
        Self(o)
    }
}
impl From<PutBucketOwnershipControlsOperationInputWrapper>
    for crate::input::PutBucketOwnershipControlsInput
{
    fn from(i: PutBucketOwnershipControlsOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `PutBucketPolicy`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutBucketPolicy {
    _private: (),
}
impl PutBucketPolicy {
    /// Creates a new `PutBucketPolicy` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct PutBucketPolicyOperationInputWrapper(pub crate::input::PutBucketPolicyInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for PutBucketPolicyOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(PutBucketPolicyOperationInputWrapper(
            crate::operation_deser::parse_put_bucket_policy_request(req).await?,
        ))
    }
}
pub struct PutBucketPolicyOperationOutputWrapper(pub crate::output::PutBucketPolicyOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for PutBucketPolicyOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_put_bucket_policy_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::PutBucketPolicyOutput> for PutBucketPolicyOperationOutputWrapper {
    fn from(o: crate::output::PutBucketPolicyOutput) -> Self {
        Self(o)
    }
}
impl From<PutBucketPolicyOperationInputWrapper> for crate::input::PutBucketPolicyInput {
    fn from(i: PutBucketPolicyOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `PutBucketReplication`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutBucketReplication {
    _private: (),
}
impl PutBucketReplication {
    /// Creates a new `PutBucketReplication` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct PutBucketReplicationOperationInputWrapper(pub crate::input::PutBucketReplicationInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for PutBucketReplicationOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(PutBucketReplicationOperationInputWrapper(
            crate::operation_deser::parse_put_bucket_replication_request(req).await?,
        ))
    }
}
pub struct PutBucketReplicationOperationOutputWrapper(
    pub crate::output::PutBucketReplicationOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for PutBucketReplicationOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_put_bucket_replication_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::PutBucketReplicationOutput>
    for PutBucketReplicationOperationOutputWrapper
{
    fn from(o: crate::output::PutBucketReplicationOutput) -> Self {
        Self(o)
    }
}
impl From<PutBucketReplicationOperationInputWrapper> for crate::input::PutBucketReplicationInput {
    fn from(i: PutBucketReplicationOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `PutBucketRequestPayment`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutBucketRequestPayment {
    _private: (),
}
impl PutBucketRequestPayment {
    /// Creates a new `PutBucketRequestPayment` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct PutBucketRequestPaymentOperationInputWrapper(
    pub crate::input::PutBucketRequestPaymentInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for PutBucketRequestPaymentOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(PutBucketRequestPaymentOperationInputWrapper(
            crate::operation_deser::parse_put_bucket_request_payment_request(req).await?,
        ))
    }
}
pub struct PutBucketRequestPaymentOperationOutputWrapper(
    pub crate::output::PutBucketRequestPaymentOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for PutBucketRequestPaymentOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_put_bucket_request_payment_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::PutBucketRequestPaymentOutput>
    for PutBucketRequestPaymentOperationOutputWrapper
{
    fn from(o: crate::output::PutBucketRequestPaymentOutput) -> Self {
        Self(o)
    }
}
impl From<PutBucketRequestPaymentOperationInputWrapper>
    for crate::input::PutBucketRequestPaymentInput
{
    fn from(i: PutBucketRequestPaymentOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `PutBucketTagging`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutBucketTagging {
    _private: (),
}
impl PutBucketTagging {
    /// Creates a new `PutBucketTagging` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct PutBucketTaggingOperationInputWrapper(pub crate::input::PutBucketTaggingInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for PutBucketTaggingOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(PutBucketTaggingOperationInputWrapper(
            crate::operation_deser::parse_put_bucket_tagging_request(req).await?,
        ))
    }
}
pub struct PutBucketTaggingOperationOutputWrapper(pub crate::output::PutBucketTaggingOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for PutBucketTaggingOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_put_bucket_tagging_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::PutBucketTaggingOutput> for PutBucketTaggingOperationOutputWrapper {
    fn from(o: crate::output::PutBucketTaggingOutput) -> Self {
        Self(o)
    }
}
impl From<PutBucketTaggingOperationInputWrapper> for crate::input::PutBucketTaggingInput {
    fn from(i: PutBucketTaggingOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `PutBucketVersioning`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutBucketVersioning {
    _private: (),
}
impl PutBucketVersioning {
    /// Creates a new `PutBucketVersioning` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct PutBucketVersioningOperationInputWrapper(pub crate::input::PutBucketVersioningInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for PutBucketVersioningOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(PutBucketVersioningOperationInputWrapper(
            crate::operation_deser::parse_put_bucket_versioning_request(req).await?,
        ))
    }
}
pub struct PutBucketVersioningOperationOutputWrapper(pub crate::output::PutBucketVersioningOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for PutBucketVersioningOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_put_bucket_versioning_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::PutBucketVersioningOutput> for PutBucketVersioningOperationOutputWrapper {
    fn from(o: crate::output::PutBucketVersioningOutput) -> Self {
        Self(o)
    }
}
impl From<PutBucketVersioningOperationInputWrapper> for crate::input::PutBucketVersioningInput {
    fn from(i: PutBucketVersioningOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `PutBucketWebsite`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutBucketWebsite {
    _private: (),
}
impl PutBucketWebsite {
    /// Creates a new `PutBucketWebsite` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct PutBucketWebsiteOperationInputWrapper(pub crate::input::PutBucketWebsiteInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for PutBucketWebsiteOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(PutBucketWebsiteOperationInputWrapper(
            crate::operation_deser::parse_put_bucket_website_request(req).await?,
        ))
    }
}
pub struct PutBucketWebsiteOperationOutputWrapper(pub crate::output::PutBucketWebsiteOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for PutBucketWebsiteOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_put_bucket_website_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::PutBucketWebsiteOutput> for PutBucketWebsiteOperationOutputWrapper {
    fn from(o: crate::output::PutBucketWebsiteOutput) -> Self {
        Self(o)
    }
}
impl From<PutBucketWebsiteOperationInputWrapper> for crate::input::PutBucketWebsiteInput {
    fn from(i: PutBucketWebsiteOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `PutObject`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutObject {
    _private: (),
}
impl PutObject {
    /// Creates a new `PutObject` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct PutObjectOperationInputWrapper(pub crate::input::PutObjectInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for PutObjectOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B: Into<aws_smithy_http_server::ByteStream>,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(PutObjectOperationInputWrapper(
            crate::operation_deser::parse_put_object_request(req).await?,
        ))
    }
}
pub struct PutObjectOperationOutputWrapper(pub crate::output::PutObjectOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for PutObjectOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_put_object_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::PutObjectOutput> for PutObjectOperationOutputWrapper {
    fn from(o: crate::output::PutObjectOutput) -> Self {
        Self(o)
    }
}
impl From<PutObjectOperationInputWrapper> for crate::input::PutObjectInput {
    fn from(i: PutObjectOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `PutObjectAcl`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutObjectAcl {
    _private: (),
}
impl PutObjectAcl {
    /// Creates a new `PutObjectAcl` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct PutObjectAclOperationInputWrapper(pub crate::input::PutObjectAclInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for PutObjectAclOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(PutObjectAclOperationInputWrapper(
            crate::operation_deser::parse_put_object_acl_request(req).await?,
        ))
    }
}
pub enum PutObjectAclOperationOutputWrapper {
    Output(crate::output::PutObjectAclOutput),
    Error(crate::error::PutObjectAclError),
}
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for PutObjectAclOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        let mut response = match self {
            Self::Output(o) => match crate::operation_ser::serialize_put_object_acl_response(o) {
                Ok(response) => response,
                Err(e) => e.into_response(),
            },
            Self::Error(err) => match crate::operation_ser::serialize_put_object_acl_error(&err) {
                Ok(mut response) => {
                    response.extensions_mut().insert(
                        aws_smithy_http_server::ExtensionModeledError::new(err.name()),
                    );
                    response
                }
                Err(e) => e.into_response(),
            },
        };
        response
            .extensions_mut()
            .insert(aws_smithy_http_server::RequestExtensions::new(
                "com.amazonaws.s3",
                "PutObjectAcl",
            ));
        response
    }
}
impl From<Result<crate::output::PutObjectAclOutput, crate::error::PutObjectAclError>>
    for PutObjectAclOperationOutputWrapper
{
    fn from(
        res: Result<crate::output::PutObjectAclOutput, crate::error::PutObjectAclError>,
    ) -> Self {
        match res {
            Ok(v) => Self::Output(v),
            Err(e) => Self::Error(e),
        }
    }
}
impl From<PutObjectAclOperationInputWrapper> for crate::input::PutObjectAclInput {
    fn from(i: PutObjectAclOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `PutObjectLegalHold`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutObjectLegalHold {
    _private: (),
}
impl PutObjectLegalHold {
    /// Creates a new `PutObjectLegalHold` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct PutObjectLegalHoldOperationInputWrapper(pub crate::input::PutObjectLegalHoldInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for PutObjectLegalHoldOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(PutObjectLegalHoldOperationInputWrapper(
            crate::operation_deser::parse_put_object_legal_hold_request(req).await?,
        ))
    }
}
pub struct PutObjectLegalHoldOperationOutputWrapper(pub crate::output::PutObjectLegalHoldOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for PutObjectLegalHoldOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_put_object_legal_hold_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::PutObjectLegalHoldOutput> for PutObjectLegalHoldOperationOutputWrapper {
    fn from(o: crate::output::PutObjectLegalHoldOutput) -> Self {
        Self(o)
    }
}
impl From<PutObjectLegalHoldOperationInputWrapper> for crate::input::PutObjectLegalHoldInput {
    fn from(i: PutObjectLegalHoldOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `PutObjectLockConfiguration`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutObjectLockConfiguration {
    _private: (),
}
impl PutObjectLockConfiguration {
    /// Creates a new `PutObjectLockConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct PutObjectLockConfigurationOperationInputWrapper(
    pub crate::input::PutObjectLockConfigurationInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for PutObjectLockConfigurationOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(PutObjectLockConfigurationOperationInputWrapper(
            crate::operation_deser::parse_put_object_lock_configuration_request(req).await?,
        ))
    }
}
pub struct PutObjectLockConfigurationOperationOutputWrapper(
    pub crate::output::PutObjectLockConfigurationOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for PutObjectLockConfigurationOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_put_object_lock_configuration_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::PutObjectLockConfigurationOutput>
    for PutObjectLockConfigurationOperationOutputWrapper
{
    fn from(o: crate::output::PutObjectLockConfigurationOutput) -> Self {
        Self(o)
    }
}
impl From<PutObjectLockConfigurationOperationInputWrapper>
    for crate::input::PutObjectLockConfigurationInput
{
    fn from(i: PutObjectLockConfigurationOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `PutObjectRetention`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutObjectRetention {
    _private: (),
}
impl PutObjectRetention {
    /// Creates a new `PutObjectRetention` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct PutObjectRetentionOperationInputWrapper(pub crate::input::PutObjectRetentionInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for PutObjectRetentionOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(PutObjectRetentionOperationInputWrapper(
            crate::operation_deser::parse_put_object_retention_request(req).await?,
        ))
    }
}
pub struct PutObjectRetentionOperationOutputWrapper(pub crate::output::PutObjectRetentionOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for PutObjectRetentionOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_put_object_retention_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::PutObjectRetentionOutput> for PutObjectRetentionOperationOutputWrapper {
    fn from(o: crate::output::PutObjectRetentionOutput) -> Self {
        Self(o)
    }
}
impl From<PutObjectRetentionOperationInputWrapper> for crate::input::PutObjectRetentionInput {
    fn from(i: PutObjectRetentionOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `PutObjectTagging`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutObjectTagging {
    _private: (),
}
impl PutObjectTagging {
    /// Creates a new `PutObjectTagging` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct PutObjectTaggingOperationInputWrapper(pub crate::input::PutObjectTaggingInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for PutObjectTaggingOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(PutObjectTaggingOperationInputWrapper(
            crate::operation_deser::parse_put_object_tagging_request(req).await?,
        ))
    }
}
pub struct PutObjectTaggingOperationOutputWrapper(pub crate::output::PutObjectTaggingOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for PutObjectTaggingOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_put_object_tagging_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::PutObjectTaggingOutput> for PutObjectTaggingOperationOutputWrapper {
    fn from(o: crate::output::PutObjectTaggingOutput) -> Self {
        Self(o)
    }
}
impl From<PutObjectTaggingOperationInputWrapper> for crate::input::PutObjectTaggingInput {
    fn from(i: PutObjectTaggingOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `PutPublicAccessBlock`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutPublicAccessBlock {
    _private: (),
}
impl PutPublicAccessBlock {
    /// Creates a new `PutPublicAccessBlock` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct PutPublicAccessBlockOperationInputWrapper(pub crate::input::PutPublicAccessBlockInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for PutPublicAccessBlockOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(PutPublicAccessBlockOperationInputWrapper(
            crate::operation_deser::parse_put_public_access_block_request(req).await?,
        ))
    }
}
pub struct PutPublicAccessBlockOperationOutputWrapper(
    pub crate::output::PutPublicAccessBlockOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for PutPublicAccessBlockOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_put_public_access_block_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::PutPublicAccessBlockOutput>
    for PutPublicAccessBlockOperationOutputWrapper
{
    fn from(o: crate::output::PutPublicAccessBlockOutput) -> Self {
        Self(o)
    }
}
impl From<PutPublicAccessBlockOperationInputWrapper> for crate::input::PutPublicAccessBlockInput {
    fn from(i: PutPublicAccessBlockOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `RestoreObject`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RestoreObject {
    _private: (),
}
impl RestoreObject {
    /// Creates a new `RestoreObject` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct RestoreObjectOperationInputWrapper(pub crate::input::RestoreObjectInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for RestoreObjectOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(RestoreObjectOperationInputWrapper(
            crate::operation_deser::parse_restore_object_request(req).await?,
        ))
    }
}
pub enum RestoreObjectOperationOutputWrapper {
    Output(crate::output::RestoreObjectOutput),
    Error(crate::error::RestoreObjectError),
}
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for RestoreObjectOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        let mut response = match self {
            Self::Output(o) => match crate::operation_ser::serialize_restore_object_response(o) {
                Ok(response) => response,
                Err(e) => e.into_response(),
            },
            Self::Error(err) => match crate::operation_ser::serialize_restore_object_error(&err) {
                Ok(mut response) => {
                    response.extensions_mut().insert(
                        aws_smithy_http_server::ExtensionModeledError::new(err.name()),
                    );
                    response
                }
                Err(e) => e.into_response(),
            },
        };
        response
            .extensions_mut()
            .insert(aws_smithy_http_server::RequestExtensions::new(
                "com.amazonaws.s3",
                "RestoreObject",
            ));
        response
    }
}
impl From<Result<crate::output::RestoreObjectOutput, crate::error::RestoreObjectError>>
    for RestoreObjectOperationOutputWrapper
{
    fn from(
        res: Result<crate::output::RestoreObjectOutput, crate::error::RestoreObjectError>,
    ) -> Self {
        match res {
            Ok(v) => Self::Output(v),
            Err(e) => Self::Error(e),
        }
    }
}
impl From<RestoreObjectOperationInputWrapper> for crate::input::RestoreObjectInput {
    fn from(i: RestoreObjectOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `UploadPart`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UploadPart {
    _private: (),
}
impl UploadPart {
    /// Creates a new `UploadPart` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct UploadPartOperationInputWrapper(pub crate::input::UploadPartInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for UploadPartOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B: Into<aws_smithy_http_server::ByteStream>,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(UploadPartOperationInputWrapper(
            crate::operation_deser::parse_upload_part_request(req).await?,
        ))
    }
}
pub struct UploadPartOperationOutputWrapper(pub crate::output::UploadPartOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for UploadPartOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_upload_part_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::UploadPartOutput> for UploadPartOperationOutputWrapper {
    fn from(o: crate::output::UploadPartOutput) -> Self {
        Self(o)
    }
}
impl From<UploadPartOperationInputWrapper> for crate::input::UploadPartInput {
    fn from(i: UploadPartOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `UploadPartCopy`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UploadPartCopy {
    _private: (),
}
impl UploadPartCopy {
    /// Creates a new `UploadPartCopy` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct UploadPartCopyOperationInputWrapper(pub crate::input::UploadPartCopyInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for UploadPartCopyOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(UploadPartCopyOperationInputWrapper(
            crate::operation_deser::parse_upload_part_copy_request(req).await?,
        ))
    }
}
pub struct UploadPartCopyOperationOutputWrapper(pub crate::output::UploadPartCopyOutput);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for UploadPartCopyOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_upload_part_copy_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::UploadPartCopyOutput> for UploadPartCopyOperationOutputWrapper {
    fn from(o: crate::output::UploadPartCopyOutput) -> Self {
        Self(o)
    }
}
impl From<UploadPartCopyOperationInputWrapper> for crate::input::UploadPartCopyInput {
    fn from(i: UploadPartCopyOperationInputWrapper) -> Self {
        i.0
    }
}

/// Operation shape for `WriteGetObjectResponse`.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct WriteGetObjectResponse {
    _private: (),
}
impl WriteGetObjectResponse {
    /// Creates a new `WriteGetObjectResponse` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
pub struct WriteGetObjectResponseOperationInputWrapper(
    pub crate::input::WriteGetObjectResponseInput,
);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for WriteGetObjectResponseOperationInputWrapper
where
    B: aws_smithy_http_server::HttpBody + Send,
    B: Into<aws_smithy_http_server::ByteStream>,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::rejection::SmithyRejection;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        Ok(WriteGetObjectResponseOperationInputWrapper(
            crate::operation_deser::parse_write_get_object_response_request(req).await?,
        ))
    }
}
pub struct WriteGetObjectResponseOperationOutputWrapper(
    pub crate::output::WriteGetObjectResponseOutput,
);
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for WriteGetObjectResponseOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match crate::operation_ser::serialize_write_get_object_response_response(self.0) {
            Ok(response) => response,
            Err(e) => e.into_response(),
        }
    }
}
impl From<crate::output::WriteGetObjectResponseOutput>
    for WriteGetObjectResponseOperationOutputWrapper
{
    fn from(o: crate::output::WriteGetObjectResponseOutput) -> Self {
        Self(o)
    }
}
impl From<WriteGetObjectResponseOperationInputWrapper>
    for crate::input::WriteGetObjectResponseInput
{
    fn from(i: WriteGetObjectResponseOperationInputWrapper) -> Self {
        i.0
    }
}
