// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_error_no_such_upload(
    input: &crate::error::NoSuchUpload,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let _ = input;
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_output_complete_multipart_upload_output(
    input: &crate::output::CompleteMultipartUploadOutput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.bucket {
        let mut inner_writer = scope.start_el("Bucket").finish();
        inner_writer.data(var_1.as_ref());
    }
    if let Some(var_2) = &input.e_tag {
        let mut inner_writer = scope.start_el("ETag").finish();
        inner_writer.data(var_2.as_ref());
    }
    if let Some(var_3) = &input.key {
        let mut inner_writer = scope.start_el("Key").finish();
        inner_writer.data(var_3.as_ref());
    }
    if let Some(var_4) = &input.location {
        let mut inner_writer = scope.start_el("Location").finish();
        inner_writer.data(var_4.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_error_object_not_in_active_tier_error(
    input: &crate::error::ObjectNotInActiveTierError,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let _ = input;
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_error_bucket_already_owned_by_you(
    input: &crate::error::BucketAlreadyOwnedByYou,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let _ = input;
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_error_bucket_already_exists(
    input: &crate::error::BucketAlreadyExists,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let _ = input;
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_output_create_multipart_upload_output(
    input: &crate::output::CreateMultipartUploadOutput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_5) = &input.bucket {
        let mut inner_writer = scope.start_el("Bucket").finish();
        inner_writer.data(var_5.as_ref());
    }
    if let Some(var_6) = &input.key {
        let mut inner_writer = scope.start_el("Key").finish();
        inner_writer.data(var_6.as_ref());
    }
    if let Some(var_7) = &input.upload_id {
        let mut inner_writer = scope.start_el("UploadId").finish();
        inner_writer.data(var_7.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_output_delete_objects_output(
    input: &crate::output::DeleteObjectsOutput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_8) = &input.deleted {
        for list_item_9 in var_8 {
            {
                let inner_writer = scope.start_el("Deleted");
                crate::xml_ser::serialize_structure_crate_model_deleted_object(
                    list_item_9,
                    inner_writer,
                )?
            }
        }
    }
    if let Some(var_10) = &input.errors {
        for list_item_11 in var_10 {
            {
                let inner_writer = scope.start_el("Error");
                crate::xml_ser::serialize_structure_crate_model_error(list_item_11, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_output_get_bucket_accelerate_configuration_output(
    input: &crate::output::GetBucketAccelerateConfigurationOutput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_12) = &input.status {
        let mut inner_writer = scope.start_el("Status").finish();
        inner_writer.data(var_12.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_output_get_bucket_acl_output(
    input: &crate::output::GetBucketAclOutput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_13) = &input.grants {
        let mut inner_writer = scope.start_el("AccessControlList").finish();
        for list_item_14 in var_13 {
            {
                let inner_writer = inner_writer.start_el("Grant");
                crate::xml_ser::serialize_structure_crate_model_grant(list_item_14, inner_writer)?
            }
        }
    }
    if let Some(var_15) = &input.owner {
        let inner_writer = scope.start_el("Owner");
        crate::xml_ser::serialize_structure_crate_model_owner(var_15, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_output_get_bucket_cors_output(
    input: &crate::output::GetBucketCorsOutput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_16) = &input.cors_rules {
        for list_item_17 in var_16 {
            {
                let inner_writer = scope.start_el("CORSRule");
                crate::xml_ser::serialize_structure_crate_model_cors_rule(
                    list_item_17,
                    inner_writer,
                )?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_output_get_bucket_lifecycle_configuration_output(
    input: &crate::output::GetBucketLifecycleConfigurationOutput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_18) = &input.rules {
        for list_item_19 in var_18 {
            {
                let inner_writer = scope.start_el("Rule");
                crate::xml_ser::serialize_structure_crate_model_lifecycle_rule(
                    list_item_19,
                    inner_writer,
                )?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_output_get_bucket_location_output(
    input: &crate::output::GetBucketLocationOutput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_20) = &input.location_constraint {
        let mut inner_writer = scope.start_el("LocationConstraint").finish();
        inner_writer.data(var_20.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_output_get_bucket_logging_output(
    input: &crate::output::GetBucketLoggingOutput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_21) = &input.logging_enabled {
        let inner_writer = scope.start_el("LoggingEnabled");
        crate::xml_ser::serialize_structure_crate_model_logging_enabled(var_21, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_output_get_bucket_notification_configuration_output(
    input: &crate::output::GetBucketNotificationConfigurationOutput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_22) = &input.event_bridge_configuration {
        let inner_writer = scope.start_el("EventBridgeConfiguration");
        crate::xml_ser::serialize_structure_crate_model_event_bridge_configuration(
            var_22,
            inner_writer,
        )?
    }
    if let Some(var_23) = &input.lambda_function_configurations {
        for list_item_24 in var_23 {
            {
                let inner_writer = scope.start_el("CloudFunctionConfiguration");
                crate::xml_ser::serialize_structure_crate_model_lambda_function_configuration(
                    list_item_24,
                    inner_writer,
                )?
            }
        }
    }
    if let Some(var_25) = &input.queue_configurations {
        for list_item_26 in var_25 {
            {
                let inner_writer = scope.start_el("QueueConfiguration");
                crate::xml_ser::serialize_structure_crate_model_queue_configuration(
                    list_item_26,
                    inner_writer,
                )?
            }
        }
    }
    if let Some(var_27) = &input.topic_configurations {
        for list_item_28 in var_27 {
            {
                let inner_writer = scope.start_el("TopicConfiguration");
                crate::xml_ser::serialize_structure_crate_model_topic_configuration(
                    list_item_28,
                    inner_writer,
                )?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_output_get_bucket_request_payment_output(
    input: &crate::output::GetBucketRequestPaymentOutput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_29) = &input.payer {
        let mut inner_writer = scope.start_el("Payer").finish();
        inner_writer.data(var_29.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_output_get_bucket_tagging_output(
    input: &crate::output::GetBucketTaggingOutput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_30) = &input.tag_set {
        let mut inner_writer = scope.start_el("TagSet").finish();
        for list_item_31 in var_30 {
            {
                let inner_writer = inner_writer.start_el("Tag");
                crate::xml_ser::serialize_structure_crate_model_tag(list_item_31, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_output_get_bucket_versioning_output(
    input: &crate::output::GetBucketVersioningOutput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_32) = &input.mfa_delete {
        let mut inner_writer = scope.start_el("MfaDelete").finish();
        inner_writer.data(var_32.as_str());
    }
    if let Some(var_33) = &input.status {
        let mut inner_writer = scope.start_el("Status").finish();
        inner_writer.data(var_33.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_output_get_bucket_website_output(
    input: &crate::output::GetBucketWebsiteOutput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_34) = &input.error_document {
        let inner_writer = scope.start_el("ErrorDocument");
        crate::xml_ser::serialize_structure_crate_model_error_document(var_34, inner_writer)?
    }
    if let Some(var_35) = &input.index_document {
        let inner_writer = scope.start_el("IndexDocument");
        crate::xml_ser::serialize_structure_crate_model_index_document(var_35, inner_writer)?
    }
    if let Some(var_36) = &input.redirect_all_requests_to {
        let inner_writer = scope.start_el("RedirectAllRequestsTo");
        crate::xml_ser::serialize_structure_crate_model_redirect_all_requests_to(
            var_36,
            inner_writer,
        )?
    }
    if let Some(var_37) = &input.routing_rules {
        let mut inner_writer = scope.start_el("RoutingRules").finish();
        for list_item_38 in var_37 {
            {
                let inner_writer = inner_writer.start_el("RoutingRule");
                crate::xml_ser::serialize_structure_crate_model_routing_rule(
                    list_item_38,
                    inner_writer,
                )?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_error_no_such_key(
    input: &crate::error::NoSuchKey,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let _ = input;
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_error_invalid_object_state(
    input: &crate::error::InvalidObjectState,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_39) = &input.access_tier {
        let mut inner_writer = scope.start_el("AccessTier").finish();
        inner_writer.data(var_39.as_str());
    }
    if let Some(var_40) = &input.storage_class {
        let mut inner_writer = scope.start_el("StorageClass").finish();
        inner_writer.data(var_40.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_output_get_object_acl_output(
    input: &crate::output::GetObjectAclOutput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_41) = &input.grants {
        let mut inner_writer = scope.start_el("AccessControlList").finish();
        for list_item_42 in var_41 {
            {
                let inner_writer = inner_writer.start_el("Grant");
                crate::xml_ser::serialize_structure_crate_model_grant(list_item_42, inner_writer)?
            }
        }
    }
    if let Some(var_43) = &input.owner {
        let inner_writer = scope.start_el("Owner");
        crate::xml_ser::serialize_structure_crate_model_owner(var_43, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_output_get_object_tagging_output(
    input: &crate::output::GetObjectTaggingOutput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_44) = &input.tag_set {
        let mut inner_writer = scope.start_el("TagSet").finish();
        for list_item_45 in var_44 {
            {
                let inner_writer = inner_writer.start_el("Tag");
                crate::xml_ser::serialize_structure_crate_model_tag(list_item_45, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_error_not_found(
    input: &crate::error::NotFound,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let _ = input;
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_output_list_bucket_analytics_configurations_output(
    input: &crate::output::ListBucketAnalyticsConfigurationsOutput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_46) = &input.analytics_configuration_list {
        for list_item_47 in var_46 {
            {
                let inner_writer = scope.start_el("AnalyticsConfiguration");
                crate::xml_ser::serialize_structure_crate_model_analytics_configuration(
                    list_item_47,
                    inner_writer,
                )?
            }
        }
    }
    if let Some(var_48) = &input.continuation_token {
        let mut inner_writer = scope.start_el("ContinuationToken").finish();
        inner_writer.data(var_48.as_ref());
    }
    if input.is_truncated {
        let mut inner_writer = scope.start_el("IsTruncated").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.is_truncated).encode());
    }
    if let Some(var_49) = &input.next_continuation_token {
        let mut inner_writer = scope.start_el("NextContinuationToken").finish();
        inner_writer.data(var_49.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_output_list_bucket_intelligent_tiering_configurations_output(
    input: &crate::output::ListBucketIntelligentTieringConfigurationsOutput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_50) = &input.continuation_token {
        let mut inner_writer = scope.start_el("ContinuationToken").finish();
        inner_writer.data(var_50.as_ref());
    }
    if let Some(var_51) = &input.intelligent_tiering_configuration_list {
        for list_item_52 in var_51 {
            {
                let inner_writer = scope.start_el("IntelligentTieringConfiguration");
                crate::xml_ser::serialize_structure_crate_model_intelligent_tiering_configuration(
                    list_item_52,
                    inner_writer,
                )?
            }
        }
    }
    if input.is_truncated {
        let mut inner_writer = scope.start_el("IsTruncated").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.is_truncated).encode());
    }
    if let Some(var_53) = &input.next_continuation_token {
        let mut inner_writer = scope.start_el("NextContinuationToken").finish();
        inner_writer.data(var_53.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_output_list_bucket_inventory_configurations_output(
    input: &crate::output::ListBucketInventoryConfigurationsOutput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_54) = &input.continuation_token {
        let mut inner_writer = scope.start_el("ContinuationToken").finish();
        inner_writer.data(var_54.as_ref());
    }
    if let Some(var_55) = &input.inventory_configuration_list {
        for list_item_56 in var_55 {
            {
                let inner_writer = scope.start_el("InventoryConfiguration");
                crate::xml_ser::serialize_structure_crate_model_inventory_configuration(
                    list_item_56,
                    inner_writer,
                )?
            }
        }
    }
    if input.is_truncated {
        let mut inner_writer = scope.start_el("IsTruncated").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.is_truncated).encode());
    }
    if let Some(var_57) = &input.next_continuation_token {
        let mut inner_writer = scope.start_el("NextContinuationToken").finish();
        inner_writer.data(var_57.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_output_list_bucket_metrics_configurations_output(
    input: &crate::output::ListBucketMetricsConfigurationsOutput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_58) = &input.continuation_token {
        let mut inner_writer = scope.start_el("ContinuationToken").finish();
        inner_writer.data(var_58.as_ref());
    }
    if input.is_truncated {
        let mut inner_writer = scope.start_el("IsTruncated").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.is_truncated).encode());
    }
    if let Some(var_59) = &input.metrics_configuration_list {
        for list_item_60 in var_59 {
            {
                let inner_writer = scope.start_el("MetricsConfiguration");
                crate::xml_ser::serialize_structure_crate_model_metrics_configuration(
                    list_item_60,
                    inner_writer,
                )?
            }
        }
    }
    if let Some(var_61) = &input.next_continuation_token {
        let mut inner_writer = scope.start_el("NextContinuationToken").finish();
        inner_writer.data(var_61.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_output_list_buckets_output(
    input: &crate::output::ListBucketsOutput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_62) = &input.buckets {
        let mut inner_writer = scope.start_el("Buckets").finish();
        for list_item_63 in var_62 {
            {
                let inner_writer = inner_writer.start_el("Bucket");
                crate::xml_ser::serialize_structure_crate_model_bucket(list_item_63, inner_writer)?
            }
        }
    }
    if let Some(var_64) = &input.owner {
        let inner_writer = scope.start_el("Owner");
        crate::xml_ser::serialize_structure_crate_model_owner(var_64, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_output_list_multipart_uploads_output(
    input: &crate::output::ListMultipartUploadsOutput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_65) = &input.bucket {
        let mut inner_writer = scope.start_el("Bucket").finish();
        inner_writer.data(var_65.as_ref());
    }
    if let Some(var_66) = &input.common_prefixes {
        for list_item_67 in var_66 {
            {
                let inner_writer = scope.start_el("CommonPrefixes");
                crate::xml_ser::serialize_structure_crate_model_common_prefix(
                    list_item_67,
                    inner_writer,
                )?
            }
        }
    }
    if let Some(var_68) = &input.delimiter {
        let mut inner_writer = scope.start_el("Delimiter").finish();
        inner_writer.data(var_68.as_ref());
    }
    if let Some(var_69) = &input.encoding_type {
        let mut inner_writer = scope.start_el("EncodingType").finish();
        inner_writer.data(var_69.as_str());
    }
    if input.is_truncated {
        let mut inner_writer = scope.start_el("IsTruncated").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.is_truncated).encode());
    }
    if let Some(var_70) = &input.key_marker {
        let mut inner_writer = scope.start_el("KeyMarker").finish();
        inner_writer.data(var_70.as_ref());
    }
    if input.max_uploads != 0 {
        let mut inner_writer = scope.start_el("MaxUploads").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.max_uploads).encode());
    }
    if let Some(var_71) = &input.next_key_marker {
        let mut inner_writer = scope.start_el("NextKeyMarker").finish();
        inner_writer.data(var_71.as_ref());
    }
    if let Some(var_72) = &input.next_upload_id_marker {
        let mut inner_writer = scope.start_el("NextUploadIdMarker").finish();
        inner_writer.data(var_72.as_ref());
    }
    if let Some(var_73) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_73.as_ref());
    }
    if let Some(var_74) = &input.upload_id_marker {
        let mut inner_writer = scope.start_el("UploadIdMarker").finish();
        inner_writer.data(var_74.as_ref());
    }
    if let Some(var_75) = &input.uploads {
        for list_item_76 in var_75 {
            {
                let inner_writer = scope.start_el("Upload");
                crate::xml_ser::serialize_structure_crate_model_multipart_upload(
                    list_item_76,
                    inner_writer,
                )?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_output_list_objects_output(
    input: &crate::output::ListObjectsOutput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_77) = &input.common_prefixes {
        for list_item_78 in var_77 {
            {
                let inner_writer = scope.start_el("CommonPrefixes");
                crate::xml_ser::serialize_structure_crate_model_common_prefix(
                    list_item_78,
                    inner_writer,
                )?
            }
        }
    }
    if let Some(var_79) = &input.contents {
        for list_item_80 in var_79 {
            {
                let inner_writer = scope.start_el("Contents");
                crate::xml_ser::serialize_structure_crate_model_object(list_item_80, inner_writer)?
            }
        }
    }
    if let Some(var_81) = &input.delimiter {
        let mut inner_writer = scope.start_el("Delimiter").finish();
        inner_writer.data(var_81.as_ref());
    }
    if let Some(var_82) = &input.encoding_type {
        let mut inner_writer = scope.start_el("EncodingType").finish();
        inner_writer.data(var_82.as_str());
    }
    if input.is_truncated {
        let mut inner_writer = scope.start_el("IsTruncated").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.is_truncated).encode());
    }
    if let Some(var_83) = &input.marker {
        let mut inner_writer = scope.start_el("Marker").finish();
        inner_writer.data(var_83.as_ref());
    }
    if input.max_keys != 0 {
        let mut inner_writer = scope.start_el("MaxKeys").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.max_keys).encode());
    }
    if let Some(var_84) = &input.name {
        let mut inner_writer = scope.start_el("Name").finish();
        inner_writer.data(var_84.as_ref());
    }
    if let Some(var_85) = &input.next_marker {
        let mut inner_writer = scope.start_el("NextMarker").finish();
        inner_writer.data(var_85.as_ref());
    }
    if let Some(var_86) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_86.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_error_no_such_bucket(
    input: &crate::error::NoSuchBucket,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let _ = input;
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_output_list_objects_v2_output(
    input: &crate::output::ListObjectsV2Output,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_87) = &input.common_prefixes {
        for list_item_88 in var_87 {
            {
                let inner_writer = scope.start_el("CommonPrefixes");
                crate::xml_ser::serialize_structure_crate_model_common_prefix(
                    list_item_88,
                    inner_writer,
                )?
            }
        }
    }
    if let Some(var_89) = &input.contents {
        for list_item_90 in var_89 {
            {
                let inner_writer = scope.start_el("Contents");
                crate::xml_ser::serialize_structure_crate_model_object(list_item_90, inner_writer)?
            }
        }
    }
    if let Some(var_91) = &input.continuation_token {
        let mut inner_writer = scope.start_el("ContinuationToken").finish();
        inner_writer.data(var_91.as_ref());
    }
    if let Some(var_92) = &input.delimiter {
        let mut inner_writer = scope.start_el("Delimiter").finish();
        inner_writer.data(var_92.as_ref());
    }
    if let Some(var_93) = &input.encoding_type {
        let mut inner_writer = scope.start_el("EncodingType").finish();
        inner_writer.data(var_93.as_str());
    }
    if input.is_truncated {
        let mut inner_writer = scope.start_el("IsTruncated").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.is_truncated).encode());
    }
    if input.key_count != 0 {
        let mut inner_writer = scope.start_el("KeyCount").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.key_count).encode());
    }
    if input.max_keys != 0 {
        let mut inner_writer = scope.start_el("MaxKeys").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.max_keys).encode());
    }
    if let Some(var_94) = &input.name {
        let mut inner_writer = scope.start_el("Name").finish();
        inner_writer.data(var_94.as_ref());
    }
    if let Some(var_95) = &input.next_continuation_token {
        let mut inner_writer = scope.start_el("NextContinuationToken").finish();
        inner_writer.data(var_95.as_ref());
    }
    if let Some(var_96) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_96.as_ref());
    }
    if let Some(var_97) = &input.start_after {
        let mut inner_writer = scope.start_el("StartAfter").finish();
        inner_writer.data(var_97.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_output_list_object_versions_output(
    input: &crate::output::ListObjectVersionsOutput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_98) = &input.common_prefixes {
        for list_item_99 in var_98 {
            {
                let inner_writer = scope.start_el("CommonPrefixes");
                crate::xml_ser::serialize_structure_crate_model_common_prefix(
                    list_item_99,
                    inner_writer,
                )?
            }
        }
    }
    if let Some(var_100) = &input.delete_markers {
        for list_item_101 in var_100 {
            {
                let inner_writer = scope.start_el("DeleteMarker");
                crate::xml_ser::serialize_structure_crate_model_delete_marker_entry(
                    list_item_101,
                    inner_writer,
                )?
            }
        }
    }
    if let Some(var_102) = &input.delimiter {
        let mut inner_writer = scope.start_el("Delimiter").finish();
        inner_writer.data(var_102.as_ref());
    }
    if let Some(var_103) = &input.encoding_type {
        let mut inner_writer = scope.start_el("EncodingType").finish();
        inner_writer.data(var_103.as_str());
    }
    if input.is_truncated {
        let mut inner_writer = scope.start_el("IsTruncated").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.is_truncated).encode());
    }
    if let Some(var_104) = &input.key_marker {
        let mut inner_writer = scope.start_el("KeyMarker").finish();
        inner_writer.data(var_104.as_ref());
    }
    if input.max_keys != 0 {
        let mut inner_writer = scope.start_el("MaxKeys").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.max_keys).encode());
    }
    if let Some(var_105) = &input.name {
        let mut inner_writer = scope.start_el("Name").finish();
        inner_writer.data(var_105.as_ref());
    }
    if let Some(var_106) = &input.next_key_marker {
        let mut inner_writer = scope.start_el("NextKeyMarker").finish();
        inner_writer.data(var_106.as_ref());
    }
    if let Some(var_107) = &input.next_version_id_marker {
        let mut inner_writer = scope.start_el("NextVersionIdMarker").finish();
        inner_writer.data(var_107.as_ref());
    }
    if let Some(var_108) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_108.as_ref());
    }
    if let Some(var_109) = &input.version_id_marker {
        let mut inner_writer = scope.start_el("VersionIdMarker").finish();
        inner_writer.data(var_109.as_ref());
    }
    if let Some(var_110) = &input.versions {
        for list_item_111 in var_110 {
            {
                let inner_writer = scope.start_el("Version");
                crate::xml_ser::serialize_structure_crate_model_object_version(
                    list_item_111,
                    inner_writer,
                )?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_output_list_parts_output(
    input: &crate::output::ListPartsOutput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_112) = &input.bucket {
        let mut inner_writer = scope.start_el("Bucket").finish();
        inner_writer.data(var_112.as_ref());
    }
    if let Some(var_113) = &input.initiator {
        let inner_writer = scope.start_el("Initiator");
        crate::xml_ser::serialize_structure_crate_model_initiator(var_113, inner_writer)?
    }
    if input.is_truncated {
        let mut inner_writer = scope.start_el("IsTruncated").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.is_truncated).encode());
    }
    if let Some(var_114) = &input.key {
        let mut inner_writer = scope.start_el("Key").finish();
        inner_writer.data(var_114.as_ref());
    }
    if input.max_parts != 0 {
        let mut inner_writer = scope.start_el("MaxParts").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.max_parts).encode());
    }
    if let Some(var_115) = &input.next_part_number_marker {
        let mut inner_writer = scope.start_el("NextPartNumberMarker").finish();
        inner_writer.data(var_115.as_ref());
    }
    if let Some(var_116) = &input.owner {
        let inner_writer = scope.start_el("Owner");
        crate::xml_ser::serialize_structure_crate_model_owner(var_116, inner_writer)?
    }
    if let Some(var_117) = &input.part_number_marker {
        let mut inner_writer = scope.start_el("PartNumberMarker").finish();
        inner_writer.data(var_117.as_ref());
    }
    if let Some(var_118) = &input.parts {
        for list_item_119 in var_118 {
            {
                let inner_writer = scope.start_el("Part");
                crate::xml_ser::serialize_structure_crate_model_part(list_item_119, inner_writer)?
            }
        }
    }
    if let Some(var_120) = &input.storage_class {
        let mut inner_writer = scope.start_el("StorageClass").finish();
        inner_writer.data(var_120.as_str());
    }
    if let Some(var_121) = &input.upload_id {
        let mut inner_writer = scope.start_el("UploadId").finish();
        inner_writer.data(var_121.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_error_object_already_in_active_tier_error(
    input: &crate::error::ObjectAlreadyInActiveTierError,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let _ = input;
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_deleted_object(
    input: &crate::model::DeletedObject,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_122) = &input.key {
        let mut inner_writer = scope.start_el("Key").finish();
        inner_writer.data(var_122.as_ref());
    }
    if let Some(var_123) = &input.version_id {
        let mut inner_writer = scope.start_el("VersionId").finish();
        inner_writer.data(var_123.as_ref());
    }
    if input.delete_marker {
        let mut inner_writer = scope.start_el("DeleteMarker").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.delete_marker).encode());
    }
    if let Some(var_124) = &input.delete_marker_version_id {
        let mut inner_writer = scope.start_el("DeleteMarkerVersionId").finish();
        inner_writer.data(var_124.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_error(
    input: &crate::model::Error,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_125) = &input.key {
        let mut inner_writer = scope.start_el("Key").finish();
        inner_writer.data(var_125.as_ref());
    }
    if let Some(var_126) = &input.version_id {
        let mut inner_writer = scope.start_el("VersionId").finish();
        inner_writer.data(var_126.as_ref());
    }
    if let Some(var_127) = &input.code {
        let mut inner_writer = scope.start_el("Code").finish();
        inner_writer.data(var_127.as_ref());
    }
    if let Some(var_128) = &input.message {
        let mut inner_writer = scope.start_el("Message").finish();
        inner_writer.data(var_128.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_grant(
    input: &crate::model::Grant,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_129) = &input.grantee {
        let inner_writer = scope
            .start_el("Grantee")
            .write_ns("http://www.w3.org/2001/XMLSchema-instance", Some("xsi"));
        crate::xml_ser::serialize_structure_crate_model_grantee(var_129, inner_writer)?
    }
    if let Some(var_130) = &input.permission {
        let mut inner_writer = scope.start_el("Permission").finish();
        inner_writer.data(var_130.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_owner(
    input: &crate::model::Owner,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_131) = &input.display_name {
        let mut inner_writer = scope.start_el("DisplayName").finish();
        inner_writer.data(var_131.as_ref());
    }
    if let Some(var_132) = &input.id {
        let mut inner_writer = scope.start_el("ID").finish();
        inner_writer.data(var_132.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_cors_rule(
    input: &crate::model::CorsRule,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_133) = &input.id {
        let mut inner_writer = scope.start_el("ID").finish();
        inner_writer.data(var_133.as_ref());
    }
    if let Some(var_134) = &input.allowed_headers {
        for list_item_135 in var_134 {
            {
                let mut inner_writer = scope.start_el("AllowedHeader").finish();
                inner_writer.data(list_item_135.as_ref());
            }
        }
    }
    if let Some(var_136) = &input.allowed_methods {
        for list_item_137 in var_136 {
            {
                let mut inner_writer = scope.start_el("AllowedMethod").finish();
                inner_writer.data(list_item_137.as_ref());
            }
        }
    }
    if let Some(var_138) = &input.allowed_origins {
        for list_item_139 in var_138 {
            {
                let mut inner_writer = scope.start_el("AllowedOrigin").finish();
                inner_writer.data(list_item_139.as_ref());
            }
        }
    }
    if let Some(var_140) = &input.expose_headers {
        for list_item_141 in var_140 {
            {
                let mut inner_writer = scope.start_el("ExposeHeader").finish();
                inner_writer.data(list_item_141.as_ref());
            }
        }
    }
    if input.max_age_seconds != 0 {
        let mut inner_writer = scope.start_el("MaxAgeSeconds").finish();
        inner_writer
            .data(aws_smithy_types::primitive::Encoder::from(input.max_age_seconds).encode());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_lifecycle_rule(
    input: &crate::model::LifecycleRule,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_142) = &input.expiration {
        let inner_writer = scope.start_el("Expiration");
        crate::xml_ser::serialize_structure_crate_model_lifecycle_expiration(var_142, inner_writer)?
    }
    if let Some(var_143) = &input.id {
        let mut inner_writer = scope.start_el("ID").finish();
        inner_writer.data(var_143.as_ref());
    }
    if let Some(var_144) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_144.as_ref());
    }
    if let Some(var_145) = &input.filter {
        let inner_writer = scope.start_el("Filter");
        crate::xml_ser::serialize_union_crate_model_lifecycle_rule_filter(var_145, inner_writer)?
    }
    if let Some(var_146) = &input.status {
        let mut inner_writer = scope.start_el("Status").finish();
        inner_writer.data(var_146.as_str());
    }
    if let Some(var_147) = &input.transitions {
        for list_item_148 in var_147 {
            {
                let inner_writer = scope.start_el("Transition");
                crate::xml_ser::serialize_structure_crate_model_transition(
                    list_item_148,
                    inner_writer,
                )?
            }
        }
    }
    if let Some(var_149) = &input.noncurrent_version_transitions {
        for list_item_150 in var_149 {
            {
                let inner_writer = scope.start_el("NoncurrentVersionTransition");
                crate::xml_ser::serialize_structure_crate_model_noncurrent_version_transition(
                    list_item_150,
                    inner_writer,
                )?
            }
        }
    }
    if let Some(var_151) = &input.noncurrent_version_expiration {
        let inner_writer = scope.start_el("NoncurrentVersionExpiration");
        crate::xml_ser::serialize_structure_crate_model_noncurrent_version_expiration(
            var_151,
            inner_writer,
        )?
    }
    if let Some(var_152) = &input.abort_incomplete_multipart_upload {
        let inner_writer = scope.start_el("AbortIncompleteMultipartUpload");
        crate::xml_ser::serialize_structure_crate_model_abort_incomplete_multipart_upload(
            var_152,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_logging_enabled(
    input: &crate::model::LoggingEnabled,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_153) = &input.target_bucket {
        let mut inner_writer = scope.start_el("TargetBucket").finish();
        inner_writer.data(var_153.as_ref());
    }
    if let Some(var_154) = &input.target_grants {
        let mut inner_writer = scope.start_el("TargetGrants").finish();
        for list_item_155 in var_154 {
            {
                let inner_writer = inner_writer.start_el("Grant");
                crate::xml_ser::serialize_structure_crate_model_target_grant(
                    list_item_155,
                    inner_writer,
                )?
            }
        }
    }
    if let Some(var_156) = &input.target_prefix {
        let mut inner_writer = scope.start_el("TargetPrefix").finish();
        inner_writer.data(var_156.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_event_bridge_configuration(
    input: &crate::model::EventBridgeConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let _ = input;
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_lambda_function_configuration(
    input: &crate::model::LambdaFunctionConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_157) = &input.id {
        let mut inner_writer = scope.start_el("Id").finish();
        inner_writer.data(var_157.as_ref());
    }
    if let Some(var_158) = &input.lambda_function_arn {
        let mut inner_writer = scope.start_el("CloudFunction").finish();
        inner_writer.data(var_158.as_ref());
    }
    if let Some(var_159) = &input.events {
        for list_item_160 in var_159 {
            {
                let mut inner_writer = scope.start_el("Event").finish();
                inner_writer.data(list_item_160.as_str());
            }
        }
    }
    if let Some(var_161) = &input.filter {
        let inner_writer = scope.start_el("Filter");
        crate::xml_ser::serialize_structure_crate_model_notification_configuration_filter(
            var_161,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_queue_configuration(
    input: &crate::model::QueueConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_162) = &input.id {
        let mut inner_writer = scope.start_el("Id").finish();
        inner_writer.data(var_162.as_ref());
    }
    if let Some(var_163) = &input.queue_arn {
        let mut inner_writer = scope.start_el("Queue").finish();
        inner_writer.data(var_163.as_ref());
    }
    if let Some(var_164) = &input.events {
        for list_item_165 in var_164 {
            {
                let mut inner_writer = scope.start_el("Event").finish();
                inner_writer.data(list_item_165.as_str());
            }
        }
    }
    if let Some(var_166) = &input.filter {
        let inner_writer = scope.start_el("Filter");
        crate::xml_ser::serialize_structure_crate_model_notification_configuration_filter(
            var_166,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_topic_configuration(
    input: &crate::model::TopicConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_167) = &input.id {
        let mut inner_writer = scope.start_el("Id").finish();
        inner_writer.data(var_167.as_ref());
    }
    if let Some(var_168) = &input.topic_arn {
        let mut inner_writer = scope.start_el("Topic").finish();
        inner_writer.data(var_168.as_ref());
    }
    if let Some(var_169) = &input.events {
        for list_item_170 in var_169 {
            {
                let mut inner_writer = scope.start_el("Event").finish();
                inner_writer.data(list_item_170.as_str());
            }
        }
    }
    if let Some(var_171) = &input.filter {
        let inner_writer = scope.start_el("Filter");
        crate::xml_ser::serialize_structure_crate_model_notification_configuration_filter(
            var_171,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    input: &crate::model::Tag,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_172) = &input.key {
        let mut inner_writer = scope.start_el("Key").finish();
        inner_writer.data(var_172.as_ref());
    }
    if let Some(var_173) = &input.value {
        let mut inner_writer = scope.start_el("Value").finish();
        inner_writer.data(var_173.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_error_document(
    input: &crate::model::ErrorDocument,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_174) = &input.key {
        let mut inner_writer = scope.start_el("Key").finish();
        inner_writer.data(var_174.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_index_document(
    input: &crate::model::IndexDocument,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_175) = &input.suffix {
        let mut inner_writer = scope.start_el("Suffix").finish();
        inner_writer.data(var_175.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_redirect_all_requests_to(
    input: &crate::model::RedirectAllRequestsTo,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_176) = &input.host_name {
        let mut inner_writer = scope.start_el("HostName").finish();
        inner_writer.data(var_176.as_ref());
    }
    if let Some(var_177) = &input.protocol {
        let mut inner_writer = scope.start_el("Protocol").finish();
        inner_writer.data(var_177.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_routing_rule(
    input: &crate::model::RoutingRule,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_178) = &input.condition {
        let inner_writer = scope.start_el("Condition");
        crate::xml_ser::serialize_structure_crate_model_condition(var_178, inner_writer)?
    }
    if let Some(var_179) = &input.redirect {
        let inner_writer = scope.start_el("Redirect");
        crate::xml_ser::serialize_structure_crate_model_redirect(var_179, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_analytics_configuration(
    input: &crate::model::AnalyticsConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_180) = &input.id {
        let mut inner_writer = scope.start_el("Id").finish();
        inner_writer.data(var_180.as_ref());
    }
    if let Some(var_181) = &input.filter {
        let inner_writer = scope.start_el("Filter");
        crate::xml_ser::serialize_union_crate_model_analytics_filter(var_181, inner_writer)?
    }
    if let Some(var_182) = &input.storage_class_analysis {
        let inner_writer = scope.start_el("StorageClassAnalysis");
        crate::xml_ser::serialize_structure_crate_model_storage_class_analysis(
            var_182,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_intelligent_tiering_configuration(
    input: &crate::model::IntelligentTieringConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_183) = &input.id {
        let mut inner_writer = scope.start_el("Id").finish();
        inner_writer.data(var_183.as_ref());
    }
    if let Some(var_184) = &input.filter {
        let inner_writer = scope.start_el("Filter");
        crate::xml_ser::serialize_structure_crate_model_intelligent_tiering_filter(
            var_184,
            inner_writer,
        )?
    }
    if let Some(var_185) = &input.status {
        let mut inner_writer = scope.start_el("Status").finish();
        inner_writer.data(var_185.as_str());
    }
    if let Some(var_186) = &input.tierings {
        for list_item_187 in var_186 {
            {
                let inner_writer = scope.start_el("Tiering");
                crate::xml_ser::serialize_structure_crate_model_tiering(
                    list_item_187,
                    inner_writer,
                )?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_inventory_configuration(
    input: &crate::model::InventoryConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_188) = &input.destination {
        let inner_writer = scope.start_el("Destination");
        crate::xml_ser::serialize_structure_crate_model_inventory_destination(
            var_188,
            inner_writer,
        )?
    }
    {
        let mut inner_writer = scope.start_el("IsEnabled").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.is_enabled).encode());
    }
    if let Some(var_189) = &input.filter {
        let inner_writer = scope.start_el("Filter");
        crate::xml_ser::serialize_structure_crate_model_inventory_filter(var_189, inner_writer)?
    }
    if let Some(var_190) = &input.id {
        let mut inner_writer = scope.start_el("Id").finish();
        inner_writer.data(var_190.as_ref());
    }
    if let Some(var_191) = &input.included_object_versions {
        let mut inner_writer = scope.start_el("IncludedObjectVersions").finish();
        inner_writer.data(var_191.as_str());
    }
    if let Some(var_192) = &input.optional_fields {
        let mut inner_writer = scope.start_el("OptionalFields").finish();
        for list_item_193 in var_192 {
            {
                let mut inner_writer = inner_writer.start_el("Field").finish();
                inner_writer.data(list_item_193.as_str());
            }
        }
    }
    if let Some(var_194) = &input.schedule {
        let inner_writer = scope.start_el("Schedule");
        crate::xml_ser::serialize_structure_crate_model_inventory_schedule(var_194, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_metrics_configuration(
    input: &crate::model::MetricsConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_195) = &input.id {
        let mut inner_writer = scope.start_el("Id").finish();
        inner_writer.data(var_195.as_ref());
    }
    if let Some(var_196) = &input.filter {
        let inner_writer = scope.start_el("Filter");
        crate::xml_ser::serialize_union_crate_model_metrics_filter(var_196, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_bucket(
    input: &crate::model::Bucket,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_197) = &input.name {
        let mut inner_writer = scope.start_el("Name").finish();
        inner_writer.data(var_197.as_ref());
    }
    if let Some(var_198) = &input.creation_date {
        let mut inner_writer = scope.start_el("CreationDate").finish();
        inner_writer.data(
            var_198
                .fmt(aws_smithy_types::date_time::Format::DateTime)?
                .as_ref(),
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_common_prefix(
    input: &crate::model::CommonPrefix,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_199) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_199.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_multipart_upload(
    input: &crate::model::MultipartUpload,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_200) = &input.upload_id {
        let mut inner_writer = scope.start_el("UploadId").finish();
        inner_writer.data(var_200.as_ref());
    }
    if let Some(var_201) = &input.key {
        let mut inner_writer = scope.start_el("Key").finish();
        inner_writer.data(var_201.as_ref());
    }
    if let Some(var_202) = &input.initiated {
        let mut inner_writer = scope.start_el("Initiated").finish();
        inner_writer.data(
            var_202
                .fmt(aws_smithy_types::date_time::Format::DateTime)?
                .as_ref(),
        );
    }
    if let Some(var_203) = &input.storage_class {
        let mut inner_writer = scope.start_el("StorageClass").finish();
        inner_writer.data(var_203.as_str());
    }
    if let Some(var_204) = &input.owner {
        let inner_writer = scope.start_el("Owner");
        crate::xml_ser::serialize_structure_crate_model_owner(var_204, inner_writer)?
    }
    if let Some(var_205) = &input.initiator {
        let inner_writer = scope.start_el("Initiator");
        crate::xml_ser::serialize_structure_crate_model_initiator(var_205, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_object(
    input: &crate::model::Object,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_206) = &input.key {
        let mut inner_writer = scope.start_el("Key").finish();
        inner_writer.data(var_206.as_ref());
    }
    if let Some(var_207) = &input.last_modified {
        let mut inner_writer = scope.start_el("LastModified").finish();
        inner_writer.data(
            var_207
                .fmt(aws_smithy_types::date_time::Format::DateTime)?
                .as_ref(),
        );
    }
    if let Some(var_208) = &input.e_tag {
        let mut inner_writer = scope.start_el("ETag").finish();
        inner_writer.data(var_208.as_ref());
    }
    if input.size != 0 {
        let mut inner_writer = scope.start_el("Size").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.size).encode());
    }
    if let Some(var_209) = &input.storage_class {
        let mut inner_writer = scope.start_el("StorageClass").finish();
        inner_writer.data(var_209.as_str());
    }
    if let Some(var_210) = &input.owner {
        let inner_writer = scope.start_el("Owner");
        crate::xml_ser::serialize_structure_crate_model_owner(var_210, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_delete_marker_entry(
    input: &crate::model::DeleteMarkerEntry,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_211) = &input.owner {
        let inner_writer = scope.start_el("Owner");
        crate::xml_ser::serialize_structure_crate_model_owner(var_211, inner_writer)?
    }
    if let Some(var_212) = &input.key {
        let mut inner_writer = scope.start_el("Key").finish();
        inner_writer.data(var_212.as_ref());
    }
    if let Some(var_213) = &input.version_id {
        let mut inner_writer = scope.start_el("VersionId").finish();
        inner_writer.data(var_213.as_ref());
    }
    if input.is_latest {
        let mut inner_writer = scope.start_el("IsLatest").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.is_latest).encode());
    }
    if let Some(var_214) = &input.last_modified {
        let mut inner_writer = scope.start_el("LastModified").finish();
        inner_writer.data(
            var_214
                .fmt(aws_smithy_types::date_time::Format::DateTime)?
                .as_ref(),
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_object_version(
    input: &crate::model::ObjectVersion,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_215) = &input.e_tag {
        let mut inner_writer = scope.start_el("ETag").finish();
        inner_writer.data(var_215.as_ref());
    }
    if input.size != 0 {
        let mut inner_writer = scope.start_el("Size").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.size).encode());
    }
    if let Some(var_216) = &input.storage_class {
        let mut inner_writer = scope.start_el("StorageClass").finish();
        inner_writer.data(var_216.as_str());
    }
    if let Some(var_217) = &input.key {
        let mut inner_writer = scope.start_el("Key").finish();
        inner_writer.data(var_217.as_ref());
    }
    if let Some(var_218) = &input.version_id {
        let mut inner_writer = scope.start_el("VersionId").finish();
        inner_writer.data(var_218.as_ref());
    }
    if input.is_latest {
        let mut inner_writer = scope.start_el("IsLatest").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.is_latest).encode());
    }
    if let Some(var_219) = &input.last_modified {
        let mut inner_writer = scope.start_el("LastModified").finish();
        inner_writer.data(
            var_219
                .fmt(aws_smithy_types::date_time::Format::DateTime)?
                .as_ref(),
        );
    }
    if let Some(var_220) = &input.owner {
        let inner_writer = scope.start_el("Owner");
        crate::xml_ser::serialize_structure_crate_model_owner(var_220, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_initiator(
    input: &crate::model::Initiator,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_221) = &input.id {
        let mut inner_writer = scope.start_el("ID").finish();
        inner_writer.data(var_221.as_ref());
    }
    if let Some(var_222) = &input.display_name {
        let mut inner_writer = scope.start_el("DisplayName").finish();
        inner_writer.data(var_222.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_part(
    input: &crate::model::Part,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.part_number != 0 {
        let mut inner_writer = scope.start_el("PartNumber").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.part_number).encode());
    }
    if let Some(var_223) = &input.last_modified {
        let mut inner_writer = scope.start_el("LastModified").finish();
        inner_writer.data(
            var_223
                .fmt(aws_smithy_types::date_time::Format::DateTime)?
                .as_ref(),
        );
    }
    if let Some(var_224) = &input.e_tag {
        let mut inner_writer = scope.start_el("ETag").finish();
        inner_writer.data(var_224.as_ref());
    }
    if input.size != 0 {
        let mut inner_writer = scope.start_el("Size").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.size).encode());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_grantee(
    input: &crate::model::Grantee,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let mut writer = writer;
    if let Some(var_225) = &input.r#type {
        writer.write_attribute("xsi:type", var_225.as_str());
    }
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_226) = &input.display_name {
        let mut inner_writer = scope.start_el("DisplayName").finish();
        inner_writer.data(var_226.as_ref());
    }
    if let Some(var_227) = &input.email_address {
        let mut inner_writer = scope.start_el("EmailAddress").finish();
        inner_writer.data(var_227.as_ref());
    }
    if let Some(var_228) = &input.id {
        let mut inner_writer = scope.start_el("ID").finish();
        inner_writer.data(var_228.as_ref());
    }
    if let Some(var_229) = &input.uri {
        let mut inner_writer = scope.start_el("URI").finish();
        inner_writer.data(var_229.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_lifecycle_expiration(
    input: &crate::model::LifecycleExpiration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_230) = &input.date {
        let mut inner_writer = scope.start_el("Date").finish();
        inner_writer.data(
            var_230
                .fmt(aws_smithy_types::date_time::Format::DateTime)?
                .as_ref(),
        );
    }
    if input.days != 0 {
        let mut inner_writer = scope.start_el("Days").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.days).encode());
    }
    if input.expired_object_delete_marker {
        let mut inner_writer = scope.start_el("ExpiredObjectDeleteMarker").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.expired_object_delete_marker).encode(),
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_union_crate_model_lifecycle_rule_filter(
    input: &crate::model::LifecycleRuleFilter,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let mut scope_writer = writer.finish();
    match input {
        crate::model::LifecycleRuleFilter::Prefix(inner) => {
            let mut inner_writer = scope_writer.start_el("Prefix").finish();
            inner_writer.data(inner.as_ref());
        }
        crate::model::LifecycleRuleFilter::Tag(inner) => {
            let inner_writer = scope_writer.start_el("Tag");
            crate::xml_ser::serialize_structure_crate_model_tag(inner, inner_writer)?
        }
        crate::model::LifecycleRuleFilter::ObjectSizeGreaterThan(inner) => {
            let mut inner_writer = scope_writer.start_el("ObjectSizeGreaterThan").finish();
            inner_writer.data(aws_smithy_types::primitive::Encoder::from(*inner).encode());
        }
        crate::model::LifecycleRuleFilter::ObjectSizeLessThan(inner) => {
            let mut inner_writer = scope_writer.start_el("ObjectSizeLessThan").finish();
            inner_writer.data(aws_smithy_types::primitive::Encoder::from(*inner).encode());
        }
        crate::model::LifecycleRuleFilter::And(inner) => {
            let inner_writer = scope_writer.start_el("And");
            crate::xml_ser::serialize_structure_crate_model_lifecycle_rule_and_operator(
                inner,
                inner_writer,
            )?
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transition(
    input: &crate::model::Transition,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_231) = &input.date {
        let mut inner_writer = scope.start_el("Date").finish();
        inner_writer.data(
            var_231
                .fmt(aws_smithy_types::date_time::Format::DateTime)?
                .as_ref(),
        );
    }
    if input.days != 0 {
        let mut inner_writer = scope.start_el("Days").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.days).encode());
    }
    if let Some(var_232) = &input.storage_class {
        let mut inner_writer = scope.start_el("StorageClass").finish();
        inner_writer.data(var_232.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_noncurrent_version_transition(
    input: &crate::model::NoncurrentVersionTransition,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.noncurrent_days != 0 {
        let mut inner_writer = scope.start_el("NoncurrentDays").finish();
        inner_writer
            .data(aws_smithy_types::primitive::Encoder::from(input.noncurrent_days).encode());
    }
    if let Some(var_233) = &input.storage_class {
        let mut inner_writer = scope.start_el("StorageClass").finish();
        inner_writer.data(var_233.as_str());
    }
    if input.newer_noncurrent_versions != 0 {
        let mut inner_writer = scope.start_el("NewerNoncurrentVersions").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.newer_noncurrent_versions).encode(),
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_noncurrent_version_expiration(
    input: &crate::model::NoncurrentVersionExpiration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.noncurrent_days != 0 {
        let mut inner_writer = scope.start_el("NoncurrentDays").finish();
        inner_writer
            .data(aws_smithy_types::primitive::Encoder::from(input.noncurrent_days).encode());
    }
    if input.newer_noncurrent_versions != 0 {
        let mut inner_writer = scope.start_el("NewerNoncurrentVersions").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.newer_noncurrent_versions).encode(),
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_abort_incomplete_multipart_upload(
    input: &crate::model::AbortIncompleteMultipartUpload,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.days_after_initiation != 0 {
        let mut inner_writer = scope.start_el("DaysAfterInitiation").finish();
        inner_writer
            .data(aws_smithy_types::primitive::Encoder::from(input.days_after_initiation).encode());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_target_grant(
    input: &crate::model::TargetGrant,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_234) = &input.grantee {
        let inner_writer = scope
            .start_el("Grantee")
            .write_ns("http://www.w3.org/2001/XMLSchema-instance", Some("xsi"));
        crate::xml_ser::serialize_structure_crate_model_grantee(var_234, inner_writer)?
    }
    if let Some(var_235) = &input.permission {
        let mut inner_writer = scope.start_el("Permission").finish();
        inner_writer.data(var_235.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_notification_configuration_filter(
    input: &crate::model::NotificationConfigurationFilter,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_236) = &input.key {
        let inner_writer = scope.start_el("S3Key");
        crate::xml_ser::serialize_structure_crate_model_s3_key_filter(var_236, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_condition(
    input: &crate::model::Condition,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_237) = &input.http_error_code_returned_equals {
        let mut inner_writer = scope.start_el("HttpErrorCodeReturnedEquals").finish();
        inner_writer.data(var_237.as_ref());
    }
    if let Some(var_238) = &input.key_prefix_equals {
        let mut inner_writer = scope.start_el("KeyPrefixEquals").finish();
        inner_writer.data(var_238.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_redirect(
    input: &crate::model::Redirect,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_239) = &input.host_name {
        let mut inner_writer = scope.start_el("HostName").finish();
        inner_writer.data(var_239.as_ref());
    }
    if let Some(var_240) = &input.http_redirect_code {
        let mut inner_writer = scope.start_el("HttpRedirectCode").finish();
        inner_writer.data(var_240.as_ref());
    }
    if let Some(var_241) = &input.protocol {
        let mut inner_writer = scope.start_el("Protocol").finish();
        inner_writer.data(var_241.as_str());
    }
    if let Some(var_242) = &input.replace_key_prefix_with {
        let mut inner_writer = scope.start_el("ReplaceKeyPrefixWith").finish();
        inner_writer.data(var_242.as_ref());
    }
    if let Some(var_243) = &input.replace_key_with {
        let mut inner_writer = scope.start_el("ReplaceKeyWith").finish();
        inner_writer.data(var_243.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_union_crate_model_analytics_filter(
    input: &crate::model::AnalyticsFilter,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let mut scope_writer = writer.finish();
    match input {
        crate::model::AnalyticsFilter::Prefix(inner) => {
            let mut inner_writer = scope_writer.start_el("Prefix").finish();
            inner_writer.data(inner.as_ref());
        }
        crate::model::AnalyticsFilter::Tag(inner) => {
            let inner_writer = scope_writer.start_el("Tag");
            crate::xml_ser::serialize_structure_crate_model_tag(inner, inner_writer)?
        }
        crate::model::AnalyticsFilter::And(inner) => {
            let inner_writer = scope_writer.start_el("And");
            crate::xml_ser::serialize_structure_crate_model_analytics_and_operator(
                inner,
                inner_writer,
            )?
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_storage_class_analysis(
    input: &crate::model::StorageClassAnalysis,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_244) = &input.data_export {
        let inner_writer = scope.start_el("DataExport");
        crate::xml_ser::serialize_structure_crate_model_storage_class_analysis_data_export(
            var_244,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_intelligent_tiering_filter(
    input: &crate::model::IntelligentTieringFilter,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_245) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_245.as_ref());
    }
    if let Some(var_246) = &input.tag {
        let inner_writer = scope.start_el("Tag");
        crate::xml_ser::serialize_structure_crate_model_tag(var_246, inner_writer)?
    }
    if let Some(var_247) = &input.and {
        let inner_writer = scope.start_el("And");
        crate::xml_ser::serialize_structure_crate_model_intelligent_tiering_and_operator(
            var_247,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_tiering(
    input: &crate::model::Tiering,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    {
        let mut inner_writer = scope.start_el("Days").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.days).encode());
    }
    if let Some(var_248) = &input.access_tier {
        let mut inner_writer = scope.start_el("AccessTier").finish();
        inner_writer.data(var_248.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_inventory_destination(
    input: &crate::model::InventoryDestination,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_249) = &input.s3_bucket_destination {
        let inner_writer = scope.start_el("S3BucketDestination");
        crate::xml_ser::serialize_structure_crate_model_inventory_s3_bucket_destination(
            var_249,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_inventory_filter(
    input: &crate::model::InventoryFilter,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_250) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_250.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_inventory_schedule(
    input: &crate::model::InventorySchedule,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_251) = &input.frequency {
        let mut inner_writer = scope.start_el("Frequency").finish();
        inner_writer.data(var_251.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_union_crate_model_metrics_filter(
    input: &crate::model::MetricsFilter,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let mut scope_writer = writer.finish();
    match input {
        crate::model::MetricsFilter::Prefix(inner) => {
            let mut inner_writer = scope_writer.start_el("Prefix").finish();
            inner_writer.data(inner.as_ref());
        }
        crate::model::MetricsFilter::Tag(inner) => {
            let inner_writer = scope_writer.start_el("Tag");
            crate::xml_ser::serialize_structure_crate_model_tag(inner, inner_writer)?
        }
        crate::model::MetricsFilter::AccessPointArn(inner) => {
            let mut inner_writer = scope_writer.start_el("AccessPointArn").finish();
            inner_writer.data(inner.as_ref());
        }
        crate::model::MetricsFilter::And(inner) => {
            let inner_writer = scope_writer.start_el("And");
            crate::xml_ser::serialize_structure_crate_model_metrics_and_operator(
                inner,
                inner_writer,
            )?
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lifecycle_rule_and_operator(
    input: &crate::model::LifecycleRuleAndOperator,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_252) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_252.as_ref());
    }
    if let Some(var_253) = &input.tags {
        for list_item_254 in var_253 {
            {
                let inner_writer = scope.start_el("Tag");
                crate::xml_ser::serialize_structure_crate_model_tag(list_item_254, inner_writer)?
            }
        }
    }
    if input.object_size_greater_than != 0 {
        let mut inner_writer = scope.start_el("ObjectSizeGreaterThan").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.object_size_greater_than).encode(),
        );
    }
    if input.object_size_less_than != 0 {
        let mut inner_writer = scope.start_el("ObjectSizeLessThan").finish();
        inner_writer
            .data(aws_smithy_types::primitive::Encoder::from(input.object_size_less_than).encode());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_key_filter(
    input: &crate::model::S3KeyFilter,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_255) = &input.filter_rules {
        for list_item_256 in var_255 {
            {
                let inner_writer = scope.start_el("FilterRule");
                crate::xml_ser::serialize_structure_crate_model_filter_rule(
                    list_item_256,
                    inner_writer,
                )?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_analytics_and_operator(
    input: &crate::model::AnalyticsAndOperator,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_257) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_257.as_ref());
    }
    if let Some(var_258) = &input.tags {
        for list_item_259 in var_258 {
            {
                let inner_writer = scope.start_el("Tag");
                crate::xml_ser::serialize_structure_crate_model_tag(list_item_259, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_storage_class_analysis_data_export(
    input: &crate::model::StorageClassAnalysisDataExport,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_260) = &input.output_schema_version {
        let mut inner_writer = scope.start_el("OutputSchemaVersion").finish();
        inner_writer.data(var_260.as_str());
    }
    if let Some(var_261) = &input.destination {
        let inner_writer = scope.start_el("Destination");
        crate::xml_ser::serialize_structure_crate_model_analytics_export_destination(
            var_261,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_intelligent_tiering_and_operator(
    input: &crate::model::IntelligentTieringAndOperator,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_262) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_262.as_ref());
    }
    if let Some(var_263) = &input.tags {
        for list_item_264 in var_263 {
            {
                let inner_writer = scope.start_el("Tag");
                crate::xml_ser::serialize_structure_crate_model_tag(list_item_264, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_inventory_s3_bucket_destination(
    input: &crate::model::InventoryS3BucketDestination,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_265) = &input.account_id {
        let mut inner_writer = scope.start_el("AccountId").finish();
        inner_writer.data(var_265.as_ref());
    }
    if let Some(var_266) = &input.bucket {
        let mut inner_writer = scope.start_el("Bucket").finish();
        inner_writer.data(var_266.as_ref());
    }
    if let Some(var_267) = &input.format {
        let mut inner_writer = scope.start_el("Format").finish();
        inner_writer.data(var_267.as_str());
    }
    if let Some(var_268) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_268.as_ref());
    }
    if let Some(var_269) = &input.encryption {
        let inner_writer = scope.start_el("Encryption");
        crate::xml_ser::serialize_structure_crate_model_inventory_encryption(var_269, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_metrics_and_operator(
    input: &crate::model::MetricsAndOperator,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_270) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_270.as_ref());
    }
    if let Some(var_271) = &input.tags {
        for list_item_272 in var_271 {
            {
                let inner_writer = scope.start_el("Tag");
                crate::xml_ser::serialize_structure_crate_model_tag(list_item_272, inner_writer)?
            }
        }
    }
    if let Some(var_273) = &input.access_point_arn {
        let mut inner_writer = scope.start_el("AccessPointArn").finish();
        inner_writer.data(var_273.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_filter_rule(
    input: &crate::model::FilterRule,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_274) = &input.name {
        let mut inner_writer = scope.start_el("Name").finish();
        inner_writer.data(var_274.as_str());
    }
    if let Some(var_275) = &input.value {
        let mut inner_writer = scope.start_el("Value").finish();
        inner_writer.data(var_275.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_analytics_export_destination(
    input: &crate::model::AnalyticsExportDestination,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_276) = &input.s3_bucket_destination {
        let inner_writer = scope.start_el("S3BucketDestination");
        crate::xml_ser::serialize_structure_crate_model_analytics_s3_bucket_destination(
            var_276,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_inventory_encryption(
    input: &crate::model::InventoryEncryption,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_277) = &input.sses3 {
        let inner_writer = scope.start_el("SSE-S3");
        crate::xml_ser::serialize_structure_crate_model_sses3(var_277, inner_writer)?
    }
    if let Some(var_278) = &input.ssekms {
        let inner_writer = scope.start_el("SSE-KMS");
        crate::xml_ser::serialize_structure_crate_model_ssekms(var_278, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_analytics_s3_bucket_destination(
    input: &crate::model::AnalyticsS3BucketDestination,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_279) = &input.format {
        let mut inner_writer = scope.start_el("Format").finish();
        inner_writer.data(var_279.as_str());
    }
    if let Some(var_280) = &input.bucket_account_id {
        let mut inner_writer = scope.start_el("BucketAccountId").finish();
        inner_writer.data(var_280.as_ref());
    }
    if let Some(var_281) = &input.bucket {
        let mut inner_writer = scope.start_el("Bucket").finish();
        inner_writer.data(var_281.as_ref());
    }
    if let Some(var_282) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_282.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_sses3(
    input: &crate::model::Sses3,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let _ = input;
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_ssekms(
    input: &crate::model::Ssekms,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_283) = &input.key_id {
        let mut inner_writer = scope.start_el("KeyId").finish();
        inner_writer.data(var_283.as_ref());
    }
    scope.finish();
    Ok(())
}
