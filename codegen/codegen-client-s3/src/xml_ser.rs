// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_member_com_amazonaws_s3_synthetic_complete_multipart_upload_input_multipart_upload(
    input: &crate::model::CompletedMultipartUpload,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("CompleteMultipartUpload")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_model_completed_multipart_upload(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_s3_synthetic_create_bucket_input_create_bucket_configuration(
    input: &crate::model::CreateBucketConfiguration,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("CreateBucketConfiguration")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_model_create_bucket_configuration(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_s3_synthetic_delete_objects_input_delete(
    input: &crate::model::Delete,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("Delete")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_model_delete(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_s3_synthetic_put_bucket_accelerate_configuration_input_accelerate_configuration(
    input: &crate::model::AccelerateConfiguration,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("AccelerateConfiguration")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_model_accelerate_configuration(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_s3_synthetic_put_bucket_acl_input_access_control_policy(
    input: &crate::model::AccessControlPolicy,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("AccessControlPolicy")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_model_access_control_policy(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_s3_synthetic_put_bucket_analytics_configuration_input_analytics_configuration(
    input: &crate::model::AnalyticsConfiguration,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("AnalyticsConfiguration")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_model_analytics_configuration(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_s3_synthetic_put_bucket_cors_input_cors_configuration(
    input: &crate::model::CorsConfiguration,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("CORSConfiguration")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_model_cors_configuration(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_s3_synthetic_put_bucket_encryption_input_server_side_encryption_configuration(
    input: &crate::model::ServerSideEncryptionConfiguration,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("ServerSideEncryptionConfiguration")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_model_server_side_encryption_configuration(
            input, root,
        )?
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_s3_synthetic_put_bucket_intelligent_tiering_configuration_input_intelligent_tiering_configuration(
    input: &crate::model::IntelligentTieringConfiguration,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("IntelligentTieringConfiguration")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_model_intelligent_tiering_configuration(
            input, root,
        )?
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_s3_synthetic_put_bucket_inventory_configuration_input_inventory_configuration(
    input: &crate::model::InventoryConfiguration,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("InventoryConfiguration")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_model_inventory_configuration(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_s3_synthetic_put_bucket_lifecycle_configuration_input_lifecycle_configuration(
    input: &crate::model::BucketLifecycleConfiguration,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("LifecycleConfiguration")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_model_bucket_lifecycle_configuration(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_s3_synthetic_put_bucket_logging_input_bucket_logging_status(
    input: &crate::model::BucketLoggingStatus,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("BucketLoggingStatus")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_model_bucket_logging_status(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_s3_synthetic_put_bucket_metrics_configuration_input_metrics_configuration(
    input: &crate::model::MetricsConfiguration,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("MetricsConfiguration")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_model_metrics_configuration(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_s3_synthetic_put_bucket_notification_configuration_input_notification_configuration(
    input: &crate::model::NotificationConfiguration,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("NotificationConfiguration")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_model_notification_configuration(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_s3_synthetic_put_bucket_ownership_controls_input_ownership_controls(
    input: &crate::model::OwnershipControls,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("OwnershipControls")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_model_ownership_controls(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_s3_synthetic_put_bucket_replication_input_replication_configuration(
    input: &crate::model::ReplicationConfiguration,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("ReplicationConfiguration")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_model_replication_configuration(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_s3_synthetic_put_bucket_request_payment_input_request_payment_configuration(
    input: &crate::model::RequestPaymentConfiguration,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("RequestPaymentConfiguration")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_model_request_payment_configuration(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_s3_synthetic_put_bucket_tagging_input_tagging(
    input: &crate::model::Tagging,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("Tagging")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_model_tagging(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_s3_synthetic_put_bucket_versioning_input_versioning_configuration(
    input: &crate::model::VersioningConfiguration,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("VersioningConfiguration")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_model_versioning_configuration(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_s3_synthetic_put_bucket_website_input_website_configuration(
    input: &crate::model::WebsiteConfiguration,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("WebsiteConfiguration")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_model_website_configuration(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_s3_synthetic_put_object_acl_input_access_control_policy(
    input: &crate::model::AccessControlPolicy,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("AccessControlPolicy")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_model_access_control_policy(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_s3_synthetic_put_object_legal_hold_input_legal_hold(
    input: &crate::model::ObjectLockLegalHold,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("LegalHold")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_model_object_lock_legal_hold(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_s3_synthetic_put_object_lock_configuration_input_object_lock_configuration(
    input: &crate::model::ObjectLockConfiguration,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("ObjectLockConfiguration")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_model_object_lock_configuration(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_s3_synthetic_put_object_retention_input_retention(
    input: &crate::model::ObjectLockRetention,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("Retention")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_model_object_lock_retention(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_s3_synthetic_put_object_tagging_input_tagging(
    input: &crate::model::Tagging,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("Tagging")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_model_tagging(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_s3_synthetic_put_public_access_block_input_public_access_block_configuration(
    input: &crate::model::PublicAccessBlockConfiguration,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("PublicAccessBlockConfiguration")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_model_public_access_block_configuration(
            input, root,
        )?
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_s3_synthetic_restore_object_input_restore_request(
    input: &crate::model::RestoreRequest,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("RestoreRequest")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_model_restore_request(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_structure_crate_model_completed_multipart_upload(
    input: &crate::model::CompletedMultipartUpload,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.parts {
        for list_item_2 in var_1 {
            {
                let inner_writer = scope.start_el("Part");
                crate::xml_ser::serialize_structure_crate_model_completed_part(
                    list_item_2,
                    inner_writer,
                )?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_create_bucket_configuration(
    input: &crate::model::CreateBucketConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_3) = &input.location_constraint {
        let mut inner_writer = scope.start_el("LocationConstraint").finish();
        inner_writer.data(var_3.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_delete(
    input: &crate::model::Delete,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_4) = &input.objects {
        for list_item_5 in var_4 {
            {
                let inner_writer = scope.start_el("Object");
                crate::xml_ser::serialize_structure_crate_model_object_identifier(
                    list_item_5,
                    inner_writer,
                )?
            }
        }
    }
    if input.quiet {
        let mut inner_writer = scope.start_el("Quiet").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.quiet).encode());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_accelerate_configuration(
    input: &crate::model::AccelerateConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_6) = &input.status {
        let mut inner_writer = scope.start_el("Status").finish();
        inner_writer.data(var_6.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_access_control_policy(
    input: &crate::model::AccessControlPolicy,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_7) = &input.grants {
        let mut inner_writer = scope.start_el("AccessControlList").finish();
        for list_item_8 in var_7 {
            {
                let inner_writer = inner_writer.start_el("Grant");
                crate::xml_ser::serialize_structure_crate_model_grant(list_item_8, inner_writer)?
            }
        }
    }
    if let Some(var_9) = &input.owner {
        let inner_writer = scope.start_el("Owner");
        crate::xml_ser::serialize_structure_crate_model_owner(var_9, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_analytics_configuration(
    input: &crate::model::AnalyticsConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_10) = &input.id {
        let mut inner_writer = scope.start_el("Id").finish();
        inner_writer.data(var_10.as_ref());
    }
    if let Some(var_11) = &input.filter {
        let inner_writer = scope.start_el("Filter");
        crate::xml_ser::serialize_union_crate_model_analytics_filter(var_11, inner_writer)?
    }
    if let Some(var_12) = &input.storage_class_analysis {
        let inner_writer = scope.start_el("StorageClassAnalysis");
        crate::xml_ser::serialize_structure_crate_model_storage_class_analysis(
            var_12,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_cors_configuration(
    input: &crate::model::CorsConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_13) = &input.cors_rules {
        for list_item_14 in var_13 {
            {
                let inner_writer = scope.start_el("CORSRule");
                crate::xml_ser::serialize_structure_crate_model_cors_rule(
                    list_item_14,
                    inner_writer,
                )?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_server_side_encryption_configuration(
    input: &crate::model::ServerSideEncryptionConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_15) = &input.rules {
        for list_item_16 in var_15 {
            {
                let inner_writer = scope.start_el("Rule");
                crate::xml_ser::serialize_structure_crate_model_server_side_encryption_rule(
                    list_item_16,
                    inner_writer,
                )?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_intelligent_tiering_configuration(
    input: &crate::model::IntelligentTieringConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_17) = &input.id {
        let mut inner_writer = scope.start_el("Id").finish();
        inner_writer.data(var_17.as_ref());
    }
    if let Some(var_18) = &input.filter {
        let inner_writer = scope.start_el("Filter");
        crate::xml_ser::serialize_structure_crate_model_intelligent_tiering_filter(
            var_18,
            inner_writer,
        )?
    }
    if let Some(var_19) = &input.status {
        let mut inner_writer = scope.start_el("Status").finish();
        inner_writer.data(var_19.as_str());
    }
    if let Some(var_20) = &input.tierings {
        for list_item_21 in var_20 {
            {
                let inner_writer = scope.start_el("Tiering");
                crate::xml_ser::serialize_structure_crate_model_tiering(list_item_21, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_inventory_configuration(
    input: &crate::model::InventoryConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_22) = &input.destination {
        let inner_writer = scope.start_el("Destination");
        crate::xml_ser::serialize_structure_crate_model_inventory_destination(var_22, inner_writer)?
    }
    {
        let mut inner_writer = scope.start_el("IsEnabled").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.is_enabled).encode());
    }
    if let Some(var_23) = &input.filter {
        let inner_writer = scope.start_el("Filter");
        crate::xml_ser::serialize_structure_crate_model_inventory_filter(var_23, inner_writer)?
    }
    if let Some(var_24) = &input.id {
        let mut inner_writer = scope.start_el("Id").finish();
        inner_writer.data(var_24.as_ref());
    }
    if let Some(var_25) = &input.included_object_versions {
        let mut inner_writer = scope.start_el("IncludedObjectVersions").finish();
        inner_writer.data(var_25.as_str());
    }
    if let Some(var_26) = &input.optional_fields {
        let mut inner_writer = scope.start_el("OptionalFields").finish();
        for list_item_27 in var_26 {
            {
                let mut inner_writer = inner_writer.start_el("Field").finish();
                inner_writer.data(list_item_27.as_str());
            }
        }
    }
    if let Some(var_28) = &input.schedule {
        let inner_writer = scope.start_el("Schedule");
        crate::xml_ser::serialize_structure_crate_model_inventory_schedule(var_28, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_bucket_lifecycle_configuration(
    input: &crate::model::BucketLifecycleConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_29) = &input.rules {
        for list_item_30 in var_29 {
            {
                let inner_writer = scope.start_el("Rule");
                crate::xml_ser::serialize_structure_crate_model_lifecycle_rule(
                    list_item_30,
                    inner_writer,
                )?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_bucket_logging_status(
    input: &crate::model::BucketLoggingStatus,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_31) = &input.logging_enabled {
        let inner_writer = scope.start_el("LoggingEnabled");
        crate::xml_ser::serialize_structure_crate_model_logging_enabled(var_31, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_metrics_configuration(
    input: &crate::model::MetricsConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_32) = &input.id {
        let mut inner_writer = scope.start_el("Id").finish();
        inner_writer.data(var_32.as_ref());
    }
    if let Some(var_33) = &input.filter {
        let inner_writer = scope.start_el("Filter");
        crate::xml_ser::serialize_union_crate_model_metrics_filter(var_33, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_notification_configuration(
    input: &crate::model::NotificationConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_34) = &input.topic_configurations {
        for list_item_35 in var_34 {
            {
                let inner_writer = scope.start_el("TopicConfiguration");
                crate::xml_ser::serialize_structure_crate_model_topic_configuration(
                    list_item_35,
                    inner_writer,
                )?
            }
        }
    }
    if let Some(var_36) = &input.queue_configurations {
        for list_item_37 in var_36 {
            {
                let inner_writer = scope.start_el("QueueConfiguration");
                crate::xml_ser::serialize_structure_crate_model_queue_configuration(
                    list_item_37,
                    inner_writer,
                )?
            }
        }
    }
    if let Some(var_38) = &input.lambda_function_configurations {
        for list_item_39 in var_38 {
            {
                let inner_writer = scope.start_el("CloudFunctionConfiguration");
                crate::xml_ser::serialize_structure_crate_model_lambda_function_configuration(
                    list_item_39,
                    inner_writer,
                )?
            }
        }
    }
    if let Some(var_40) = &input.event_bridge_configuration {
        let inner_writer = scope.start_el("EventBridgeConfiguration");
        crate::xml_ser::serialize_structure_crate_model_event_bridge_configuration(
            var_40,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_ownership_controls(
    input: &crate::model::OwnershipControls,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_41) = &input.rules {
        for list_item_42 in var_41 {
            {
                let inner_writer = scope.start_el("Rule");
                crate::xml_ser::serialize_structure_crate_model_ownership_controls_rule(
                    list_item_42,
                    inner_writer,
                )?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_replication_configuration(
    input: &crate::model::ReplicationConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_43) = &input.role {
        let mut inner_writer = scope.start_el("Role").finish();
        inner_writer.data(var_43.as_ref());
    }
    if let Some(var_44) = &input.rules {
        for list_item_45 in var_44 {
            {
                let inner_writer = scope.start_el("Rule");
                crate::xml_ser::serialize_structure_crate_model_replication_rule(
                    list_item_45,
                    inner_writer,
                )?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_request_payment_configuration(
    input: &crate::model::RequestPaymentConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_46) = &input.payer {
        let mut inner_writer = scope.start_el("Payer").finish();
        inner_writer.data(var_46.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_tagging(
    input: &crate::model::Tagging,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_47) = &input.tag_set {
        let mut inner_writer = scope.start_el("TagSet").finish();
        for list_item_48 in var_47 {
            {
                let inner_writer = inner_writer.start_el("Tag");
                crate::xml_ser::serialize_structure_crate_model_tag(list_item_48, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_versioning_configuration(
    input: &crate::model::VersioningConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_49) = &input.mfa_delete {
        let mut inner_writer = scope.start_el("MfaDelete").finish();
        inner_writer.data(var_49.as_str());
    }
    if let Some(var_50) = &input.status {
        let mut inner_writer = scope.start_el("Status").finish();
        inner_writer.data(var_50.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_website_configuration(
    input: &crate::model::WebsiteConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_51) = &input.error_document {
        let inner_writer = scope.start_el("ErrorDocument");
        crate::xml_ser::serialize_structure_crate_model_error_document(var_51, inner_writer)?
    }
    if let Some(var_52) = &input.index_document {
        let inner_writer = scope.start_el("IndexDocument");
        crate::xml_ser::serialize_structure_crate_model_index_document(var_52, inner_writer)?
    }
    if let Some(var_53) = &input.redirect_all_requests_to {
        let inner_writer = scope.start_el("RedirectAllRequestsTo");
        crate::xml_ser::serialize_structure_crate_model_redirect_all_requests_to(
            var_53,
            inner_writer,
        )?
    }
    if let Some(var_54) = &input.routing_rules {
        let mut inner_writer = scope.start_el("RoutingRules").finish();
        for list_item_55 in var_54 {
            {
                let inner_writer = inner_writer.start_el("RoutingRule");
                crate::xml_ser::serialize_structure_crate_model_routing_rule(
                    list_item_55,
                    inner_writer,
                )?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_object_lock_legal_hold(
    input: &crate::model::ObjectLockLegalHold,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_56) = &input.status {
        let mut inner_writer = scope.start_el("Status").finish();
        inner_writer.data(var_56.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_object_lock_configuration(
    input: &crate::model::ObjectLockConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_57) = &input.object_lock_enabled {
        let mut inner_writer = scope.start_el("ObjectLockEnabled").finish();
        inner_writer.data(var_57.as_str());
    }
    if let Some(var_58) = &input.rule {
        let inner_writer = scope.start_el("Rule");
        crate::xml_ser::serialize_structure_crate_model_object_lock_rule(var_58, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_object_lock_retention(
    input: &crate::model::ObjectLockRetention,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_59) = &input.mode {
        let mut inner_writer = scope.start_el("Mode").finish();
        inner_writer.data(var_59.as_str());
    }
    if let Some(var_60) = &input.retain_until_date {
        let mut inner_writer = scope.start_el("RetainUntilDate").finish();
        inner_writer.data(
            var_60
                .fmt(aws_smithy_types::date_time::Format::DateTime)?
                .as_ref(),
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_public_access_block_configuration(
    input: &crate::model::PublicAccessBlockConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.block_public_acls {
        let mut inner_writer = scope.start_el("BlockPublicAcls").finish();
        inner_writer
            .data(aws_smithy_types::primitive::Encoder::from(input.block_public_acls).encode());
    }
    if input.ignore_public_acls {
        let mut inner_writer = scope.start_el("IgnorePublicAcls").finish();
        inner_writer
            .data(aws_smithy_types::primitive::Encoder::from(input.ignore_public_acls).encode());
    }
    if input.block_public_policy {
        let mut inner_writer = scope.start_el("BlockPublicPolicy").finish();
        inner_writer
            .data(aws_smithy_types::primitive::Encoder::from(input.block_public_policy).encode());
    }
    if input.restrict_public_buckets {
        let mut inner_writer = scope.start_el("RestrictPublicBuckets").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.restrict_public_buckets).encode(),
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_restore_request(
    input: &crate::model::RestoreRequest,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.days != 0 {
        let mut inner_writer = scope.start_el("Days").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.days).encode());
    }
    if let Some(var_61) = &input.glacier_job_parameters {
        let inner_writer = scope.start_el("GlacierJobParameters");
        crate::xml_ser::serialize_structure_crate_model_glacier_job_parameters(
            var_61,
            inner_writer,
        )?
    }
    if let Some(var_62) = &input.r#type {
        let mut inner_writer = scope.start_el("Type").finish();
        inner_writer.data(var_62.as_str());
    }
    if let Some(var_63) = &input.tier {
        let mut inner_writer = scope.start_el("Tier").finish();
        inner_writer.data(var_63.as_str());
    }
    if let Some(var_64) = &input.description {
        let mut inner_writer = scope.start_el("Description").finish();
        inner_writer.data(var_64.as_ref());
    }
    if let Some(var_65) = &input.select_parameters {
        let inner_writer = scope.start_el("SelectParameters");
        crate::xml_ser::serialize_structure_crate_model_select_parameters(var_65, inner_writer)?
    }
    if let Some(var_66) = &input.output_location {
        let inner_writer = scope.start_el("OutputLocation");
        crate::xml_ser::serialize_structure_crate_model_output_location(var_66, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_completed_part(
    input: &crate::model::CompletedPart,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_67) = &input.e_tag {
        let mut inner_writer = scope.start_el("ETag").finish();
        inner_writer.data(var_67.as_ref());
    }
    if input.part_number != 0 {
        let mut inner_writer = scope.start_el("PartNumber").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.part_number).encode());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_object_identifier(
    input: &crate::model::ObjectIdentifier,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_68) = &input.key {
        let mut inner_writer = scope.start_el("Key").finish();
        inner_writer.data(var_68.as_ref());
    }
    if let Some(var_69) = &input.version_id {
        let mut inner_writer = scope.start_el("VersionId").finish();
        inner_writer.data(var_69.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_grant(
    input: &crate::model::Grant,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_70) = &input.grantee {
        let inner_writer = scope
            .start_el("Grantee")
            .write_ns("http://www.w3.org/2001/XMLSchema-instance", Some("xsi"));
        crate::xml_ser::serialize_structure_crate_model_grantee(var_70, inner_writer)?
    }
    if let Some(var_71) = &input.permission {
        let mut inner_writer = scope.start_el("Permission").finish();
        inner_writer.data(var_71.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_owner(
    input: &crate::model::Owner,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_72) = &input.display_name {
        let mut inner_writer = scope.start_el("DisplayName").finish();
        inner_writer.data(var_72.as_ref());
    }
    if let Some(var_73) = &input.id {
        let mut inner_writer = scope.start_el("ID").finish();
        inner_writer.data(var_73.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_union_crate_model_analytics_filter(
    input: &crate::model::AnalyticsFilter,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let mut scope_writer = writer.finish();
    match input {
        crate::model::AnalyticsFilter::Prefix(inner) => {
            let mut inner_writer = scope_writer.start_el("Prefix").finish();
            inner_writer.data(inner.as_ref());
        }
        crate::model::AnalyticsFilter::Tag(inner) => {
            let inner_writer = scope_writer.start_el("Tag");
            crate::xml_ser::serialize_structure_crate_model_tag(inner, inner_writer)?
        }
        crate::model::AnalyticsFilter::And(inner) => {
            let inner_writer = scope_writer.start_el("And");
            crate::xml_ser::serialize_structure_crate_model_analytics_and_operator(
                inner,
                inner_writer,
            )?
        }
        crate::model::AnalyticsFilter::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant("AnalyticsFilter"),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_storage_class_analysis(
    input: &crate::model::StorageClassAnalysis,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_74) = &input.data_export {
        let inner_writer = scope.start_el("DataExport");
        crate::xml_ser::serialize_structure_crate_model_storage_class_analysis_data_export(
            var_74,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_cors_rule(
    input: &crate::model::CorsRule,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_75) = &input.id {
        let mut inner_writer = scope.start_el("ID").finish();
        inner_writer.data(var_75.as_ref());
    }
    if let Some(var_76) = &input.allowed_headers {
        for list_item_77 in var_76 {
            {
                let mut inner_writer = scope.start_el("AllowedHeader").finish();
                inner_writer.data(list_item_77.as_ref());
            }
        }
    }
    if let Some(var_78) = &input.allowed_methods {
        for list_item_79 in var_78 {
            {
                let mut inner_writer = scope.start_el("AllowedMethod").finish();
                inner_writer.data(list_item_79.as_ref());
            }
        }
    }
    if let Some(var_80) = &input.allowed_origins {
        for list_item_81 in var_80 {
            {
                let mut inner_writer = scope.start_el("AllowedOrigin").finish();
                inner_writer.data(list_item_81.as_ref());
            }
        }
    }
    if let Some(var_82) = &input.expose_headers {
        for list_item_83 in var_82 {
            {
                let mut inner_writer = scope.start_el("ExposeHeader").finish();
                inner_writer.data(list_item_83.as_ref());
            }
        }
    }
    if input.max_age_seconds != 0 {
        let mut inner_writer = scope.start_el("MaxAgeSeconds").finish();
        inner_writer
            .data(aws_smithy_types::primitive::Encoder::from(input.max_age_seconds).encode());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_server_side_encryption_rule(
    input: &crate::model::ServerSideEncryptionRule,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_84) = &input.apply_server_side_encryption_by_default {
        let inner_writer = scope.start_el("ApplyServerSideEncryptionByDefault");
        crate::xml_ser::serialize_structure_crate_model_server_side_encryption_by_default(
            var_84,
            inner_writer,
        )?
    }
    if input.bucket_key_enabled {
        let mut inner_writer = scope.start_el("BucketKeyEnabled").finish();
        inner_writer
            .data(aws_smithy_types::primitive::Encoder::from(input.bucket_key_enabled).encode());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_intelligent_tiering_filter(
    input: &crate::model::IntelligentTieringFilter,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_85) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_85.as_ref());
    }
    if let Some(var_86) = &input.tag {
        let inner_writer = scope.start_el("Tag");
        crate::xml_ser::serialize_structure_crate_model_tag(var_86, inner_writer)?
    }
    if let Some(var_87) = &input.and {
        let inner_writer = scope.start_el("And");
        crate::xml_ser::serialize_structure_crate_model_intelligent_tiering_and_operator(
            var_87,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_tiering(
    input: &crate::model::Tiering,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    {
        let mut inner_writer = scope.start_el("Days").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.days).encode());
    }
    if let Some(var_88) = &input.access_tier {
        let mut inner_writer = scope.start_el("AccessTier").finish();
        inner_writer.data(var_88.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_inventory_destination(
    input: &crate::model::InventoryDestination,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_89) = &input.s3_bucket_destination {
        let inner_writer = scope.start_el("S3BucketDestination");
        crate::xml_ser::serialize_structure_crate_model_inventory_s3_bucket_destination(
            var_89,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_inventory_filter(
    input: &crate::model::InventoryFilter,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_90) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_90.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_inventory_schedule(
    input: &crate::model::InventorySchedule,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_91) = &input.frequency {
        let mut inner_writer = scope.start_el("Frequency").finish();
        inner_writer.data(var_91.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_lifecycle_rule(
    input: &crate::model::LifecycleRule,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_92) = &input.expiration {
        let inner_writer = scope.start_el("Expiration");
        crate::xml_ser::serialize_structure_crate_model_lifecycle_expiration(var_92, inner_writer)?
    }
    if let Some(var_93) = &input.id {
        let mut inner_writer = scope.start_el("ID").finish();
        inner_writer.data(var_93.as_ref());
    }
    if let Some(var_94) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_94.as_ref());
    }
    if let Some(var_95) = &input.filter {
        let inner_writer = scope.start_el("Filter");
        crate::xml_ser::serialize_union_crate_model_lifecycle_rule_filter(var_95, inner_writer)?
    }
    if let Some(var_96) = &input.status {
        let mut inner_writer = scope.start_el("Status").finish();
        inner_writer.data(var_96.as_str());
    }
    if let Some(var_97) = &input.transitions {
        for list_item_98 in var_97 {
            {
                let inner_writer = scope.start_el("Transition");
                crate::xml_ser::serialize_structure_crate_model_transition(
                    list_item_98,
                    inner_writer,
                )?
            }
        }
    }
    if let Some(var_99) = &input.noncurrent_version_transitions {
        for list_item_100 in var_99 {
            {
                let inner_writer = scope.start_el("NoncurrentVersionTransition");
                crate::xml_ser::serialize_structure_crate_model_noncurrent_version_transition(
                    list_item_100,
                    inner_writer,
                )?
            }
        }
    }
    if let Some(var_101) = &input.noncurrent_version_expiration {
        let inner_writer = scope.start_el("NoncurrentVersionExpiration");
        crate::xml_ser::serialize_structure_crate_model_noncurrent_version_expiration(
            var_101,
            inner_writer,
        )?
    }
    if let Some(var_102) = &input.abort_incomplete_multipart_upload {
        let inner_writer = scope.start_el("AbortIncompleteMultipartUpload");
        crate::xml_ser::serialize_structure_crate_model_abort_incomplete_multipart_upload(
            var_102,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_logging_enabled(
    input: &crate::model::LoggingEnabled,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_103) = &input.target_bucket {
        let mut inner_writer = scope.start_el("TargetBucket").finish();
        inner_writer.data(var_103.as_ref());
    }
    if let Some(var_104) = &input.target_grants {
        let mut inner_writer = scope.start_el("TargetGrants").finish();
        for list_item_105 in var_104 {
            {
                let inner_writer = inner_writer.start_el("Grant");
                crate::xml_ser::serialize_structure_crate_model_target_grant(
                    list_item_105,
                    inner_writer,
                )?
            }
        }
    }
    if let Some(var_106) = &input.target_prefix {
        let mut inner_writer = scope.start_el("TargetPrefix").finish();
        inner_writer.data(var_106.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_union_crate_model_metrics_filter(
    input: &crate::model::MetricsFilter,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let mut scope_writer = writer.finish();
    match input {
        crate::model::MetricsFilter::Prefix(inner) => {
            let mut inner_writer = scope_writer.start_el("Prefix").finish();
            inner_writer.data(inner.as_ref());
        }
        crate::model::MetricsFilter::Tag(inner) => {
            let inner_writer = scope_writer.start_el("Tag");
            crate::xml_ser::serialize_structure_crate_model_tag(inner, inner_writer)?
        }
        crate::model::MetricsFilter::AccessPointArn(inner) => {
            let mut inner_writer = scope_writer.start_el("AccessPointArn").finish();
            inner_writer.data(inner.as_ref());
        }
        crate::model::MetricsFilter::And(inner) => {
            let inner_writer = scope_writer.start_el("And");
            crate::xml_ser::serialize_structure_crate_model_metrics_and_operator(
                inner,
                inner_writer,
            )?
        }
        crate::model::MetricsFilter::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant("MetricsFilter"),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_topic_configuration(
    input: &crate::model::TopicConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_107) = &input.id {
        let mut inner_writer = scope.start_el("Id").finish();
        inner_writer.data(var_107.as_ref());
    }
    if let Some(var_108) = &input.topic_arn {
        let mut inner_writer = scope.start_el("Topic").finish();
        inner_writer.data(var_108.as_ref());
    }
    if let Some(var_109) = &input.events {
        for list_item_110 in var_109 {
            {
                let mut inner_writer = scope.start_el("Event").finish();
                inner_writer.data(list_item_110.as_str());
            }
        }
    }
    if let Some(var_111) = &input.filter {
        let inner_writer = scope.start_el("Filter");
        crate::xml_ser::serialize_structure_crate_model_notification_configuration_filter(
            var_111,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_queue_configuration(
    input: &crate::model::QueueConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_112) = &input.id {
        let mut inner_writer = scope.start_el("Id").finish();
        inner_writer.data(var_112.as_ref());
    }
    if let Some(var_113) = &input.queue_arn {
        let mut inner_writer = scope.start_el("Queue").finish();
        inner_writer.data(var_113.as_ref());
    }
    if let Some(var_114) = &input.events {
        for list_item_115 in var_114 {
            {
                let mut inner_writer = scope.start_el("Event").finish();
                inner_writer.data(list_item_115.as_str());
            }
        }
    }
    if let Some(var_116) = &input.filter {
        let inner_writer = scope.start_el("Filter");
        crate::xml_ser::serialize_structure_crate_model_notification_configuration_filter(
            var_116,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_lambda_function_configuration(
    input: &crate::model::LambdaFunctionConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_117) = &input.id {
        let mut inner_writer = scope.start_el("Id").finish();
        inner_writer.data(var_117.as_ref());
    }
    if let Some(var_118) = &input.lambda_function_arn {
        let mut inner_writer = scope.start_el("CloudFunction").finish();
        inner_writer.data(var_118.as_ref());
    }
    if let Some(var_119) = &input.events {
        for list_item_120 in var_119 {
            {
                let mut inner_writer = scope.start_el("Event").finish();
                inner_writer.data(list_item_120.as_str());
            }
        }
    }
    if let Some(var_121) = &input.filter {
        let inner_writer = scope.start_el("Filter");
        crate::xml_ser::serialize_structure_crate_model_notification_configuration_filter(
            var_121,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_event_bridge_configuration(
    input: &crate::model::EventBridgeConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let _ = input;
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_ownership_controls_rule(
    input: &crate::model::OwnershipControlsRule,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_122) = &input.object_ownership {
        let mut inner_writer = scope.start_el("ObjectOwnership").finish();
        inner_writer.data(var_122.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_replication_rule(
    input: &crate::model::ReplicationRule,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_123) = &input.id {
        let mut inner_writer = scope.start_el("ID").finish();
        inner_writer.data(var_123.as_ref());
    }
    if input.priority != 0 {
        let mut inner_writer = scope.start_el("Priority").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.priority).encode());
    }
    if let Some(var_124) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_124.as_ref());
    }
    if let Some(var_125) = &input.filter {
        let inner_writer = scope.start_el("Filter");
        crate::xml_ser::serialize_union_crate_model_replication_rule_filter(var_125, inner_writer)?
    }
    if let Some(var_126) = &input.status {
        let mut inner_writer = scope.start_el("Status").finish();
        inner_writer.data(var_126.as_str());
    }
    if let Some(var_127) = &input.source_selection_criteria {
        let inner_writer = scope.start_el("SourceSelectionCriteria");
        crate::xml_ser::serialize_structure_crate_model_source_selection_criteria(
            var_127,
            inner_writer,
        )?
    }
    if let Some(var_128) = &input.existing_object_replication {
        let inner_writer = scope.start_el("ExistingObjectReplication");
        crate::xml_ser::serialize_structure_crate_model_existing_object_replication(
            var_128,
            inner_writer,
        )?
    }
    if let Some(var_129) = &input.destination {
        let inner_writer = scope.start_el("Destination");
        crate::xml_ser::serialize_structure_crate_model_destination(var_129, inner_writer)?
    }
    if let Some(var_130) = &input.delete_marker_replication {
        let inner_writer = scope.start_el("DeleteMarkerReplication");
        crate::xml_ser::serialize_structure_crate_model_delete_marker_replication(
            var_130,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    input: &crate::model::Tag,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_131) = &input.key {
        let mut inner_writer = scope.start_el("Key").finish();
        inner_writer.data(var_131.as_ref());
    }
    if let Some(var_132) = &input.value {
        let mut inner_writer = scope.start_el("Value").finish();
        inner_writer.data(var_132.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_error_document(
    input: &crate::model::ErrorDocument,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_133) = &input.key {
        let mut inner_writer = scope.start_el("Key").finish();
        inner_writer.data(var_133.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_index_document(
    input: &crate::model::IndexDocument,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_134) = &input.suffix {
        let mut inner_writer = scope.start_el("Suffix").finish();
        inner_writer.data(var_134.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_redirect_all_requests_to(
    input: &crate::model::RedirectAllRequestsTo,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_135) = &input.host_name {
        let mut inner_writer = scope.start_el("HostName").finish();
        inner_writer.data(var_135.as_ref());
    }
    if let Some(var_136) = &input.protocol {
        let mut inner_writer = scope.start_el("Protocol").finish();
        inner_writer.data(var_136.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_routing_rule(
    input: &crate::model::RoutingRule,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_137) = &input.condition {
        let inner_writer = scope.start_el("Condition");
        crate::xml_ser::serialize_structure_crate_model_condition(var_137, inner_writer)?
    }
    if let Some(var_138) = &input.redirect {
        let inner_writer = scope.start_el("Redirect");
        crate::xml_ser::serialize_structure_crate_model_redirect(var_138, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_object_lock_rule(
    input: &crate::model::ObjectLockRule,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_139) = &input.default_retention {
        let inner_writer = scope.start_el("DefaultRetention");
        crate::xml_ser::serialize_structure_crate_model_default_retention(var_139, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_glacier_job_parameters(
    input: &crate::model::GlacierJobParameters,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_140) = &input.tier {
        let mut inner_writer = scope.start_el("Tier").finish();
        inner_writer.data(var_140.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_select_parameters(
    input: &crate::model::SelectParameters,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_141) = &input.input_serialization {
        let inner_writer = scope.start_el("InputSerialization");
        crate::xml_ser::serialize_structure_crate_model_input_serialization(var_141, inner_writer)?
    }
    if let Some(var_142) = &input.expression_type {
        let mut inner_writer = scope.start_el("ExpressionType").finish();
        inner_writer.data(var_142.as_str());
    }
    if let Some(var_143) = &input.expression {
        let mut inner_writer = scope.start_el("Expression").finish();
        inner_writer.data(var_143.as_ref());
    }
    if let Some(var_144) = &input.output_serialization {
        let inner_writer = scope.start_el("OutputSerialization");
        crate::xml_ser::serialize_structure_crate_model_output_serialization(var_144, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_output_location(
    input: &crate::model::OutputLocation,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_145) = &input.s3 {
        let inner_writer = scope.start_el("S3");
        crate::xml_ser::serialize_structure_crate_model_s3_location(var_145, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_grantee(
    input: &crate::model::Grantee,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let mut writer = writer;
    if let Some(var_146) = &input.r#type {
        writer.write_attribute("xsi:type", var_146.as_str());
    }
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_147) = &input.display_name {
        let mut inner_writer = scope.start_el("DisplayName").finish();
        inner_writer.data(var_147.as_ref());
    }
    if let Some(var_148) = &input.email_address {
        let mut inner_writer = scope.start_el("EmailAddress").finish();
        inner_writer.data(var_148.as_ref());
    }
    if let Some(var_149) = &input.id {
        let mut inner_writer = scope.start_el("ID").finish();
        inner_writer.data(var_149.as_ref());
    }
    if let Some(var_150) = &input.uri {
        let mut inner_writer = scope.start_el("URI").finish();
        inner_writer.data(var_150.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_analytics_and_operator(
    input: &crate::model::AnalyticsAndOperator,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_151) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_151.as_ref());
    }
    if let Some(var_152) = &input.tags {
        for list_item_153 in var_152 {
            {
                let inner_writer = scope.start_el("Tag");
                crate::xml_ser::serialize_structure_crate_model_tag(list_item_153, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_storage_class_analysis_data_export(
    input: &crate::model::StorageClassAnalysisDataExport,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_154) = &input.output_schema_version {
        let mut inner_writer = scope.start_el("OutputSchemaVersion").finish();
        inner_writer.data(var_154.as_str());
    }
    if let Some(var_155) = &input.destination {
        let inner_writer = scope.start_el("Destination");
        crate::xml_ser::serialize_structure_crate_model_analytics_export_destination(
            var_155,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_server_side_encryption_by_default(
    input: &crate::model::ServerSideEncryptionByDefault,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_156) = &input.sse_algorithm {
        let mut inner_writer = scope.start_el("SSEAlgorithm").finish();
        inner_writer.data(var_156.as_str());
    }
    if let Some(var_157) = &input.kms_master_key_id {
        let mut inner_writer = scope.start_el("KMSMasterKeyID").finish();
        inner_writer.data(var_157.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_intelligent_tiering_and_operator(
    input: &crate::model::IntelligentTieringAndOperator,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_158) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_158.as_ref());
    }
    if let Some(var_159) = &input.tags {
        for list_item_160 in var_159 {
            {
                let inner_writer = scope.start_el("Tag");
                crate::xml_ser::serialize_structure_crate_model_tag(list_item_160, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_inventory_s3_bucket_destination(
    input: &crate::model::InventoryS3BucketDestination,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_161) = &input.account_id {
        let mut inner_writer = scope.start_el("AccountId").finish();
        inner_writer.data(var_161.as_ref());
    }
    if let Some(var_162) = &input.bucket {
        let mut inner_writer = scope.start_el("Bucket").finish();
        inner_writer.data(var_162.as_ref());
    }
    if let Some(var_163) = &input.format {
        let mut inner_writer = scope.start_el("Format").finish();
        inner_writer.data(var_163.as_str());
    }
    if let Some(var_164) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_164.as_ref());
    }
    if let Some(var_165) = &input.encryption {
        let inner_writer = scope.start_el("Encryption");
        crate::xml_ser::serialize_structure_crate_model_inventory_encryption(var_165, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_lifecycle_expiration(
    input: &crate::model::LifecycleExpiration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_166) = &input.date {
        let mut inner_writer = scope.start_el("Date").finish();
        inner_writer.data(
            var_166
                .fmt(aws_smithy_types::date_time::Format::DateTime)?
                .as_ref(),
        );
    }
    if input.days != 0 {
        let mut inner_writer = scope.start_el("Days").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.days).encode());
    }
    if input.expired_object_delete_marker {
        let mut inner_writer = scope.start_el("ExpiredObjectDeleteMarker").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.expired_object_delete_marker).encode(),
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_union_crate_model_lifecycle_rule_filter(
    input: &crate::model::LifecycleRuleFilter,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let mut scope_writer = writer.finish();
    match input {
        crate::model::LifecycleRuleFilter::Prefix(inner) => {
            let mut inner_writer = scope_writer.start_el("Prefix").finish();
            inner_writer.data(inner.as_ref());
        }
        crate::model::LifecycleRuleFilter::Tag(inner) => {
            let inner_writer = scope_writer.start_el("Tag");
            crate::xml_ser::serialize_structure_crate_model_tag(inner, inner_writer)?
        }
        crate::model::LifecycleRuleFilter::ObjectSizeGreaterThan(inner) => {
            let mut inner_writer = scope_writer.start_el("ObjectSizeGreaterThan").finish();
            inner_writer.data(aws_smithy_types::primitive::Encoder::from(*inner).encode());
        }
        crate::model::LifecycleRuleFilter::ObjectSizeLessThan(inner) => {
            let mut inner_writer = scope_writer.start_el("ObjectSizeLessThan").finish();
            inner_writer.data(aws_smithy_types::primitive::Encoder::from(*inner).encode());
        }
        crate::model::LifecycleRuleFilter::And(inner) => {
            let inner_writer = scope_writer.start_el("And");
            crate::xml_ser::serialize_structure_crate_model_lifecycle_rule_and_operator(
                inner,
                inner_writer,
            )?
        }
        crate::model::LifecycleRuleFilter::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "LifecycleRuleFilter",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transition(
    input: &crate::model::Transition,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_167) = &input.date {
        let mut inner_writer = scope.start_el("Date").finish();
        inner_writer.data(
            var_167
                .fmt(aws_smithy_types::date_time::Format::DateTime)?
                .as_ref(),
        );
    }
    if input.days != 0 {
        let mut inner_writer = scope.start_el("Days").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.days).encode());
    }
    if let Some(var_168) = &input.storage_class {
        let mut inner_writer = scope.start_el("StorageClass").finish();
        inner_writer.data(var_168.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_noncurrent_version_transition(
    input: &crate::model::NoncurrentVersionTransition,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.noncurrent_days != 0 {
        let mut inner_writer = scope.start_el("NoncurrentDays").finish();
        inner_writer
            .data(aws_smithy_types::primitive::Encoder::from(input.noncurrent_days).encode());
    }
    if let Some(var_169) = &input.storage_class {
        let mut inner_writer = scope.start_el("StorageClass").finish();
        inner_writer.data(var_169.as_str());
    }
    if input.newer_noncurrent_versions != 0 {
        let mut inner_writer = scope.start_el("NewerNoncurrentVersions").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.newer_noncurrent_versions).encode(),
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_noncurrent_version_expiration(
    input: &crate::model::NoncurrentVersionExpiration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.noncurrent_days != 0 {
        let mut inner_writer = scope.start_el("NoncurrentDays").finish();
        inner_writer
            .data(aws_smithy_types::primitive::Encoder::from(input.noncurrent_days).encode());
    }
    if input.newer_noncurrent_versions != 0 {
        let mut inner_writer = scope.start_el("NewerNoncurrentVersions").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.newer_noncurrent_versions).encode(),
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_abort_incomplete_multipart_upload(
    input: &crate::model::AbortIncompleteMultipartUpload,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.days_after_initiation != 0 {
        let mut inner_writer = scope.start_el("DaysAfterInitiation").finish();
        inner_writer
            .data(aws_smithy_types::primitive::Encoder::from(input.days_after_initiation).encode());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_target_grant(
    input: &crate::model::TargetGrant,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_170) = &input.grantee {
        let inner_writer = scope
            .start_el("Grantee")
            .write_ns("http://www.w3.org/2001/XMLSchema-instance", Some("xsi"));
        crate::xml_ser::serialize_structure_crate_model_grantee(var_170, inner_writer)?
    }
    if let Some(var_171) = &input.permission {
        let mut inner_writer = scope.start_el("Permission").finish();
        inner_writer.data(var_171.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_metrics_and_operator(
    input: &crate::model::MetricsAndOperator,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_172) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_172.as_ref());
    }
    if let Some(var_173) = &input.tags {
        for list_item_174 in var_173 {
            {
                let inner_writer = scope.start_el("Tag");
                crate::xml_ser::serialize_structure_crate_model_tag(list_item_174, inner_writer)?
            }
        }
    }
    if let Some(var_175) = &input.access_point_arn {
        let mut inner_writer = scope.start_el("AccessPointArn").finish();
        inner_writer.data(var_175.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_notification_configuration_filter(
    input: &crate::model::NotificationConfigurationFilter,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_176) = &input.key {
        let inner_writer = scope.start_el("S3Key");
        crate::xml_ser::serialize_structure_crate_model_s3_key_filter(var_176, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_union_crate_model_replication_rule_filter(
    input: &crate::model::ReplicationRuleFilter,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let mut scope_writer = writer.finish();
    match input {
        crate::model::ReplicationRuleFilter::Prefix(inner) => {
            let mut inner_writer = scope_writer.start_el("Prefix").finish();
            inner_writer.data(inner.as_ref());
        }
        crate::model::ReplicationRuleFilter::Tag(inner) => {
            let inner_writer = scope_writer.start_el("Tag");
            crate::xml_ser::serialize_structure_crate_model_tag(inner, inner_writer)?
        }
        crate::model::ReplicationRuleFilter::And(inner) => {
            let inner_writer = scope_writer.start_el("And");
            crate::xml_ser::serialize_structure_crate_model_replication_rule_and_operator(
                inner,
                inner_writer,
            )?
        }
        crate::model::ReplicationRuleFilter::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "ReplicationRuleFilter",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source_selection_criteria(
    input: &crate::model::SourceSelectionCriteria,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_177) = &input.sse_kms_encrypted_objects {
        let inner_writer = scope.start_el("SseKmsEncryptedObjects");
        crate::xml_ser::serialize_structure_crate_model_sse_kms_encrypted_objects(
            var_177,
            inner_writer,
        )?
    }
    if let Some(var_178) = &input.replica_modifications {
        let inner_writer = scope.start_el("ReplicaModifications");
        crate::xml_ser::serialize_structure_crate_model_replica_modifications(
            var_178,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_existing_object_replication(
    input: &crate::model::ExistingObjectReplication,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_179) = &input.status {
        let mut inner_writer = scope.start_el("Status").finish();
        inner_writer.data(var_179.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_destination(
    input: &crate::model::Destination,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_180) = &input.bucket {
        let mut inner_writer = scope.start_el("Bucket").finish();
        inner_writer.data(var_180.as_ref());
    }
    if let Some(var_181) = &input.account {
        let mut inner_writer = scope.start_el("Account").finish();
        inner_writer.data(var_181.as_ref());
    }
    if let Some(var_182) = &input.storage_class {
        let mut inner_writer = scope.start_el("StorageClass").finish();
        inner_writer.data(var_182.as_str());
    }
    if let Some(var_183) = &input.access_control_translation {
        let inner_writer = scope.start_el("AccessControlTranslation");
        crate::xml_ser::serialize_structure_crate_model_access_control_translation(
            var_183,
            inner_writer,
        )?
    }
    if let Some(var_184) = &input.encryption_configuration {
        let inner_writer = scope.start_el("EncryptionConfiguration");
        crate::xml_ser::serialize_structure_crate_model_encryption_configuration(
            var_184,
            inner_writer,
        )?
    }
    if let Some(var_185) = &input.replication_time {
        let inner_writer = scope.start_el("ReplicationTime");
        crate::xml_ser::serialize_structure_crate_model_replication_time(var_185, inner_writer)?
    }
    if let Some(var_186) = &input.metrics {
        let inner_writer = scope.start_el("Metrics");
        crate::xml_ser::serialize_structure_crate_model_metrics(var_186, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_delete_marker_replication(
    input: &crate::model::DeleteMarkerReplication,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_187) = &input.status {
        let mut inner_writer = scope.start_el("Status").finish();
        inner_writer.data(var_187.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_condition(
    input: &crate::model::Condition,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_188) = &input.http_error_code_returned_equals {
        let mut inner_writer = scope.start_el("HttpErrorCodeReturnedEquals").finish();
        inner_writer.data(var_188.as_ref());
    }
    if let Some(var_189) = &input.key_prefix_equals {
        let mut inner_writer = scope.start_el("KeyPrefixEquals").finish();
        inner_writer.data(var_189.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_redirect(
    input: &crate::model::Redirect,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_190) = &input.host_name {
        let mut inner_writer = scope.start_el("HostName").finish();
        inner_writer.data(var_190.as_ref());
    }
    if let Some(var_191) = &input.http_redirect_code {
        let mut inner_writer = scope.start_el("HttpRedirectCode").finish();
        inner_writer.data(var_191.as_ref());
    }
    if let Some(var_192) = &input.protocol {
        let mut inner_writer = scope.start_el("Protocol").finish();
        inner_writer.data(var_192.as_str());
    }
    if let Some(var_193) = &input.replace_key_prefix_with {
        let mut inner_writer = scope.start_el("ReplaceKeyPrefixWith").finish();
        inner_writer.data(var_193.as_ref());
    }
    if let Some(var_194) = &input.replace_key_with {
        let mut inner_writer = scope.start_el("ReplaceKeyWith").finish();
        inner_writer.data(var_194.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_default_retention(
    input: &crate::model::DefaultRetention,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_195) = &input.mode {
        let mut inner_writer = scope.start_el("Mode").finish();
        inner_writer.data(var_195.as_str());
    }
    if input.days != 0 {
        let mut inner_writer = scope.start_el("Days").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.days).encode());
    }
    if input.years != 0 {
        let mut inner_writer = scope.start_el("Years").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.years).encode());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_input_serialization(
    input: &crate::model::InputSerialization,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_196) = &input.csv {
        let inner_writer = scope.start_el("CSV");
        crate::xml_ser::serialize_structure_crate_model_csv_input(var_196, inner_writer)?
    }
    if let Some(var_197) = &input.compression_type {
        let mut inner_writer = scope.start_el("CompressionType").finish();
        inner_writer.data(var_197.as_str());
    }
    if let Some(var_198) = &input.json {
        let inner_writer = scope.start_el("JSON");
        crate::xml_ser::serialize_structure_crate_model_json_input(var_198, inner_writer)?
    }
    if let Some(var_199) = &input.parquet {
        let inner_writer = scope.start_el("Parquet");
        crate::xml_ser::serialize_structure_crate_model_parquet_input(var_199, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_output_serialization(
    input: &crate::model::OutputSerialization,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_200) = &input.csv {
        let inner_writer = scope.start_el("CSV");
        crate::xml_ser::serialize_structure_crate_model_csv_output(var_200, inner_writer)?
    }
    if let Some(var_201) = &input.json {
        let inner_writer = scope.start_el("JSON");
        crate::xml_ser::serialize_structure_crate_model_json_output(var_201, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_location(
    input: &crate::model::S3Location,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_202) = &input.bucket_name {
        let mut inner_writer = scope.start_el("BucketName").finish();
        inner_writer.data(var_202.as_ref());
    }
    if let Some(var_203) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_203.as_ref());
    }
    if let Some(var_204) = &input.encryption {
        let inner_writer = scope.start_el("Encryption");
        crate::xml_ser::serialize_structure_crate_model_encryption(var_204, inner_writer)?
    }
    if let Some(var_205) = &input.canned_acl {
        let mut inner_writer = scope.start_el("CannedACL").finish();
        inner_writer.data(var_205.as_str());
    }
    if let Some(var_206) = &input.access_control_list {
        let mut inner_writer = scope.start_el("AccessControlList").finish();
        for list_item_207 in var_206 {
            {
                let inner_writer = inner_writer.start_el("Grant");
                crate::xml_ser::serialize_structure_crate_model_grant(list_item_207, inner_writer)?
            }
        }
    }
    if let Some(var_208) = &input.tagging {
        let inner_writer = scope.start_el("Tagging");
        crate::xml_ser::serialize_structure_crate_model_tagging(var_208, inner_writer)?
    }
    if let Some(var_209) = &input.user_metadata {
        let mut inner_writer = scope.start_el("UserMetadata").finish();
        for list_item_210 in var_209 {
            {
                let inner_writer = inner_writer.start_el("MetadataEntry");
                crate::xml_ser::serialize_structure_crate_model_metadata_entry(
                    list_item_210,
                    inner_writer,
                )?
            }
        }
    }
    if let Some(var_211) = &input.storage_class {
        let mut inner_writer = scope.start_el("StorageClass").finish();
        inner_writer.data(var_211.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_analytics_export_destination(
    input: &crate::model::AnalyticsExportDestination,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_212) = &input.s3_bucket_destination {
        let inner_writer = scope.start_el("S3BucketDestination");
        crate::xml_ser::serialize_structure_crate_model_analytics_s3_bucket_destination(
            var_212,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_inventory_encryption(
    input: &crate::model::InventoryEncryption,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_213) = &input.sses3 {
        let inner_writer = scope.start_el("SSE-S3");
        crate::xml_ser::serialize_structure_crate_model_sses3(var_213, inner_writer)?
    }
    if let Some(var_214) = &input.ssekms {
        let inner_writer = scope.start_el("SSE-KMS");
        crate::xml_ser::serialize_structure_crate_model_ssekms(var_214, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_lifecycle_rule_and_operator(
    input: &crate::model::LifecycleRuleAndOperator,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_215) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_215.as_ref());
    }
    if let Some(var_216) = &input.tags {
        for list_item_217 in var_216 {
            {
                let inner_writer = scope.start_el("Tag");
                crate::xml_ser::serialize_structure_crate_model_tag(list_item_217, inner_writer)?
            }
        }
    }
    if input.object_size_greater_than != 0 {
        let mut inner_writer = scope.start_el("ObjectSizeGreaterThan").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.object_size_greater_than).encode(),
        );
    }
    if input.object_size_less_than != 0 {
        let mut inner_writer = scope.start_el("ObjectSizeLessThan").finish();
        inner_writer
            .data(aws_smithy_types::primitive::Encoder::from(input.object_size_less_than).encode());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_key_filter(
    input: &crate::model::S3KeyFilter,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_218) = &input.filter_rules {
        for list_item_219 in var_218 {
            {
                let inner_writer = scope.start_el("FilterRule");
                crate::xml_ser::serialize_structure_crate_model_filter_rule(
                    list_item_219,
                    inner_writer,
                )?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_replication_rule_and_operator(
    input: &crate::model::ReplicationRuleAndOperator,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_220) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_220.as_ref());
    }
    if let Some(var_221) = &input.tags {
        for list_item_222 in var_221 {
            {
                let inner_writer = scope.start_el("Tag");
                crate::xml_ser::serialize_structure_crate_model_tag(list_item_222, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_sse_kms_encrypted_objects(
    input: &crate::model::SseKmsEncryptedObjects,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_223) = &input.status {
        let mut inner_writer = scope.start_el("Status").finish();
        inner_writer.data(var_223.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_replica_modifications(
    input: &crate::model::ReplicaModifications,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_224) = &input.status {
        let mut inner_writer = scope.start_el("Status").finish();
        inner_writer.data(var_224.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_access_control_translation(
    input: &crate::model::AccessControlTranslation,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_225) = &input.owner {
        let mut inner_writer = scope.start_el("Owner").finish();
        inner_writer.data(var_225.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_configuration(
    input: &crate::model::EncryptionConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_226) = &input.replica_kms_key_id {
        let mut inner_writer = scope.start_el("ReplicaKmsKeyID").finish();
        inner_writer.data(var_226.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_replication_time(
    input: &crate::model::ReplicationTime,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_227) = &input.status {
        let mut inner_writer = scope.start_el("Status").finish();
        inner_writer.data(var_227.as_str());
    }
    if let Some(var_228) = &input.time {
        let inner_writer = scope.start_el("Time");
        crate::xml_ser::serialize_structure_crate_model_replication_time_value(
            var_228,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_metrics(
    input: &crate::model::Metrics,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_229) = &input.status {
        let mut inner_writer = scope.start_el("Status").finish();
        inner_writer.data(var_229.as_str());
    }
    if let Some(var_230) = &input.event_threshold {
        let inner_writer = scope.start_el("EventThreshold");
        crate::xml_ser::serialize_structure_crate_model_replication_time_value(
            var_230,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_csv_input(
    input: &crate::model::CsvInput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_231) = &input.file_header_info {
        let mut inner_writer = scope.start_el("FileHeaderInfo").finish();
        inner_writer.data(var_231.as_str());
    }
    if let Some(var_232) = &input.comments {
        let mut inner_writer = scope.start_el("Comments").finish();
        inner_writer.data(var_232.as_ref());
    }
    if let Some(var_233) = &input.quote_escape_character {
        let mut inner_writer = scope.start_el("QuoteEscapeCharacter").finish();
        inner_writer.data(var_233.as_ref());
    }
    if let Some(var_234) = &input.record_delimiter {
        let mut inner_writer = scope.start_el("RecordDelimiter").finish();
        inner_writer.data(var_234.as_ref());
    }
    if let Some(var_235) = &input.field_delimiter {
        let mut inner_writer = scope.start_el("FieldDelimiter").finish();
        inner_writer.data(var_235.as_ref());
    }
    if let Some(var_236) = &input.quote_character {
        let mut inner_writer = scope.start_el("QuoteCharacter").finish();
        inner_writer.data(var_236.as_ref());
    }
    if input.allow_quoted_record_delimiter {
        let mut inner_writer = scope.start_el("AllowQuotedRecordDelimiter").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.allow_quoted_record_delimiter)
                .encode(),
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_json_input(
    input: &crate::model::JsonInput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_237) = &input.r#type {
        let mut inner_writer = scope.start_el("Type").finish();
        inner_writer.data(var_237.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_parquet_input(
    input: &crate::model::ParquetInput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let _ = input;
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_csv_output(
    input: &crate::model::CsvOutput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_238) = &input.quote_fields {
        let mut inner_writer = scope.start_el("QuoteFields").finish();
        inner_writer.data(var_238.as_str());
    }
    if let Some(var_239) = &input.quote_escape_character {
        let mut inner_writer = scope.start_el("QuoteEscapeCharacter").finish();
        inner_writer.data(var_239.as_ref());
    }
    if let Some(var_240) = &input.record_delimiter {
        let mut inner_writer = scope.start_el("RecordDelimiter").finish();
        inner_writer.data(var_240.as_ref());
    }
    if let Some(var_241) = &input.field_delimiter {
        let mut inner_writer = scope.start_el("FieldDelimiter").finish();
        inner_writer.data(var_241.as_ref());
    }
    if let Some(var_242) = &input.quote_character {
        let mut inner_writer = scope.start_el("QuoteCharacter").finish();
        inner_writer.data(var_242.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_json_output(
    input: &crate::model::JsonOutput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_243) = &input.record_delimiter {
        let mut inner_writer = scope.start_el("RecordDelimiter").finish();
        inner_writer.data(var_243.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_encryption(
    input: &crate::model::Encryption,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_244) = &input.encryption_type {
        let mut inner_writer = scope.start_el("EncryptionType").finish();
        inner_writer.data(var_244.as_str());
    }
    if let Some(var_245) = &input.kms_key_id {
        let mut inner_writer = scope.start_el("KMSKeyId").finish();
        inner_writer.data(var_245.as_ref());
    }
    if let Some(var_246) = &input.kms_context {
        let mut inner_writer = scope.start_el("KMSContext").finish();
        inner_writer.data(var_246.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_metadata_entry(
    input: &crate::model::MetadataEntry,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_247) = &input.name {
        let mut inner_writer = scope.start_el("Name").finish();
        inner_writer.data(var_247.as_ref());
    }
    if let Some(var_248) = &input.value {
        let mut inner_writer = scope.start_el("Value").finish();
        inner_writer.data(var_248.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_analytics_s3_bucket_destination(
    input: &crate::model::AnalyticsS3BucketDestination,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_249) = &input.format {
        let mut inner_writer = scope.start_el("Format").finish();
        inner_writer.data(var_249.as_str());
    }
    if let Some(var_250) = &input.bucket_account_id {
        let mut inner_writer = scope.start_el("BucketAccountId").finish();
        inner_writer.data(var_250.as_ref());
    }
    if let Some(var_251) = &input.bucket {
        let mut inner_writer = scope.start_el("Bucket").finish();
        inner_writer.data(var_251.as_ref());
    }
    if let Some(var_252) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_252.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_sses3(
    input: &crate::model::Sses3,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let _ = input;
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_ssekms(
    input: &crate::model::Ssekms,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_253) = &input.key_id {
        let mut inner_writer = scope.start_el("KeyId").finish();
        inner_writer.data(var_253.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_filter_rule(
    input: &crate::model::FilterRule,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_254) = &input.name {
        let mut inner_writer = scope.start_el("Name").finish();
        inner_writer.data(var_254.as_str());
    }
    if let Some(var_255) = &input.value {
        let mut inner_writer = scope.start_el("Value").finish();
        inner_writer.data(var_255.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_replication_time_value(
    input: &crate::model::ReplicationTimeValue,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.minutes != 0 {
        let mut inner_writer = scope.start_el("Minutes").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.minutes).encode());
    }
    scope.finish();
    Ok(())
}
