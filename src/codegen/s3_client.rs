use std :: str :: FromStr ;

pub fn conv_to_client_complete_multipart_upload_input (input : s3d_smithy_codegen_server_s3 :: input :: CompleteMultipartUploadInput) -> aws_sdk_s3 :: input :: CompleteMultipartUploadInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: CompleteMultipartUploadInput :: builder () ; b = b . set_multipart_upload (v . multipart_upload . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: CompletedMultipartUpload :: builder () ; b = b . set_parts (v . parts . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: CompletedPart :: builder () ; b = b . set_checksum_crc32 (v . checksum_crc32 . map (| v | v . to_owned ())) ; b = b . set_checksum_crc32_c (v . checksum_crc32_c . map (| v | v . to_owned ())) ; b = b . set_checksum_sha256 (v . checksum_sha256 . map (| v | v . to_owned ())) ; b = b . set_e_tag (v . e_tag . map (| v | v . to_owned ())) ; b = b . set_part_number (Some (v . part_number . to_owned ())) ; b = b . set_checksum_sha1 (v . checksum_sha1 . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b . build () })) ; b = b . set_sse_customer_algorithm (v . sse_customer_algorithm . map (| v | v . to_owned ())) ; b = b . set_request_payer (v . request_payer . map (| v | aws_sdk_s3 :: model :: RequestPayer :: from (v . as_str ()))) ; b = b . set_sse_customer_key (v . sse_customer_key . map (| v | v . to_owned ())) ; b = b . set_upload_id (Some (v . upload_id . to_owned ())) ; b = b . set_checksum_crc32 (v . checksum_crc32 . map (| v | v . to_owned ())) ; b = b . set_checksum_sha1 (v . checksum_sha1 . map (| v | v . to_owned ())) ; b = b . set_checksum_sha256 (v . checksum_sha256 . map (| v | v . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_checksum_crc32_c (v . checksum_crc32_c . map (| v | v . to_owned ())) ; b = b . set_sse_customer_key_md5 (v . sse_customer_key_md5 . map (| v | v . to_owned ())) ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_complete_multipart_upload_output (output : aws_sdk_s3 :: output :: CompleteMultipartUploadOutput) -> s3d_smithy_codegen_server_s3 :: output :: CompleteMultipartUploadOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: CompleteMultipartUploadOutput :: builder () ; b = b . set_checksum_sha256 (v . checksum_sha256 . map (| v | v . to_owned ())) ; b = b . set_expiration (v . expiration . map (| v | v . to_owned ())) ; b = b . set_key (v . key . map (| v | v . to_owned ())) ; b = b . set_server_side_encryption (v . server_side_encryption . map (| v | s3d_smithy_codegen_server_s3 :: model :: ServerSideEncryption :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_e_tag (v . e_tag . map (| v | v . to_owned ())) ; b = b . set_checksum_crc32_c (v . checksum_crc32_c . map (| v | v . to_owned ())) ; b = b . set_version_id (v . version_id . map (| v | v . to_owned ())) ; b = b . set_checksum_crc32 (v . checksum_crc32 . map (| v | v . to_owned ())) ; b = b . set_ssekms_key_id (v . ssekms_key_id . map (| v | v . to_owned ())) ; b = b . set_checksum_sha1 (v . checksum_sha1 . map (| v | v . to_owned ())) ; b = b . set_bucket_key_enabled (Some (v . bucket_key_enabled . to_owned ())) ; b = b . set_bucket (v . bucket . map (| v | v . to_owned ())) ; b = b . set_location (v . location . map (| v | v . to_owned ())) ; b = b . set_request_charged (v . request_charged . map (| v | s3d_smithy_codegen_server_s3 :: model :: RequestCharged :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () } }

pub fn conv_to_client_delete_bucket_website_input (input : s3d_smithy_codegen_server_s3 :: input :: DeleteBucketWebsiteInput) -> aws_sdk_s3 :: input :: DeleteBucketWebsiteInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: DeleteBucketWebsiteInput :: builder () ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_delete_bucket_website_output (output : aws_sdk_s3 :: output :: DeleteBucketWebsiteOutput) -> s3d_smithy_codegen_server_s3 :: output :: DeleteBucketWebsiteOutput { s3d_smithy_codegen_server_s3 :: output :: DeleteBucketWebsiteOutput { } }

pub fn conv_to_client_restore_object_input (input : s3d_smithy_codegen_server_s3 :: input :: RestoreObjectInput) -> aws_sdk_s3 :: input :: RestoreObjectInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: RestoreObjectInput :: builder () ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_request_payer (v . request_payer . map (| v | aws_sdk_s3 :: model :: RequestPayer :: from (v . as_str ()))) ; b = b . set_checksum_algorithm (v . checksum_algorithm . map (| v | aws_sdk_s3 :: model :: ChecksumAlgorithm :: from (v . as_str ()))) ; b = b . set_restore_request (v . restore_request . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: RestoreRequest :: builder () ; b = b . set_output_location (v . output_location . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: OutputLocation :: builder () ; b = b . set_s3 (v . s3 . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: S3Location :: builder () ; b = b . set_access_control_list (v . access_control_list . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: Grant :: builder () ; b = b . set_grantee (v . grantee . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: Grantee :: builder () ; b = b . set_type (Some (aws_sdk_s3 :: model :: Type :: from (v . r#type . as_str ()))) ; b = b . set_uri (v . uri . map (| v | v . to_owned ())) ; b = b . set_display_name (v . display_name . map (| v | v . to_owned ())) ; b = b . set_email_address (v . email_address . map (| v | v . to_owned ())) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_permission (v . permission . map (| v | aws_sdk_s3 :: model :: Permission :: from (v . as_str ()))) ; b . build () }) . collect ())) ; b = b . set_canned_acl (v . canned_acl . map (| v | aws_sdk_s3 :: model :: ObjectCannedAcl :: from (v . as_str ()))) ; b = b . set_tagging (v . tagging . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: Tagging :: builder () ; b = b . set_tag_set (Some (v . tag_set . into_iter () . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: Tag :: builder () ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_value (Some (v . value . to_owned ())) ; b . build () }) . collect ())) ; b . build () })) ; b = b . set_encryption (v . encryption . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: Encryption :: builder () ; b = b . set_kms_context (v . kms_context . map (| v | v . to_owned ())) ; b = b . set_encryption_type (Some (aws_sdk_s3 :: model :: ServerSideEncryption :: from (v . encryption_type . as_str ()))) ; b = b . set_kms_key_id (v . kms_key_id . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_bucket_name (Some (v . bucket_name . to_owned ())) ; b = b . set_prefix (Some (v . prefix . to_owned ())) ; b = b . set_storage_class (v . storage_class . map (| v | aws_sdk_s3 :: model :: StorageClass :: from (v . as_str ()))) ; b = b . set_user_metadata (v . user_metadata . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: MetadataEntry :: builder () ; b = b . set_name (v . name . map (| v | v . to_owned ())) ; b = b . set_value (v . value . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b . build () })) ; b . build () })) ; b = b . set_select_parameters (v . select_parameters . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: SelectParameters :: builder () ; b = b . set_input_serialization (Some ({ let v = v . input_serialization ; let mut b = aws_sdk_s3 :: model :: InputSerialization :: builder () ; b = b . set_json (v . json . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: JsonInput :: builder () ; b = b . set_type (v . r#type . map (| v | aws_sdk_s3 :: model :: JsonType :: from (v . as_str ()))) ; b . build () })) ; b = b . set_parquet (v . parquet . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: ParquetInput :: builder () ; b . build () })) ; b = b . set_compression_type (v . compression_type . map (| v | aws_sdk_s3 :: model :: CompressionType :: from (v . as_str ()))) ; b = b . set_csv (v . csv . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: CsvInput :: builder () ; b = b . set_record_delimiter (v . record_delimiter . map (| v | v . to_owned ())) ; b = b . set_quote_escape_character (v . quote_escape_character . map (| v | v . to_owned ())) ; b = b . set_allow_quoted_record_delimiter (Some (v . allow_quoted_record_delimiter . to_owned ())) ; b = b . set_comments (v . comments . map (| v | v . to_owned ())) ; b = b . set_field_delimiter (v . field_delimiter . map (| v | v . to_owned ())) ; b = b . set_file_header_info (v . file_header_info . map (| v | aws_sdk_s3 :: model :: FileHeaderInfo :: from (v . as_str ()))) ; b = b . set_quote_character (v . quote_character . map (| v | v . to_owned ())) ; b . build () })) ; b . build () })) ; b = b . set_expression_type (Some (aws_sdk_s3 :: model :: ExpressionType :: from (v . expression_type . as_str ()))) ; b = b . set_output_serialization (Some ({ let v = v . output_serialization ; let mut b = aws_sdk_s3 :: model :: OutputSerialization :: builder () ; b = b . set_csv (v . csv . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: CsvOutput :: builder () ; b = b . set_quote_escape_character (v . quote_escape_character . map (| v | v . to_owned ())) ; b = b . set_record_delimiter (v . record_delimiter . map (| v | v . to_owned ())) ; b = b . set_quote_fields (v . quote_fields . map (| v | aws_sdk_s3 :: model :: QuoteFields :: from (v . as_str ()))) ; b = b . set_field_delimiter (v . field_delimiter . map (| v | v . to_owned ())) ; b = b . set_quote_character (v . quote_character . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_json (v . json . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: JsonOutput :: builder () ; b = b . set_record_delimiter (v . record_delimiter . map (| v | v . to_owned ())) ; b . build () })) ; b . build () })) ; b = b . set_expression (Some (v . expression . to_owned ())) ; b . build () })) ; b = b . set_type (v . r#type . map (| v | aws_sdk_s3 :: model :: RestoreRequestType :: from (v . as_str ()))) ; b = b . set_tier (v . tier . map (| v | aws_sdk_s3 :: model :: Tier :: from (v . as_str ()))) ; b = b . set_glacier_job_parameters (v . glacier_job_parameters . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: GlacierJobParameters :: builder () ; b = b . set_tier (Some (aws_sdk_s3 :: model :: Tier :: from (v . tier . as_str ()))) ; b . build () })) ; b = b . set_days (Some (v . days . to_owned ())) ; b = b . set_description (v . description . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_version_id (v . version_id . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_restore_object_output (output : aws_sdk_s3 :: output :: RestoreObjectOutput) -> s3d_smithy_codegen_server_s3 :: output :: RestoreObjectOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: RestoreObjectOutput :: builder () ; b = b . set_restore_output_path (v . restore_output_path . map (| v | v . to_owned ())) ; b = b . set_request_charged (v . request_charged . map (| v | s3d_smithy_codegen_server_s3 :: model :: RequestCharged :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () } }

pub fn conv_to_client_delete_bucket_tagging_input (input : s3d_smithy_codegen_server_s3 :: input :: DeleteBucketTaggingInput) -> aws_sdk_s3 :: input :: DeleteBucketTaggingInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: DeleteBucketTaggingInput :: builder () ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_delete_bucket_tagging_output (output : aws_sdk_s3 :: output :: DeleteBucketTaggingOutput) -> s3d_smithy_codegen_server_s3 :: output :: DeleteBucketTaggingOutput { s3d_smithy_codegen_server_s3 :: output :: DeleteBucketTaggingOutput { } }

pub fn conv_to_client_write_get_object_response_input (input : s3d_smithy_codegen_server_s3 :: input :: WriteGetObjectResponseInput) -> aws_sdk_s3 :: input :: WriteGetObjectResponseInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: WriteGetObjectResponseInput :: builder () ; b = b . set_last_modified (v . last_modified . map (| v | v . to_owned ())) ; b = b . set_content_disposition (v . content_disposition . map (| v | v . to_owned ())) ; b = b . set_content_length (Some (v . content_length . to_owned ())) ; b = b . set_content_type (v . content_type . map (| v | v . to_owned ())) ; b = b . set_content_encoding (v . content_encoding . map (| v | v . to_owned ())) ; b = b . set_content_range (v . content_range . map (| v | v . to_owned ())) ; b = b . set_request_charged (v . request_charged . map (| v | aws_sdk_s3 :: model :: RequestCharged :: from (v . as_str ()))) ; b = b . set_object_lock_retain_until_date (v . object_lock_retain_until_date . map (| v | v . to_owned ())) ; b = b . set_replication_status (v . replication_status . map (| v | aws_sdk_s3 :: model :: ReplicationStatus :: from (v . as_str ()))) ; b = b . set_e_tag (v . e_tag . map (| v | v . to_owned ())) ; b = b . set_metadata (v . metadata . map (| v | v . to_owned ())) ; b = b . set_error_message (v . error_message . map (| v | v . to_owned ())) ; b = b . set_object_lock_legal_hold_status (v . object_lock_legal_hold_status . map (| v | aws_sdk_s3 :: model :: ObjectLockLegalHoldStatus :: from (v . as_str ()))) ; b = b . set_restore (v . restore . map (| v | v . to_owned ())) ; b = b . set_sse_customer_key_md5 (v . sse_customer_key_md5 . map (| v | v . to_owned ())) ; b = b . set_request_route (Some (v . request_route . to_owned ())) ; b = b . set_checksum_sha256 (v . checksum_sha256 . map (| v | v . to_owned ())) ; b = b . set_ssekms_key_id (v . ssekms_key_id . map (| v | v . to_owned ())) ; b = b . set_storage_class (v . storage_class . map (| v | aws_sdk_s3 :: model :: StorageClass :: from (v . as_str ()))) ; b = b . set_accept_ranges (v . accept_ranges . map (| v | v . to_owned ())) ; b = b . set_version_id (v . version_id . map (| v | v . to_owned ())) ; b = b . set_error_code (v . error_code . map (| v | v . to_owned ())) ; b = b . set_missing_meta (Some (v . missing_meta . to_owned ())) ; b = b . set_checksum_crc32_c (v . checksum_crc32_c . map (| v | v . to_owned ())) ; b = b . set_bucket_key_enabled (Some (v . bucket_key_enabled . to_owned ())) ; b = b . set_expiration (v . expiration . map (| v | v . to_owned ())) ; b = b . set_expires (v . expires . map (| v | v . to_owned ())) ; b = b . set_delete_marker (Some (v . delete_marker . to_owned ())) ; b = b . set_body (Some (v . body)) ; b = b . set_checksum_sha1 (v . checksum_sha1 . map (| v | v . to_owned ())) ; b = b . set_content_language (v . content_language . map (| v | v . to_owned ())) ; b = b . set_object_lock_mode (v . object_lock_mode . map (| v | aws_sdk_s3 :: model :: ObjectLockMode :: from (v . as_str ()))) ; b = b . set_request_token (Some (v . request_token . to_owned ())) ; b = b . set_sse_customer_algorithm (v . sse_customer_algorithm . map (| v | v . to_owned ())) ; b = b . set_server_side_encryption (v . server_side_encryption . map (| v | aws_sdk_s3 :: model :: ServerSideEncryption :: from (v . as_str ()))) ; b = b . set_cache_control (v . cache_control . map (| v | v . to_owned ())) ; b = b . set_checksum_crc32 (v . checksum_crc32 . map (| v | v . to_owned ())) ; b = b . set_parts_count (Some (v . parts_count . to_owned ())) ; b = b . set_status_code (Some (v . status_code . to_owned ())) ; b = b . set_tag_count (Some (v . tag_count . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_write_get_object_response_output (output : aws_sdk_s3 :: output :: WriteGetObjectResponseOutput) -> s3d_smithy_codegen_server_s3 :: output :: WriteGetObjectResponseOutput { s3d_smithy_codegen_server_s3 :: output :: WriteGetObjectResponseOutput { } }

pub fn conv_to_client_get_bucket_inventory_configuration_input (input : s3d_smithy_codegen_server_s3 :: input :: GetBucketInventoryConfigurationInput) -> aws_sdk_s3 :: input :: GetBucketInventoryConfigurationInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: GetBucketInventoryConfigurationInput :: builder () ; b = b . set_id (Some (v . id . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_get_bucket_inventory_configuration_output (output : aws_sdk_s3 :: output :: GetBucketInventoryConfigurationOutput) -> s3d_smithy_codegen_server_s3 :: output :: GetBucketInventoryConfigurationOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: GetBucketInventoryConfigurationOutput :: builder () ; b = b . set_inventory_configuration (v . inventory_configuration . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: InventoryConfiguration :: builder () ; b = b . set_filter (v . filter . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: InventoryFilter :: builder () ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b = b . set_included_object_versions (v . included_object_versions . map (| v | s3d_smithy_codegen_server_s3 :: model :: InventoryIncludedObjectVersions :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_destination (v . destination . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: InventoryDestination :: builder () ; b = b . set_s3_bucket_destination (v . s3_bucket_destination . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: InventoryS3BucketDestination :: builder () ; b = b . set_account_id (v . account_id . map (| v | v . to_owned ())) ; b = b . set_encryption (v . encryption . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: InventoryEncryption :: builder () ; b = b . set_ssekms (v . ssekms . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Ssekms :: builder () ; b = b . set_key_id (v . key_id . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_sses3 (v . sses3 . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Sses3 :: builder () ; b . build () })) ; b . build () })) ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_bucket (v . bucket . map (| v | v . to_owned ())) ; b = b . set_format (v . format . map (| v | s3d_smithy_codegen_server_s3 :: model :: InventoryFormat :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () . unwrap () })) ; b . build () . unwrap () })) ; b = b . set_is_enabled (Some (v . is_enabled . to_owned ())) ; b = b . set_schedule (v . schedule . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: InventorySchedule :: builder () ; b = b . set_frequency (v . frequency . map (| v | s3d_smithy_codegen_server_s3 :: model :: InventoryFrequency :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () . unwrap () })) ; b = b . set_optional_fields (v . optional_fields . map (| v | v . into_iter () . map (| v | s3d_smithy_codegen_server_s3 :: model :: InventoryOptionalField :: from_str (v . as_str ()) . expect ("todo guy")) . collect ())) ; b . build () . unwrap () })) ; b . build () } }

pub fn conv_to_client_get_object_torrent_input (input : s3d_smithy_codegen_server_s3 :: input :: GetObjectTorrentInput) -> aws_sdk_s3 :: input :: GetObjectTorrentInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: GetObjectTorrentInput :: builder () ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_request_payer (v . request_payer . map (| v | aws_sdk_s3 :: model :: RequestPayer :: from (v . as_str ()))) ; b = b . set_key (Some (v . key . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_get_object_torrent_output (output : aws_sdk_s3 :: output :: GetObjectTorrentOutput) -> s3d_smithy_codegen_server_s3 :: output :: GetObjectTorrentOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: GetObjectTorrentOutput :: builder () ; b = b . set_body (Some (v . body)) ; b = b . set_request_charged (v . request_charged . map (| v | s3d_smithy_codegen_server_s3 :: model :: RequestCharged :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () } }

pub fn conv_to_client_put_bucket_versioning_input (input : s3d_smithy_codegen_server_s3 :: input :: PutBucketVersioningInput) -> aws_sdk_s3 :: input :: PutBucketVersioningInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: PutBucketVersioningInput :: builder () ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_versioning_configuration (Some ({ let v = v . versioning_configuration ; let mut b = aws_sdk_s3 :: model :: VersioningConfiguration :: builder () ; b = b . set_mfa_delete (v . mfa_delete . map (| v | aws_sdk_s3 :: model :: MfaDelete :: from (v . as_str ()))) ; b = b . set_status (v . status . map (| v | aws_sdk_s3 :: model :: BucketVersioningStatus :: from (v . as_str ()))) ; b . build () })) ; b = b . set_content_md5 (v . content_md5 . map (| v | v . to_owned ())) ; b = b . set_mfa (v . mfa . map (| v | v . to_owned ())) ; b = b . set_checksum_algorithm (v . checksum_algorithm . map (| v | aws_sdk_s3 :: model :: ChecksumAlgorithm :: from (v . as_str ()))) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_put_bucket_versioning_output (output : aws_sdk_s3 :: output :: PutBucketVersioningOutput) -> s3d_smithy_codegen_server_s3 :: output :: PutBucketVersioningOutput { s3d_smithy_codegen_server_s3 :: output :: PutBucketVersioningOutput { } }

pub fn conv_to_client_get_object_legal_hold_input (input : s3d_smithy_codegen_server_s3 :: input :: GetObjectLegalHoldInput) -> aws_sdk_s3 :: input :: GetObjectLegalHoldInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: GetObjectLegalHoldInput :: builder () ; b = b . set_version_id (v . version_id . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_request_payer (v . request_payer . map (| v | aws_sdk_s3 :: model :: RequestPayer :: from (v . as_str ()))) ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_get_object_legal_hold_output (output : aws_sdk_s3 :: output :: GetObjectLegalHoldOutput) -> s3d_smithy_codegen_server_s3 :: output :: GetObjectLegalHoldOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: GetObjectLegalHoldOutput :: builder () ; b = b . set_legal_hold (v . legal_hold . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: ObjectLockLegalHold :: builder () ; b = b . set_status (v . status . map (| v | s3d_smithy_codegen_server_s3 :: model :: ObjectLockLegalHoldStatus :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () })) ; b . build () } }

pub fn conv_to_client_put_bucket_inventory_configuration_input (input : s3d_smithy_codegen_server_s3 :: input :: PutBucketInventoryConfigurationInput) -> aws_sdk_s3 :: input :: PutBucketInventoryConfigurationInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: PutBucketInventoryConfigurationInput :: builder () ; b = b . set_id (Some (v . id . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_inventory_configuration (Some ({ let v = v . inventory_configuration ; let mut b = aws_sdk_s3 :: model :: InventoryConfiguration :: builder () ; b = b . set_filter (v . filter . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: InventoryFilter :: builder () ; b = b . set_prefix (Some (v . prefix . to_owned ())) ; b . build () })) ; b = b . set_id (Some (v . id . to_owned ())) ; b = b . set_included_object_versions (Some (aws_sdk_s3 :: model :: InventoryIncludedObjectVersions :: from (v . included_object_versions . as_str ()))) ; b = b . set_destination (Some ({ let v = v . destination ; let mut b = aws_sdk_s3 :: model :: InventoryDestination :: builder () ; b = b . set_s3_bucket_destination (Some ({ let v = v . s3_bucket_destination ; let mut b = aws_sdk_s3 :: model :: InventoryS3BucketDestination :: builder () ; b = b . set_account_id (v . account_id . map (| v | v . to_owned ())) ; b = b . set_encryption (v . encryption . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: InventoryEncryption :: builder () ; b = b . set_ssekms (v . ssekms . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: Ssekms :: builder () ; b = b . set_key_id (Some (v . key_id . to_owned ())) ; b . build () })) ; b = b . set_sses3 (v . sses3 . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: Sses3 :: builder () ; b . build () })) ; b . build () })) ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_format (Some (aws_sdk_s3 :: model :: InventoryFormat :: from (v . format . as_str ()))) ; b . build () })) ; b . build () })) ; b = b . set_is_enabled (Some (v . is_enabled . to_owned ())) ; b = b . set_schedule (Some ({ let v = v . schedule ; let mut b = aws_sdk_s3 :: model :: InventorySchedule :: builder () ; b = b . set_frequency (Some (aws_sdk_s3 :: model :: InventoryFrequency :: from (v . frequency . as_str ()))) ; b . build () })) ; b = b . set_optional_fields (v . optional_fields . map (| v | v . into_iter () . map (| v | aws_sdk_s3 :: model :: InventoryOptionalField :: from (v . as_str ())) . collect ())) ; b . build () })) ; b . build () . unwrap () } }

pub fn conv_from_client_put_bucket_inventory_configuration_output (output : aws_sdk_s3 :: output :: PutBucketInventoryConfigurationOutput) -> s3d_smithy_codegen_server_s3 :: output :: PutBucketInventoryConfigurationOutput { s3d_smithy_codegen_server_s3 :: output :: PutBucketInventoryConfigurationOutput { } }

pub fn conv_to_client_copy_object_input (input : s3d_smithy_codegen_server_s3 :: input :: CopyObjectInput) -> aws_sdk_s3 :: input :: CopyObjectInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: CopyObjectInput :: builder () ; b = b . set_request_payer (v . request_payer . map (| v | aws_sdk_s3 :: model :: RequestPayer :: from (v . as_str ()))) ; b = b . set_sse_customer_algorithm (v . sse_customer_algorithm . map (| v | v . to_owned ())) ; b = b . set_server_side_encryption (v . server_side_encryption . map (| v | aws_sdk_s3 :: model :: ServerSideEncryption :: from (v . as_str ()))) ; b = b . set_cache_control (v . cache_control . map (| v | v . to_owned ())) ; b = b . set_grant_full_control (v . grant_full_control . map (| v | v . to_owned ())) ; b = b . set_content_disposition (v . content_disposition . map (| v | v . to_owned ())) ; b = b . set_acl (v . acl . map (| v | aws_sdk_s3 :: model :: ObjectCannedAcl :: from (v . as_str ()))) ; b = b . set_object_lock_legal_hold_status (v . object_lock_legal_hold_status . map (| v | aws_sdk_s3 :: model :: ObjectLockLegalHoldStatus :: from (v . as_str ()))) ; b = b . set_ssekms_encryption_context (v . ssekms_encryption_context . map (| v | v . to_owned ())) ; b = b . set_ssekms_key_id (v . ssekms_key_id . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_object_lock_mode (v . object_lock_mode . map (| v | aws_sdk_s3 :: model :: ObjectLockMode :: from (v . as_str ()))) ; b = b . set_sse_customer_key (v . sse_customer_key . map (| v | v . to_owned ())) ; b = b . set_copy_source_if_match (v . copy_source_if_match . map (| v | v . to_owned ())) ; b = b . set_copy_source_if_none_match (v . copy_source_if_none_match . map (| v | v . to_owned ())) ; b = b . set_content_encoding (v . content_encoding . map (| v | v . to_owned ())) ; b = b . set_copy_source_sse_customer_key (v . copy_source_sse_customer_key . map (| v | v . to_owned ())) ; b = b . set_expires (v . expires . map (| v | v . to_owned ())) ; b = b . set_copy_source_sse_customer_algorithm (v . copy_source_sse_customer_algorithm . map (| v | v . to_owned ())) ; b = b . set_checksum_algorithm (v . checksum_algorithm . map (| v | aws_sdk_s3 :: model :: ChecksumAlgorithm :: from (v . as_str ()))) ; b = b . set_sse_customer_key_md5 (v . sse_customer_key_md5 . map (| v | v . to_owned ())) ; b = b . set_metadata (v . metadata . map (| v | v . to_owned ())) ; b = b . set_object_lock_retain_until_date (v . object_lock_retain_until_date . map (| v | v . to_owned ())) ; b = b . set_tagging_directive (v . tagging_directive . map (| v | aws_sdk_s3 :: model :: TaggingDirective :: from (v . as_str ()))) ; b = b . set_grant_read_acp (v . grant_read_acp . map (| v | v . to_owned ())) ; b = b . set_bucket_key_enabled (Some (v . bucket_key_enabled . to_owned ())) ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_storage_class (v . storage_class . map (| v | aws_sdk_s3 :: model :: StorageClass :: from (v . as_str ()))) ; b = b . set_website_redirect_location (v . website_redirect_location . map (| v | v . to_owned ())) ; b = b . set_content_language (v . content_language . map (| v | v . to_owned ())) ; b = b . set_copy_source (Some (v . copy_source . to_owned ())) ; b = b . set_grant_write_acp (v . grant_write_acp . map (| v | v . to_owned ())) ; b = b . set_copy_source_if_modified_since (v . copy_source_if_modified_since . map (| v | v . to_owned ())) ; b = b . set_copy_source_sse_customer_key_md5 (v . copy_source_sse_customer_key_md5 . map (| v | v . to_owned ())) ; b = b . set_content_type (v . content_type . map (| v | v . to_owned ())) ; b = b . set_expected_source_bucket_owner (v . expected_source_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_metadata_directive (v . metadata_directive . map (| v | aws_sdk_s3 :: model :: MetadataDirective :: from (v . as_str ()))) ; b = b . set_copy_source_if_unmodified_since (v . copy_source_if_unmodified_since . map (| v | v . to_owned ())) ; b = b . set_grant_read (v . grant_read . map (| v | v . to_owned ())) ; b = b . set_tagging (v . tagging . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_copy_object_output (output : aws_sdk_s3 :: output :: CopyObjectOutput) -> s3d_smithy_codegen_server_s3 :: output :: CopyObjectOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: CopyObjectOutput :: builder () ; b = b . set_copy_source_version_id (v . copy_source_version_id . map (| v | v . to_owned ())) ; b = b . set_request_charged (v . request_charged . map (| v | s3d_smithy_codegen_server_s3 :: model :: RequestCharged :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_bucket_key_enabled (Some (v . bucket_key_enabled . to_owned ())) ; b = b . set_expiration (v . expiration . map (| v | v . to_owned ())) ; b = b . set_sse_customer_algorithm (v . sse_customer_algorithm . map (| v | v . to_owned ())) ; b = b . set_copy_object_result (v . copy_object_result . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: CopyObjectResult :: builder () ; b = b . set_checksum_sha256 (v . checksum_sha256 . map (| v | v . to_owned ())) ; b = b . set_checksum_crc32_c (v . checksum_crc32_c . map (| v | v . to_owned ())) ; b = b . set_checksum_crc32 (v . checksum_crc32 . map (| v | v . to_owned ())) ; b = b . set_checksum_sha1 (v . checksum_sha1 . map (| v | v . to_owned ())) ; b = b . set_last_modified (v . last_modified . map (| v | v . to_owned ())) ; b = b . set_e_tag (v . e_tag . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_sse_customer_key_md5 (v . sse_customer_key_md5 . map (| v | v . to_owned ())) ; b = b . set_server_side_encryption (v . server_side_encryption . map (| v | s3d_smithy_codegen_server_s3 :: model :: ServerSideEncryption :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_ssekms_key_id (v . ssekms_key_id . map (| v | v . to_owned ())) ; b = b . set_version_id (v . version_id . map (| v | v . to_owned ())) ; b = b . set_ssekms_encryption_context (v . ssekms_encryption_context . map (| v | v . to_owned ())) ; b . build () } }

pub fn conv_to_client_list_bucket_analytics_configurations_input (input : s3d_smithy_codegen_server_s3 :: input :: ListBucketAnalyticsConfigurationsInput) -> aws_sdk_s3 :: input :: ListBucketAnalyticsConfigurationsInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: ListBucketAnalyticsConfigurationsInput :: builder () ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_continuation_token (v . continuation_token . map (| v | v . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_list_bucket_analytics_configurations_output (output : aws_sdk_s3 :: output :: ListBucketAnalyticsConfigurationsOutput) -> s3d_smithy_codegen_server_s3 :: output :: ListBucketAnalyticsConfigurationsOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: ListBucketAnalyticsConfigurationsOutput :: builder () ; b = b . set_next_continuation_token (v . next_continuation_token . map (| v | v . to_owned ())) ; b = b . set_is_truncated (Some (v . is_truncated . to_owned ())) ; b = b . set_analytics_configuration_list (v . analytics_configuration_list . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: AnalyticsConfiguration :: builder () ; b = b . set_storage_class_analysis (v . storage_class_analysis . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: StorageClassAnalysis :: builder () ; b = b . set_data_export (v . data_export . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: StorageClassAnalysisDataExport :: builder () ; b = b . set_destination (v . destination . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: AnalyticsExportDestination :: builder () ; b = b . set_s3_bucket_destination (v . s3_bucket_destination . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: AnalyticsS3BucketDestination :: builder () ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_bucket_account_id (v . bucket_account_id . map (| v | v . to_owned ())) ; b = b . set_format (v . format . map (| v | s3d_smithy_codegen_server_s3 :: model :: AnalyticsS3ExportFileFormat :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_bucket (v . bucket . map (| v | v . to_owned ())) ; b . build () . unwrap () })) ; b . build () . unwrap () })) ; b = b . set_output_schema_version (v . output_schema_version . map (| v | s3d_smithy_codegen_server_s3 :: model :: StorageClassAnalysisSchemaVersion :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () . unwrap () })) ; b . build () })) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b = b . set_filter (v . filter . map (| v | { match v { aws_sdk_s3 :: model :: AnalyticsFilter :: And (v) => s3d_smithy_codegen_server_s3 :: model :: AnalyticsFilter :: And ({ let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: AnalyticsAndOperator :: builder () ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_tags (v . tags . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Tag :: builder () ; b = b . set_key (v . key . map (| v | v . to_owned ())) ; b = b . set_value (v . value . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b . build () }) , aws_sdk_s3 :: model :: AnalyticsFilter :: Prefix (v) => s3d_smithy_codegen_server_s3 :: model :: AnalyticsFilter :: Prefix (v . to_owned ()) , aws_sdk_s3 :: model :: AnalyticsFilter :: Tag (v) => s3d_smithy_codegen_server_s3 :: model :: AnalyticsFilter :: Tag ({ let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Tag :: builder () ; b = b . set_key (v . key . map (| v | v . to_owned ())) ; b = b . set_value (v . value . map (| v | v . to_owned ())) ; b . build () }) , _ => panic ! ("unknown union value") , } })) ; b . build () . unwrap () }) . collect ())) ; b = b . set_continuation_token (v . continuation_token . map (| v | v . to_owned ())) ; b . build () } }

pub fn conv_to_client_get_bucket_versioning_input (input : s3d_smithy_codegen_server_s3 :: input :: GetBucketVersioningInput) -> aws_sdk_s3 :: input :: GetBucketVersioningInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: GetBucketVersioningInput :: builder () ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_get_bucket_versioning_output (output : aws_sdk_s3 :: output :: GetBucketVersioningOutput) -> s3d_smithy_codegen_server_s3 :: output :: GetBucketVersioningOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: GetBucketVersioningOutput :: builder () ; b = b . set_mfa_delete (v . mfa_delete . map (| v | s3d_smithy_codegen_server_s3 :: model :: MfaDeleteStatus :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_status (v . status . map (| v | s3d_smithy_codegen_server_s3 :: model :: BucketVersioningStatus :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () } }

pub fn conv_to_client_put_bucket_cors_input (input : s3d_smithy_codegen_server_s3 :: input :: PutBucketCorsInput) -> aws_sdk_s3 :: input :: PutBucketCorsInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: PutBucketCorsInput :: builder () ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_cors_configuration (Some ({ let v = v . cors_configuration ; let mut b = aws_sdk_s3 :: model :: CorsConfiguration :: builder () ; b = b . set_cors_rules (Some (v . cors_rules . into_iter () . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: CorsRule :: builder () ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b = b . set_allowed_headers (v . allowed_headers . map (| v | v . clone ())) ; b = b . set_allowed_origins (Some (v . allowed_origins . clone ())) ; b = b . set_expose_headers (v . expose_headers . map (| v | v . clone ())) ; b = b . set_allowed_methods (Some (v . allowed_methods . clone ())) ; b = b . set_max_age_seconds (Some (v . max_age_seconds . to_owned ())) ; b . build () }) . collect ())) ; b . build () })) ; b = b . set_checksum_algorithm (v . checksum_algorithm . map (| v | aws_sdk_s3 :: model :: ChecksumAlgorithm :: from (v . as_str ()))) ; b = b . set_content_md5 (v . content_md5 . map (| v | v . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_put_bucket_cors_output (output : aws_sdk_s3 :: output :: PutBucketCorsOutput) -> s3d_smithy_codegen_server_s3 :: output :: PutBucketCorsOutput { s3d_smithy_codegen_server_s3 :: output :: PutBucketCorsOutput { } }

pub fn conv_to_client_get_bucket_cors_input (input : s3d_smithy_codegen_server_s3 :: input :: GetBucketCorsInput) -> aws_sdk_s3 :: input :: GetBucketCorsInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: GetBucketCorsInput :: builder () ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_get_bucket_cors_output (output : aws_sdk_s3 :: output :: GetBucketCorsOutput) -> s3d_smithy_codegen_server_s3 :: output :: GetBucketCorsOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: GetBucketCorsOutput :: builder () ; b = b . set_cors_rules (v . cors_rules . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: CorsRule :: builder () ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b = b . set_allowed_headers (v . allowed_headers . map (| v | v . clone ())) ; b = b . set_allowed_origins (v . allowed_origins . map (| v | v . clone ())) ; b = b . set_expose_headers (v . expose_headers . map (| v | v . clone ())) ; b = b . set_allowed_methods (v . allowed_methods . map (| v | v . clone ())) ; b = b . set_max_age_seconds (Some (v . max_age_seconds . to_owned ())) ; b . build () . unwrap () }) . collect ())) ; b . build () } }

pub fn conv_to_client_list_bucket_intelligent_tiering_configurations_input (input : s3d_smithy_codegen_server_s3 :: input :: ListBucketIntelligentTieringConfigurationsInput) -> aws_sdk_s3 :: input :: ListBucketIntelligentTieringConfigurationsInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: ListBucketIntelligentTieringConfigurationsInput :: builder () ; b = b . set_continuation_token (v . continuation_token . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_list_bucket_intelligent_tiering_configurations_output (output : aws_sdk_s3 :: output :: ListBucketIntelligentTieringConfigurationsOutput) -> s3d_smithy_codegen_server_s3 :: output :: ListBucketIntelligentTieringConfigurationsOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: ListBucketIntelligentTieringConfigurationsOutput :: builder () ; b = b . set_intelligent_tiering_configuration_list (v . intelligent_tiering_configuration_list . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: IntelligentTieringConfiguration :: builder () ; b = b . set_tierings (v . tierings . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Tiering :: builder () ; b = b . set_days (Some (v . days . to_owned ())) ; b = b . set_access_tier (v . access_tier . map (| v | s3d_smithy_codegen_server_s3 :: model :: IntelligentTieringAccessTier :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () . unwrap () }) . collect ())) ; b = b . set_status (v . status . map (| v | s3d_smithy_codegen_server_s3 :: model :: IntelligentTieringStatus :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_filter (v . filter . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: IntelligentTieringFilter :: builder () ; b = b . set_and (v . and . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: IntelligentTieringAndOperator :: builder () ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_tags (v . tags . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Tag :: builder () ; b = b . set_key (v . key . map (| v | v . to_owned ())) ; b = b . set_value (v . value . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b . build () })) ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_tag (v . tag . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Tag :: builder () ; b = b . set_key (v . key . map (| v | v . to_owned ())) ; b = b . set_value (v . value . map (| v | v . to_owned ())) ; b . build () })) ; b . build () })) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b . build () . unwrap () }) . collect ())) ; b = b . set_next_continuation_token (v . next_continuation_token . map (| v | v . to_owned ())) ; b = b . set_continuation_token (v . continuation_token . map (| v | v . to_owned ())) ; b = b . set_is_truncated (Some (v . is_truncated . to_owned ())) ; b . build () } }

pub fn conv_to_client_get_bucket_accelerate_configuration_input (input : s3d_smithy_codegen_server_s3 :: input :: GetBucketAccelerateConfigurationInput) -> aws_sdk_s3 :: input :: GetBucketAccelerateConfigurationInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: GetBucketAccelerateConfigurationInput :: builder () ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_get_bucket_accelerate_configuration_output (output : aws_sdk_s3 :: output :: GetBucketAccelerateConfigurationOutput) -> s3d_smithy_codegen_server_s3 :: output :: GetBucketAccelerateConfigurationOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: GetBucketAccelerateConfigurationOutput :: builder () ; b = b . set_status (v . status . map (| v | s3d_smithy_codegen_server_s3 :: model :: BucketAccelerateStatus :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () } }

pub fn conv_to_client_put_bucket_intelligent_tiering_configuration_input (input : s3d_smithy_codegen_server_s3 :: input :: PutBucketIntelligentTieringConfigurationInput) -> aws_sdk_s3 :: input :: PutBucketIntelligentTieringConfigurationInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: PutBucketIntelligentTieringConfigurationInput :: builder () ; b = b . set_intelligent_tiering_configuration (Some ({ let v = v . intelligent_tiering_configuration ; let mut b = aws_sdk_s3 :: model :: IntelligentTieringConfiguration :: builder () ; b = b . set_tierings (Some (v . tierings . into_iter () . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: Tiering :: builder () ; b = b . set_days (Some (v . days . to_owned ())) ; b = b . set_access_tier (Some (aws_sdk_s3 :: model :: IntelligentTieringAccessTier :: from (v . access_tier . as_str ()))) ; b . build () }) . collect ())) ; b = b . set_status (Some (aws_sdk_s3 :: model :: IntelligentTieringStatus :: from (v . status . as_str ()))) ; b = b . set_filter (v . filter . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: IntelligentTieringFilter :: builder () ; b = b . set_and (v . and . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: IntelligentTieringAndOperator :: builder () ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_tags (v . tags . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: Tag :: builder () ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_value (Some (v . value . to_owned ())) ; b . build () }) . collect ())) ; b . build () })) ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_tag (v . tag . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: Tag :: builder () ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_value (Some (v . value . to_owned ())) ; b . build () })) ; b . build () })) ; b = b . set_id (Some (v . id . to_owned ())) ; b . build () })) ; b = b . set_id (Some (v . id . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_put_bucket_intelligent_tiering_configuration_output (output : aws_sdk_s3 :: output :: PutBucketIntelligentTieringConfigurationOutput) -> s3d_smithy_codegen_server_s3 :: output :: PutBucketIntelligentTieringConfigurationOutput { s3d_smithy_codegen_server_s3 :: output :: PutBucketIntelligentTieringConfigurationOutput { } }

pub fn conv_to_client_put_bucket_tagging_input (input : s3d_smithy_codegen_server_s3 :: input :: PutBucketTaggingInput) -> aws_sdk_s3 :: input :: PutBucketTaggingInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: PutBucketTaggingInput :: builder () ; b = b . set_checksum_algorithm (v . checksum_algorithm . map (| v | aws_sdk_s3 :: model :: ChecksumAlgorithm :: from (v . as_str ()))) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_content_md5 (v . content_md5 . map (| v | v . to_owned ())) ; b = b . set_tagging (Some ({ let v = v . tagging ; let mut b = aws_sdk_s3 :: model :: Tagging :: builder () ; b = b . set_tag_set (Some (v . tag_set . into_iter () . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: Tag :: builder () ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_value (Some (v . value . to_owned ())) ; b . build () }) . collect ())) ; b . build () })) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_put_bucket_tagging_output (output : aws_sdk_s3 :: output :: PutBucketTaggingOutput) -> s3d_smithy_codegen_server_s3 :: output :: PutBucketTaggingOutput { s3d_smithy_codegen_server_s3 :: output :: PutBucketTaggingOutput { } }

pub fn conv_to_client_get_bucket_logging_input (input : s3d_smithy_codegen_server_s3 :: input :: GetBucketLoggingInput) -> aws_sdk_s3 :: input :: GetBucketLoggingInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: GetBucketLoggingInput :: builder () ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_get_bucket_logging_output (output : aws_sdk_s3 :: output :: GetBucketLoggingOutput) -> s3d_smithy_codegen_server_s3 :: output :: GetBucketLoggingOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: GetBucketLoggingOutput :: builder () ; b = b . set_logging_enabled (v . logging_enabled . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: LoggingEnabled :: builder () ; b = b . set_target_bucket (v . target_bucket . map (| v | v . to_owned ())) ; b = b . set_target_prefix (v . target_prefix . map (| v | v . to_owned ())) ; b = b . set_target_grants (v . target_grants . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: TargetGrant :: builder () ; b = b . set_grantee (v . grantee . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Grantee :: builder () ; b = b . set_type (v . r#type . map (| v | s3d_smithy_codegen_server_s3 :: model :: Type :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_uri (v . uri . map (| v | v . to_owned ())) ; b = b . set_display_name (v . display_name . map (| v | v . to_owned ())) ; b = b . set_email_address (v . email_address . map (| v | v . to_owned ())) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b . build () . unwrap () })) ; b = b . set_permission (v . permission . map (| v | s3d_smithy_codegen_server_s3 :: model :: BucketLogsPermission :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () }) . collect ())) ; b . build () })) ; b . build () } }

pub fn conv_to_client_list_objects_input (input : s3d_smithy_codegen_server_s3 :: input :: ListObjectsInput) -> aws_sdk_s3 :: input :: ListObjectsInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: ListObjectsInput :: builder () ; b = b . set_request_payer (v . request_payer . map (| v | aws_sdk_s3 :: model :: RequestPayer :: from (v . as_str ()))) ; b = b . set_marker (v . marker . map (| v | v . to_owned ())) ; b = b . set_max_keys (Some (v . max_keys . to_owned ())) ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_delimiter (v . delimiter . map (| v | v . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_encoding_type (v . encoding_type . map (| v | aws_sdk_s3 :: model :: EncodingType :: from (v . as_str ()))) ; b . build () . unwrap () } }

pub fn conv_from_client_list_objects_output (output : aws_sdk_s3 :: output :: ListObjectsOutput) -> s3d_smithy_codegen_server_s3 :: output :: ListObjectsOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: ListObjectsOutput :: builder () ; b = b . set_next_marker (v . next_marker . map (| v | v . to_owned ())) ; b = b . set_contents (v . contents . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Object :: builder () ; b = b . set_storage_class (v . storage_class . map (| v | s3d_smithy_codegen_server_s3 :: model :: ObjectStorageClass :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_checksum_algorithm (v . checksum_algorithm . map (| v | v . into_iter () . map (| v | s3d_smithy_codegen_server_s3 :: model :: ChecksumAlgorithm :: from_str (v . as_str ()) . expect ("todo guy")) . collect ())) ; b = b . set_owner (v . owner . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Owner :: builder () ; b = b . set_display_name (v . display_name . map (| v | v . to_owned ())) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_size (Some (v . size . to_owned ())) ; b = b . set_e_tag (v . e_tag . map (| v | v . to_owned ())) ; b = b . set_key (v . key . map (| v | v . to_owned ())) ; b = b . set_last_modified (v . last_modified . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b = b . set_marker (v . marker . map (| v | v . to_owned ())) ; b = b . set_delimiter (v . delimiter . map (| v | v . to_owned ())) ; b = b . set_encoding_type (v . encoding_type . map (| v | s3d_smithy_codegen_server_s3 :: model :: EncodingType :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_common_prefixes (v . common_prefixes . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: CommonPrefix :: builder () ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b = b . set_name (v . name . map (| v | v . to_owned ())) ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_is_truncated (Some (v . is_truncated . to_owned ())) ; b = b . set_max_keys (Some (v . max_keys . to_owned ())) ; b . build () } }

pub fn conv_to_client_head_bucket_input (input : s3d_smithy_codegen_server_s3 :: input :: HeadBucketInput) -> aws_sdk_s3 :: input :: HeadBucketInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: HeadBucketInput :: builder () ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_head_bucket_output (output : aws_sdk_s3 :: output :: HeadBucketOutput) -> s3d_smithy_codegen_server_s3 :: output :: HeadBucketOutput { s3d_smithy_codegen_server_s3 :: output :: HeadBucketOutput { } }

pub fn conv_to_client_get_public_access_block_input (input : s3d_smithy_codegen_server_s3 :: input :: GetPublicAccessBlockInput) -> aws_sdk_s3 :: input :: GetPublicAccessBlockInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: GetPublicAccessBlockInput :: builder () ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_get_public_access_block_output (output : aws_sdk_s3 :: output :: GetPublicAccessBlockOutput) -> s3d_smithy_codegen_server_s3 :: output :: GetPublicAccessBlockOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: GetPublicAccessBlockOutput :: builder () ; b = b . set_public_access_block_configuration (v . public_access_block_configuration . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: PublicAccessBlockConfiguration :: builder () ; b = b . set_block_public_acls (Some (v . block_public_acls . to_owned ())) ; b = b . set_restrict_public_buckets (Some (v . restrict_public_buckets . to_owned ())) ; b = b . set_ignore_public_acls (Some (v . ignore_public_acls . to_owned ())) ; b = b . set_block_public_policy (Some (v . block_public_policy . to_owned ())) ; b . build () })) ; b . build () } }

pub fn conv_to_client_put_bucket_accelerate_configuration_input (input : s3d_smithy_codegen_server_s3 :: input :: PutBucketAccelerateConfigurationInput) -> aws_sdk_s3 :: input :: PutBucketAccelerateConfigurationInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: PutBucketAccelerateConfigurationInput :: builder () ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_accelerate_configuration (Some ({ let v = v . accelerate_configuration ; let mut b = aws_sdk_s3 :: model :: AccelerateConfiguration :: builder () ; b = b . set_status (v . status . map (| v | aws_sdk_s3 :: model :: BucketAccelerateStatus :: from (v . as_str ()))) ; b . build () })) ; b = b . set_checksum_algorithm (v . checksum_algorithm . map (| v | aws_sdk_s3 :: model :: ChecksumAlgorithm :: from (v . as_str ()))) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_put_bucket_accelerate_configuration_output (output : aws_sdk_s3 :: output :: PutBucketAccelerateConfigurationOutput) -> s3d_smithy_codegen_server_s3 :: output :: PutBucketAccelerateConfigurationOutput { s3d_smithy_codegen_server_s3 :: output :: PutBucketAccelerateConfigurationOutput { } }

pub fn conv_to_client_delete_object_tagging_input (input : s3d_smithy_codegen_server_s3 :: input :: DeleteObjectTaggingInput) -> aws_sdk_s3 :: input :: DeleteObjectTaggingInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: DeleteObjectTaggingInput :: builder () ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_version_id (v . version_id . map (| v | v . to_owned ())) ; b = b . set_key (Some (v . key . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_delete_object_tagging_output (output : aws_sdk_s3 :: output :: DeleteObjectTaggingOutput) -> s3d_smithy_codegen_server_s3 :: output :: DeleteObjectTaggingOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: DeleteObjectTaggingOutput :: builder () ; b = b . set_version_id (v . version_id . map (| v | v . to_owned ())) ; b . build () } }

pub fn conv_to_client_delete_bucket_encryption_input (input : s3d_smithy_codegen_server_s3 :: input :: DeleteBucketEncryptionInput) -> aws_sdk_s3 :: input :: DeleteBucketEncryptionInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: DeleteBucketEncryptionInput :: builder () ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_delete_bucket_encryption_output (output : aws_sdk_s3 :: output :: DeleteBucketEncryptionOutput) -> s3d_smithy_codegen_server_s3 :: output :: DeleteBucketEncryptionOutput { s3d_smithy_codegen_server_s3 :: output :: DeleteBucketEncryptionOutput { } }

pub fn conv_to_client_get_bucket_ownership_controls_input (input : s3d_smithy_codegen_server_s3 :: input :: GetBucketOwnershipControlsInput) -> aws_sdk_s3 :: input :: GetBucketOwnershipControlsInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: GetBucketOwnershipControlsInput :: builder () ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_get_bucket_ownership_controls_output (output : aws_sdk_s3 :: output :: GetBucketOwnershipControlsOutput) -> s3d_smithy_codegen_server_s3 :: output :: GetBucketOwnershipControlsOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: GetBucketOwnershipControlsOutput :: builder () ; b = b . set_ownership_controls (v . ownership_controls . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: OwnershipControls :: builder () ; b = b . set_rules (v . rules . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: OwnershipControlsRule :: builder () ; b = b . set_object_ownership (v . object_ownership . map (| v | s3d_smithy_codegen_server_s3 :: model :: ObjectOwnership :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () . unwrap () }) . collect ())) ; b . build () . unwrap () })) ; b . build () } }

pub fn conv_to_client_get_object_attributes_input (input : s3d_smithy_codegen_server_s3 :: input :: GetObjectAttributesInput) -> aws_sdk_s3 :: input :: GetObjectAttributesInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: GetObjectAttributesInput :: builder () ; b = b . set_part_number_marker (v . part_number_marker . map (| v | v . to_owned ())) ; b = b . set_object_attributes (Some (v . object_attributes . into_iter () . map (| v | aws_sdk_s3 :: model :: ObjectAttributes :: from (v . as_str ())) . collect ())) ; b = b . set_version_id (v . version_id . map (| v | v . to_owned ())) ; b = b . set_max_parts (Some (v . max_parts . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_sse_customer_key (v . sse_customer_key . map (| v | v . to_owned ())) ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_request_payer (v . request_payer . map (| v | aws_sdk_s3 :: model :: RequestPayer :: from (v . as_str ()))) ; b = b . set_sse_customer_algorithm (v . sse_customer_algorithm . map (| v | v . to_owned ())) ; b = b . set_sse_customer_key_md5 (v . sse_customer_key_md5 . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_get_object_attributes_output (output : aws_sdk_s3 :: output :: GetObjectAttributesOutput) -> s3d_smithy_codegen_server_s3 :: output :: GetObjectAttributesOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: GetObjectAttributesOutput :: builder () ; b = b . set_storage_class (v . storage_class . map (| v | s3d_smithy_codegen_server_s3 :: model :: StorageClass :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_request_charged (v . request_charged . map (| v | s3d_smithy_codegen_server_s3 :: model :: RequestCharged :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_object_size (Some (v . object_size . to_owned ())) ; b = b . set_object_parts (v . object_parts . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: GetObjectAttributesParts :: builder () ; b = b . set_max_parts (Some (v . max_parts . to_owned ())) ; b = b . set_parts (v . parts . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: ObjectPart :: builder () ; b = b . set_checksum_crc32 (v . checksum_crc32 . map (| v | v . to_owned ())) ; b = b . set_part_number (Some (v . part_number . to_owned ())) ; b = b . set_checksum_crc32_c (v . checksum_crc32_c . map (| v | v . to_owned ())) ; b = b . set_checksum_sha1 (v . checksum_sha1 . map (| v | v . to_owned ())) ; b = b . set_checksum_sha256 (v . checksum_sha256 . map (| v | v . to_owned ())) ; b = b . set_size (Some (v . size . to_owned ())) ; b . build () }) . collect ())) ; b = b . set_total_parts_count (Some (v . total_parts_count . to_owned ())) ; b = b . set_is_truncated (Some (v . is_truncated . to_owned ())) ; b = b . set_next_part_number_marker (v . next_part_number_marker . map (| v | v . to_owned ())) ; b = b . set_part_number_marker (v . part_number_marker . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_delete_marker (Some (v . delete_marker . to_owned ())) ; b = b . set_version_id (v . version_id . map (| v | v . to_owned ())) ; b = b . set_e_tag (v . e_tag . map (| v | v . to_owned ())) ; b = b . set_checksum (v . checksum . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Checksum :: builder () ; b = b . set_checksum_crc32 (v . checksum_crc32 . map (| v | v . to_owned ())) ; b = b . set_checksum_sha1 (v . checksum_sha1 . map (| v | v . to_owned ())) ; b = b . set_checksum_sha256 (v . checksum_sha256 . map (| v | v . to_owned ())) ; b = b . set_checksum_crc32_c (v . checksum_crc32_c . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_last_modified (v . last_modified . map (| v | v . to_owned ())) ; b . build () } }

pub fn conv_to_client_put_bucket_lifecycle_configuration_input (input : s3d_smithy_codegen_server_s3 :: input :: PutBucketLifecycleConfigurationInput) -> aws_sdk_s3 :: input :: PutBucketLifecycleConfigurationInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: PutBucketLifecycleConfigurationInput :: builder () ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_lifecycle_configuration (v . lifecycle_configuration . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: BucketLifecycleConfiguration :: builder () ; b = b . set_rules (Some (v . rules . into_iter () . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: LifecycleRule :: builder () ; b = b . set_abort_incomplete_multipart_upload (v . abort_incomplete_multipart_upload . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: AbortIncompleteMultipartUpload :: builder () ; b = b . set_days_after_initiation (Some (v . days_after_initiation . to_owned ())) ; b . build () })) ; b = b . set_filter (v . filter . map (| v | { match v { s3d_smithy_codegen_server_s3 :: model :: LifecycleRuleFilter :: ObjectSizeLessThan (v) => aws_sdk_s3 :: model :: LifecycleRuleFilter :: ObjectSizeLessThan (v . to_owned ()) , s3d_smithy_codegen_server_s3 :: model :: LifecycleRuleFilter :: Prefix (v) => aws_sdk_s3 :: model :: LifecycleRuleFilter :: Prefix (v . to_owned ()) , s3d_smithy_codegen_server_s3 :: model :: LifecycleRuleFilter :: ObjectSizeGreaterThan (v) => aws_sdk_s3 :: model :: LifecycleRuleFilter :: ObjectSizeGreaterThan (v . to_owned ()) , s3d_smithy_codegen_server_s3 :: model :: LifecycleRuleFilter :: And (v) => aws_sdk_s3 :: model :: LifecycleRuleFilter :: And ({ let v = v ; let mut b = aws_sdk_s3 :: model :: LifecycleRuleAndOperator :: builder () ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_object_size_greater_than (Some (v . object_size_greater_than . to_owned ())) ; b = b . set_tags (v . tags . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: Tag :: builder () ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_value (Some (v . value . to_owned ())) ; b . build () }) . collect ())) ; b = b . set_object_size_less_than (Some (v . object_size_less_than . to_owned ())) ; b . build () }) , s3d_smithy_codegen_server_s3 :: model :: LifecycleRuleFilter :: Tag (v) => aws_sdk_s3 :: model :: LifecycleRuleFilter :: Tag ({ let v = v ; let mut b = aws_sdk_s3 :: model :: Tag :: builder () ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_value (Some (v . value . to_owned ())) ; b . build () }) , _ => panic ! ("unknown union value") , } })) ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_status (Some (aws_sdk_s3 :: model :: ExpirationStatus :: from (v . status . as_str ()))) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b = b . set_noncurrent_version_expiration (v . noncurrent_version_expiration . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: NoncurrentVersionExpiration :: builder () ; b = b . set_newer_noncurrent_versions (Some (v . newer_noncurrent_versions . to_owned ())) ; b = b . set_noncurrent_days (Some (v . noncurrent_days . to_owned ())) ; b . build () })) ; b = b . set_noncurrent_version_transitions (v . noncurrent_version_transitions . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: NoncurrentVersionTransition :: builder () ; b = b . set_newer_noncurrent_versions (Some (v . newer_noncurrent_versions . to_owned ())) ; b = b . set_noncurrent_days (Some (v . noncurrent_days . to_owned ())) ; b = b . set_storage_class (v . storage_class . map (| v | aws_sdk_s3 :: model :: TransitionStorageClass :: from (v . as_str ()))) ; b . build () }) . collect ())) ; b = b . set_expiration (v . expiration . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: LifecycleExpiration :: builder () ; b = b . set_days (Some (v . days . to_owned ())) ; b = b . set_date (v . date . map (| v | v . to_owned ())) ; b = b . set_expired_object_delete_marker (Some (v . expired_object_delete_marker . to_owned ())) ; b . build () })) ; b = b . set_transitions (v . transitions . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: Transition :: builder () ; b = b . set_date (v . date . map (| v | v . to_owned ())) ; b = b . set_days (Some (v . days . to_owned ())) ; b = b . set_storage_class (v . storage_class . map (| v | aws_sdk_s3 :: model :: TransitionStorageClass :: from (v . as_str ()))) ; b . build () }) . collect ())) ; b . build () }) . collect ())) ; b . build () })) ; b = b . set_checksum_algorithm (v . checksum_algorithm . map (| v | aws_sdk_s3 :: model :: ChecksumAlgorithm :: from (v . as_str ()))) ; b . build () . unwrap () } }

pub fn conv_from_client_put_bucket_lifecycle_configuration_output (output : aws_sdk_s3 :: output :: PutBucketLifecycleConfigurationOutput) -> s3d_smithy_codegen_server_s3 :: output :: PutBucketLifecycleConfigurationOutput { s3d_smithy_codegen_server_s3 :: output :: PutBucketLifecycleConfigurationOutput { } }

pub fn conv_to_client_get_object_tagging_input (input : s3d_smithy_codegen_server_s3 :: input :: GetObjectTaggingInput) -> aws_sdk_s3 :: input :: GetObjectTaggingInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: GetObjectTaggingInput :: builder () ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_version_id (v . version_id . map (| v | v . to_owned ())) ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_request_payer (v . request_payer . map (| v | aws_sdk_s3 :: model :: RequestPayer :: from (v . as_str ()))) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_get_object_tagging_output (output : aws_sdk_s3 :: output :: GetObjectTaggingOutput) -> s3d_smithy_codegen_server_s3 :: output :: GetObjectTaggingOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: GetObjectTaggingOutput :: builder () ; b = b . set_tag_set (v . tag_set . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Tag :: builder () ; b = b . set_key (v . key . map (| v | v . to_owned ())) ; b = b . set_value (v . value . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b = b . set_version_id (v . version_id . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_to_client_create_bucket_input (input : s3d_smithy_codegen_server_s3 :: input :: CreateBucketInput) -> aws_sdk_s3 :: input :: CreateBucketInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: CreateBucketInput :: builder () ; b = b . set_acl (v . acl . map (| v | aws_sdk_s3 :: model :: BucketCannedAcl :: from (v . as_str ()))) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_object_lock_enabled_for_bucket (Some (v . object_lock_enabled_for_bucket . to_owned ())) ; b = b . set_create_bucket_configuration (v . create_bucket_configuration . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: CreateBucketConfiguration :: builder () ; b = b . set_location_constraint (v . location_constraint . map (| v | aws_sdk_s3 :: model :: BucketLocationConstraint :: from (v . as_str ()))) ; b . build () })) ; b = b . set_grant_read_acp (v . grant_read_acp . map (| v | v . to_owned ())) ; b = b . set_object_ownership (v . object_ownership . map (| v | aws_sdk_s3 :: model :: ObjectOwnership :: from (v . as_str ()))) ; b = b . set_grant_full_control (v . grant_full_control . map (| v | v . to_owned ())) ; b = b . set_grant_read (v . grant_read . map (| v | v . to_owned ())) ; b = b . set_grant_write_acp (v . grant_write_acp . map (| v | v . to_owned ())) ; b = b . set_grant_write (v . grant_write . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_create_bucket_output (output : aws_sdk_s3 :: output :: CreateBucketOutput) -> s3d_smithy_codegen_server_s3 :: output :: CreateBucketOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: CreateBucketOutput :: builder () ; b = b . set_location (v . location . map (| v | v . to_owned ())) ; b . build () } }

pub fn conv_to_client_delete_bucket_cors_input (input : s3d_smithy_codegen_server_s3 :: input :: DeleteBucketCorsInput) -> aws_sdk_s3 :: input :: DeleteBucketCorsInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: DeleteBucketCorsInput :: builder () ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_delete_bucket_cors_output (output : aws_sdk_s3 :: output :: DeleteBucketCorsOutput) -> s3d_smithy_codegen_server_s3 :: output :: DeleteBucketCorsOutput { s3d_smithy_codegen_server_s3 :: output :: DeleteBucketCorsOutput { } }

pub fn conv_to_client_put_object_input (input : s3d_smithy_codegen_server_s3 :: input :: PutObjectInput) -> aws_sdk_s3 :: input :: PutObjectInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: PutObjectInput :: builder () ; b = b . set_tagging (v . tagging . map (| v | v . to_owned ())) ; b = b . set_grant_read (v . grant_read . map (| v | v . to_owned ())) ; b = b . set_checksum_crc32 (v . checksum_crc32 . map (| v | v . to_owned ())) ; b = b . set_checksum_crc32_c (v . checksum_crc32_c . map (| v | v . to_owned ())) ; b = b . set_content_md5 (v . content_md5 . map (| v | v . to_owned ())) ; b = b . set_cache_control (v . cache_control . map (| v | v . to_owned ())) ; b = b . set_storage_class (v . storage_class . map (| v | aws_sdk_s3 :: model :: StorageClass :: from (v . as_str ()))) ; b = b . set_bucket_key_enabled (Some (v . bucket_key_enabled . to_owned ())) ; b = b . set_body (Some (v . body)) ; b = b . set_content_type (v . content_type . map (| v | v . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_grant_full_control (v . grant_full_control . map (| v | v . to_owned ())) ; b = b . set_request_payer (v . request_payer . map (| v | aws_sdk_s3 :: model :: RequestPayer :: from (v . as_str ()))) ; b = b . set_ssekms_key_id (v . ssekms_key_id . map (| v | v . to_owned ())) ; b = b . set_content_length (Some (v . content_length . to_owned ())) ; b = b . set_content_language (v . content_language . map (| v | v . to_owned ())) ; b = b . set_acl (v . acl . map (| v | aws_sdk_s3 :: model :: ObjectCannedAcl :: from (v . as_str ()))) ; b = b . set_grant_read_acp (v . grant_read_acp . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_checksum_sha1 (v . checksum_sha1 . map (| v | v . to_owned ())) ; b = b . set_sse_customer_algorithm (v . sse_customer_algorithm . map (| v | v . to_owned ())) ; b = b . set_checksum_sha256 (v . checksum_sha256 . map (| v | v . to_owned ())) ; b = b . set_ssekms_encryption_context (v . ssekms_encryption_context . map (| v | v . to_owned ())) ; b = b . set_server_side_encryption (v . server_side_encryption . map (| v | aws_sdk_s3 :: model :: ServerSideEncryption :: from (v . as_str ()))) ; b = b . set_object_lock_mode (v . object_lock_mode . map (| v | aws_sdk_s3 :: model :: ObjectLockMode :: from (v . as_str ()))) ; b = b . set_sse_customer_key (v . sse_customer_key . map (| v | v . to_owned ())) ; b = b . set_grant_write_acp (v . grant_write_acp . map (| v | v . to_owned ())) ; b = b . set_object_lock_retain_until_date (v . object_lock_retain_until_date . map (| v | v . to_owned ())) ; b = b . set_website_redirect_location (v . website_redirect_location . map (| v | v . to_owned ())) ; b = b . set_content_encoding (v . content_encoding . map (| v | v . to_owned ())) ; b = b . set_content_disposition (v . content_disposition . map (| v | v . to_owned ())) ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_metadata (v . metadata . map (| v | v . to_owned ())) ; b = b . set_object_lock_legal_hold_status (v . object_lock_legal_hold_status . map (| v | aws_sdk_s3 :: model :: ObjectLockLegalHoldStatus :: from (v . as_str ()))) ; b = b . set_expires (v . expires . map (| v | v . to_owned ())) ; b = b . set_sse_customer_key_md5 (v . sse_customer_key_md5 . map (| v | v . to_owned ())) ; b = b . set_checksum_algorithm (v . checksum_algorithm . map (| v | aws_sdk_s3 :: model :: ChecksumAlgorithm :: from (v . as_str ()))) ; b . build () . unwrap () } }

pub fn conv_from_client_put_object_output (output : aws_sdk_s3 :: output :: PutObjectOutput) -> s3d_smithy_codegen_server_s3 :: output :: PutObjectOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: PutObjectOutput :: builder () ; b = b . set_ssekms_key_id (v . ssekms_key_id . map (| v | v . to_owned ())) ; b = b . set_server_side_encryption (v . server_side_encryption . map (| v | s3d_smithy_codegen_server_s3 :: model :: ServerSideEncryption :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_version_id (v . version_id . map (| v | v . to_owned ())) ; b = b . set_bucket_key_enabled (Some (v . bucket_key_enabled . to_owned ())) ; b = b . set_checksum_crc32 (v . checksum_crc32 . map (| v | v . to_owned ())) ; b = b . set_e_tag (v . e_tag . map (| v | v . to_owned ())) ; b = b . set_ssekms_encryption_context (v . ssekms_encryption_context . map (| v | v . to_owned ())) ; b = b . set_sse_customer_algorithm (v . sse_customer_algorithm . map (| v | v . to_owned ())) ; b = b . set_expiration (v . expiration . map (| v | v . to_owned ())) ; b = b . set_checksum_crc32_c (v . checksum_crc32_c . map (| v | v . to_owned ())) ; b = b . set_checksum_sha1 (v . checksum_sha1 . map (| v | v . to_owned ())) ; b = b . set_checksum_sha256 (v . checksum_sha256 . map (| v | v . to_owned ())) ; b = b . set_request_charged (v . request_charged . map (| v | s3d_smithy_codegen_server_s3 :: model :: RequestCharged :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_sse_customer_key_md5 (v . sse_customer_key_md5 . map (| v | v . to_owned ())) ; b . build () } }

pub fn conv_to_client_upload_part_input (input : s3d_smithy_codegen_server_s3 :: input :: UploadPartInput) -> aws_sdk_s3 :: input :: UploadPartInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: UploadPartInput :: builder () ; b = b . set_checksum_sha256 (v . checksum_sha256 . map (| v | v . to_owned ())) ; b = b . set_sse_customer_key (v . sse_customer_key . map (| v | v . to_owned ())) ; b = b . set_upload_id (Some (v . upload_id . to_owned ())) ; b = b . set_content_length (Some (v . content_length . to_owned ())) ; b = b . set_part_number (Some (v . part_number . to_owned ())) ; b = b . set_sse_customer_algorithm (v . sse_customer_algorithm . map (| v | v . to_owned ())) ; b = b . set_content_md5 (v . content_md5 . map (| v | v . to_owned ())) ; b = b . set_sse_customer_key_md5 (v . sse_customer_key_md5 . map (| v | v . to_owned ())) ; b = b . set_checksum_sha1 (v . checksum_sha1 . map (| v | v . to_owned ())) ; b = b . set_body (Some (v . body)) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_checksum_crc32 (v . checksum_crc32 . map (| v | v . to_owned ())) ; b = b . set_checksum_crc32_c (v . checksum_crc32_c . map (| v | v . to_owned ())) ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_request_payer (v . request_payer . map (| v | aws_sdk_s3 :: model :: RequestPayer :: from (v . as_str ()))) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_checksum_algorithm (v . checksum_algorithm . map (| v | aws_sdk_s3 :: model :: ChecksumAlgorithm :: from (v . as_str ()))) ; b . build () . unwrap () } }

pub fn conv_from_client_upload_part_output (output : aws_sdk_s3 :: output :: UploadPartOutput) -> s3d_smithy_codegen_server_s3 :: output :: UploadPartOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: UploadPartOutput :: builder () ; b = b . set_bucket_key_enabled (Some (v . bucket_key_enabled . to_owned ())) ; b = b . set_server_side_encryption (v . server_side_encryption . map (| v | s3d_smithy_codegen_server_s3 :: model :: ServerSideEncryption :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_checksum_sha256 (v . checksum_sha256 . map (| v | v . to_owned ())) ; b = b . set_checksum_crc32 (v . checksum_crc32 . map (| v | v . to_owned ())) ; b = b . set_checksum_sha1 (v . checksum_sha1 . map (| v | v . to_owned ())) ; b = b . set_request_charged (v . request_charged . map (| v | s3d_smithy_codegen_server_s3 :: model :: RequestCharged :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_checksum_crc32_c (v . checksum_crc32_c . map (| v | v . to_owned ())) ; b = b . set_e_tag (v . e_tag . map (| v | v . to_owned ())) ; b = b . set_sse_customer_algorithm (v . sse_customer_algorithm . map (| v | v . to_owned ())) ; b = b . set_sse_customer_key_md5 (v . sse_customer_key_md5 . map (| v | v . to_owned ())) ; b = b . set_ssekms_key_id (v . ssekms_key_id . map (| v | v . to_owned ())) ; b . build () } }

pub fn conv_to_client_put_object_retention_input (input : s3d_smithy_codegen_server_s3 :: input :: PutObjectRetentionInput) -> aws_sdk_s3 :: input :: PutObjectRetentionInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: PutObjectRetentionInput :: builder () ; b = b . set_bypass_governance_retention (Some (v . bypass_governance_retention . to_owned ())) ; b = b . set_checksum_algorithm (v . checksum_algorithm . map (| v | aws_sdk_s3 :: model :: ChecksumAlgorithm :: from (v . as_str ()))) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_version_id (v . version_id . map (| v | v . to_owned ())) ; b = b . set_content_md5 (v . content_md5 . map (| v | v . to_owned ())) ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_retention (v . retention . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: ObjectLockRetention :: builder () ; b = b . set_mode (v . mode . map (| v | aws_sdk_s3 :: model :: ObjectLockRetentionMode :: from (v . as_str ()))) ; b = b . set_retain_until_date (v . retain_until_date . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_request_payer (v . request_payer . map (| v | aws_sdk_s3 :: model :: RequestPayer :: from (v . as_str ()))) ; b . build () . unwrap () } }

pub fn conv_from_client_put_object_retention_output (output : aws_sdk_s3 :: output :: PutObjectRetentionOutput) -> s3d_smithy_codegen_server_s3 :: output :: PutObjectRetentionOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: PutObjectRetentionOutput :: builder () ; b = b . set_request_charged (v . request_charged . map (| v | s3d_smithy_codegen_server_s3 :: model :: RequestCharged :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () } }

pub fn conv_to_client_put_object_acl_input (input : s3d_smithy_codegen_server_s3 :: input :: PutObjectAclInput) -> aws_sdk_s3 :: input :: PutObjectAclInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: PutObjectAclInput :: builder () ; b = b . set_checksum_algorithm (v . checksum_algorithm . map (| v | aws_sdk_s3 :: model :: ChecksumAlgorithm :: from (v . as_str ()))) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_content_md5 (v . content_md5 . map (| v | v . to_owned ())) ; b = b . set_grant_full_control (v . grant_full_control . map (| v | v . to_owned ())) ; b = b . set_grant_write_acp (v . grant_write_acp . map (| v | v . to_owned ())) ; b = b . set_grant_write (v . grant_write . map (| v | v . to_owned ())) ; b = b . set_access_control_policy (v . access_control_policy . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: AccessControlPolicy :: builder () ; b = b . set_grants (v . grants . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: Grant :: builder () ; b = b . set_grantee (v . grantee . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: Grantee :: builder () ; b = b . set_type (Some (aws_sdk_s3 :: model :: Type :: from (v . r#type . as_str ()))) ; b = b . set_uri (v . uri . map (| v | v . to_owned ())) ; b = b . set_display_name (v . display_name . map (| v | v . to_owned ())) ; b = b . set_email_address (v . email_address . map (| v | v . to_owned ())) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_permission (v . permission . map (| v | aws_sdk_s3 :: model :: Permission :: from (v . as_str ()))) ; b . build () }) . collect ())) ; b = b . set_owner (v . owner . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: Owner :: builder () ; b = b . set_display_name (v . display_name . map (| v | v . to_owned ())) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b . build () })) ; b . build () })) ; b = b . set_request_payer (v . request_payer . map (| v | aws_sdk_s3 :: model :: RequestPayer :: from (v . as_str ()))) ; b = b . set_grant_read_acp (v . grant_read_acp . map (| v | v . to_owned ())) ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_version_id (v . version_id . map (| v | v . to_owned ())) ; b = b . set_acl (v . acl . map (| v | aws_sdk_s3 :: model :: ObjectCannedAcl :: from (v . as_str ()))) ; b = b . set_grant_read (v . grant_read . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_put_object_acl_output (output : aws_sdk_s3 :: output :: PutObjectAclOutput) -> s3d_smithy_codegen_server_s3 :: output :: PutObjectAclOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: PutObjectAclOutput :: builder () ; b = b . set_request_charged (v . request_charged . map (| v | s3d_smithy_codegen_server_s3 :: model :: RequestCharged :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () } }

pub fn conv_to_client_put_object_tagging_input (input : s3d_smithy_codegen_server_s3 :: input :: PutObjectTaggingInput) -> aws_sdk_s3 :: input :: PutObjectTaggingInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: PutObjectTaggingInput :: builder () ; b = b . set_tagging (Some ({ let v = v . tagging ; let mut b = aws_sdk_s3 :: model :: Tagging :: builder () ; b = b . set_tag_set (Some (v . tag_set . into_iter () . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: Tag :: builder () ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_value (Some (v . value . to_owned ())) ; b . build () }) . collect ())) ; b . build () })) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_checksum_algorithm (v . checksum_algorithm . map (| v | aws_sdk_s3 :: model :: ChecksumAlgorithm :: from (v . as_str ()))) ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_version_id (v . version_id . map (| v | v . to_owned ())) ; b = b . set_content_md5 (v . content_md5 . map (| v | v . to_owned ())) ; b = b . set_request_payer (v . request_payer . map (| v | aws_sdk_s3 :: model :: RequestPayer :: from (v . as_str ()))) ; b . build () . unwrap () } }

pub fn conv_from_client_put_object_tagging_output (output : aws_sdk_s3 :: output :: PutObjectTaggingOutput) -> s3d_smithy_codegen_server_s3 :: output :: PutObjectTaggingOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: PutObjectTaggingOutput :: builder () ; b = b . set_version_id (v . version_id . map (| v | v . to_owned ())) ; b . build () } }

pub fn conv_to_client_upload_part_copy_input (input : s3d_smithy_codegen_server_s3 :: input :: UploadPartCopyInput) -> aws_sdk_s3 :: input :: UploadPartCopyInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: UploadPartCopyInput :: builder () ; b = b . set_copy_source_range (v . copy_source_range . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_copy_source_sse_customer_key_md5 (v . copy_source_sse_customer_key_md5 . map (| v | v . to_owned ())) ; b = b . set_sse_customer_key_md5 (v . sse_customer_key_md5 . map (| v | v . to_owned ())) ; b = b . set_expected_source_bucket_owner (v . expected_source_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_copy_source (Some (v . copy_source . to_owned ())) ; b = b . set_copy_source_sse_customer_algorithm (v . copy_source_sse_customer_algorithm . map (| v | v . to_owned ())) ; b = b . set_sse_customer_key (v . sse_customer_key . map (| v | v . to_owned ())) ; b = b . set_copy_source_if_modified_since (v . copy_source_if_modified_since . map (| v | v . to_owned ())) ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_sse_customer_algorithm (v . sse_customer_algorithm . map (| v | v . to_owned ())) ; b = b . set_copy_source_if_none_match (v . copy_source_if_none_match . map (| v | v . to_owned ())) ; b = b . set_copy_source_sse_customer_key (v . copy_source_sse_customer_key . map (| v | v . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_copy_source_if_match (v . copy_source_if_match . map (| v | v . to_owned ())) ; b = b . set_request_payer (v . request_payer . map (| v | aws_sdk_s3 :: model :: RequestPayer :: from (v . as_str ()))) ; b = b . set_copy_source_if_unmodified_since (v . copy_source_if_unmodified_since . map (| v | v . to_owned ())) ; b = b . set_part_number (Some (v . part_number . to_owned ())) ; b = b . set_upload_id (Some (v . upload_id . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_upload_part_copy_output (output : aws_sdk_s3 :: output :: UploadPartCopyOutput) -> s3d_smithy_codegen_server_s3 :: output :: UploadPartCopyOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: UploadPartCopyOutput :: builder () ; b = b . set_copy_part_result (v . copy_part_result . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: CopyPartResult :: builder () ; b = b . set_checksum_sha1 (v . checksum_sha1 . map (| v | v . to_owned ())) ; b = b . set_last_modified (v . last_modified . map (| v | v . to_owned ())) ; b = b . set_checksum_crc32 (v . checksum_crc32 . map (| v | v . to_owned ())) ; b = b . set_checksum_crc32_c (v . checksum_crc32_c . map (| v | v . to_owned ())) ; b = b . set_checksum_sha256 (v . checksum_sha256 . map (| v | v . to_owned ())) ; b = b . set_e_tag (v . e_tag . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_sse_customer_key_md5 (v . sse_customer_key_md5 . map (| v | v . to_owned ())) ; b = b . set_sse_customer_algorithm (v . sse_customer_algorithm . map (| v | v . to_owned ())) ; b = b . set_copy_source_version_id (v . copy_source_version_id . map (| v | v . to_owned ())) ; b = b . set_ssekms_key_id (v . ssekms_key_id . map (| v | v . to_owned ())) ; b = b . set_request_charged (v . request_charged . map (| v | s3d_smithy_codegen_server_s3 :: model :: RequestCharged :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_server_side_encryption (v . server_side_encryption . map (| v | s3d_smithy_codegen_server_s3 :: model :: ServerSideEncryption :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_bucket_key_enabled (Some (v . bucket_key_enabled . to_owned ())) ; b . build () } }

pub fn conv_to_client_put_bucket_notification_configuration_input (input : s3d_smithy_codegen_server_s3 :: input :: PutBucketNotificationConfigurationInput) -> aws_sdk_s3 :: input :: PutBucketNotificationConfigurationInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: PutBucketNotificationConfigurationInput :: builder () ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_skip_destination_validation (Some (v . skip_destination_validation . to_owned ())) ; b = b . set_notification_configuration (Some ({ let v = v . notification_configuration ; let mut b = aws_sdk_s3 :: model :: NotificationConfiguration :: builder () ; b = b . set_topic_configurations (v . topic_configurations . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: TopicConfiguration :: builder () ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b = b . set_filter (v . filter . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: NotificationConfigurationFilter :: builder () ; b = b . set_key (v . key . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: S3KeyFilter :: builder () ; b = b . set_filter_rules (v . filter_rules . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: FilterRule :: builder () ; b = b . set_name (v . name . map (| v | aws_sdk_s3 :: model :: FilterRuleName :: from (v . as_str ()))) ; b = b . set_value (v . value . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b . build () })) ; b . build () })) ; b = b . set_topic_arn (Some (v . topic_arn . to_owned ())) ; b = b . set_events (Some (v . events . into_iter () . map (| v | aws_sdk_s3 :: model :: Event :: from (v . as_str ())) . collect ())) ; b . build () }) . collect ())) ; b = b . set_event_bridge_configuration (v . event_bridge_configuration . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: EventBridgeConfiguration :: builder () ; b . build () })) ; b = b . set_lambda_function_configurations (v . lambda_function_configurations . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: LambdaFunctionConfiguration :: builder () ; b = b . set_events (Some (v . events . into_iter () . map (| v | aws_sdk_s3 :: model :: Event :: from (v . as_str ())) . collect ())) ; b = b . set_lambda_function_arn (Some (v . lambda_function_arn . to_owned ())) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b = b . set_filter (v . filter . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: NotificationConfigurationFilter :: builder () ; b = b . set_key (v . key . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: S3KeyFilter :: builder () ; b = b . set_filter_rules (v . filter_rules . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: FilterRule :: builder () ; b = b . set_name (v . name . map (| v | aws_sdk_s3 :: model :: FilterRuleName :: from (v . as_str ()))) ; b = b . set_value (v . value . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b . build () })) ; b . build () })) ; b . build () }) . collect ())) ; b = b . set_queue_configurations (v . queue_configurations . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: QueueConfiguration :: builder () ; b = b . set_events (Some (v . events . into_iter () . map (| v | aws_sdk_s3 :: model :: Event :: from (v . as_str ())) . collect ())) ; b = b . set_filter (v . filter . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: NotificationConfigurationFilter :: builder () ; b = b . set_key (v . key . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: S3KeyFilter :: builder () ; b = b . set_filter_rules (v . filter_rules . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: FilterRule :: builder () ; b = b . set_name (v . name . map (| v | aws_sdk_s3 :: model :: FilterRuleName :: from (v . as_str ()))) ; b = b . set_value (v . value . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b . build () })) ; b . build () })) ; b = b . set_queue_arn (Some (v . queue_arn . to_owned ())) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b . build () })) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_put_bucket_notification_configuration_output (output : aws_sdk_s3 :: output :: PutBucketNotificationConfigurationOutput) -> s3d_smithy_codegen_server_s3 :: output :: PutBucketNotificationConfigurationOutput { s3d_smithy_codegen_server_s3 :: output :: PutBucketNotificationConfigurationOutput { } }

pub fn conv_to_client_delete_object_input (input : s3d_smithy_codegen_server_s3 :: input :: DeleteObjectInput) -> aws_sdk_s3 :: input :: DeleteObjectInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: DeleteObjectInput :: builder () ; b = b . set_request_payer (v . request_payer . map (| v | aws_sdk_s3 :: model :: RequestPayer :: from (v . as_str ()))) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_bypass_governance_retention (Some (v . bypass_governance_retention . to_owned ())) ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_mfa (v . mfa . map (| v | v . to_owned ())) ; b = b . set_version_id (v . version_id . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_delete_object_output (output : aws_sdk_s3 :: output :: DeleteObjectOutput) -> s3d_smithy_codegen_server_s3 :: output :: DeleteObjectOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: DeleteObjectOutput :: builder () ; b = b . set_delete_marker (Some (v . delete_marker . to_owned ())) ; b = b . set_request_charged (v . request_charged . map (| v | s3d_smithy_codegen_server_s3 :: model :: RequestCharged :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_version_id (v . version_id . map (| v | v . to_owned ())) ; b . build () } }

pub fn conv_to_client_abort_multipart_upload_input (input : s3d_smithy_codegen_server_s3 :: input :: AbortMultipartUploadInput) -> aws_sdk_s3 :: input :: AbortMultipartUploadInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: AbortMultipartUploadInput :: builder () ; b = b . set_request_payer (v . request_payer . map (| v | aws_sdk_s3 :: model :: RequestPayer :: from (v . as_str ()))) ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_upload_id (Some (v . upload_id . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_abort_multipart_upload_output (output : aws_sdk_s3 :: output :: AbortMultipartUploadOutput) -> s3d_smithy_codegen_server_s3 :: output :: AbortMultipartUploadOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: AbortMultipartUploadOutput :: builder () ; b = b . set_request_charged (v . request_charged . map (| v | s3d_smithy_codegen_server_s3 :: model :: RequestCharged :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () } }

pub fn conv_to_client_get_bucket_intelligent_tiering_configuration_input (input : s3d_smithy_codegen_server_s3 :: input :: GetBucketIntelligentTieringConfigurationInput) -> aws_sdk_s3 :: input :: GetBucketIntelligentTieringConfigurationInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: GetBucketIntelligentTieringConfigurationInput :: builder () ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_id (Some (v . id . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_get_bucket_intelligent_tiering_configuration_output (output : aws_sdk_s3 :: output :: GetBucketIntelligentTieringConfigurationOutput) -> s3d_smithy_codegen_server_s3 :: output :: GetBucketIntelligentTieringConfigurationOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: GetBucketIntelligentTieringConfigurationOutput :: builder () ; b = b . set_intelligent_tiering_configuration (v . intelligent_tiering_configuration . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: IntelligentTieringConfiguration :: builder () ; b = b . set_tierings (v . tierings . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Tiering :: builder () ; b = b . set_days (Some (v . days . to_owned ())) ; b = b . set_access_tier (v . access_tier . map (| v | s3d_smithy_codegen_server_s3 :: model :: IntelligentTieringAccessTier :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () . unwrap () }) . collect ())) ; b = b . set_status (v . status . map (| v | s3d_smithy_codegen_server_s3 :: model :: IntelligentTieringStatus :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_filter (v . filter . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: IntelligentTieringFilter :: builder () ; b = b . set_and (v . and . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: IntelligentTieringAndOperator :: builder () ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_tags (v . tags . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Tag :: builder () ; b = b . set_key (v . key . map (| v | v . to_owned ())) ; b = b . set_value (v . value . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b . build () })) ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_tag (v . tag . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Tag :: builder () ; b = b . set_key (v . key . map (| v | v . to_owned ())) ; b = b . set_value (v . value . map (| v | v . to_owned ())) ; b . build () })) ; b . build () })) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b . build () . unwrap () })) ; b . build () } }

pub fn conv_to_client_put_bucket_metrics_configuration_input (input : s3d_smithy_codegen_server_s3 :: input :: PutBucketMetricsConfigurationInput) -> aws_sdk_s3 :: input :: PutBucketMetricsConfigurationInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: PutBucketMetricsConfigurationInput :: builder () ; b = b . set_id (Some (v . id . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_metrics_configuration (Some ({ let v = v . metrics_configuration ; let mut b = aws_sdk_s3 :: model :: MetricsConfiguration :: builder () ; b = b . set_filter (v . filter . map (| v | { match v { s3d_smithy_codegen_server_s3 :: model :: MetricsFilter :: And (v) => aws_sdk_s3 :: model :: MetricsFilter :: And ({ let v = v ; let mut b = aws_sdk_s3 :: model :: MetricsAndOperator :: builder () ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_tags (v . tags . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: Tag :: builder () ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_value (Some (v . value . to_owned ())) ; b . build () }) . collect ())) ; b = b . set_access_point_arn (v . access_point_arn . map (| v | v . to_owned ())) ; b . build () }) , s3d_smithy_codegen_server_s3 :: model :: MetricsFilter :: AccessPointArn (v) => aws_sdk_s3 :: model :: MetricsFilter :: AccessPointArn (v . to_owned ()) , s3d_smithy_codegen_server_s3 :: model :: MetricsFilter :: Tag (v) => aws_sdk_s3 :: model :: MetricsFilter :: Tag ({ let v = v ; let mut b = aws_sdk_s3 :: model :: Tag :: builder () ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_value (Some (v . value . to_owned ())) ; b . build () }) , s3d_smithy_codegen_server_s3 :: model :: MetricsFilter :: Prefix (v) => aws_sdk_s3 :: model :: MetricsFilter :: Prefix (v . to_owned ()) , _ => panic ! ("unknown union value") , } })) ; b = b . set_id (Some (v . id . to_owned ())) ; b . build () })) ; b . build () . unwrap () } }

pub fn conv_from_client_put_bucket_metrics_configuration_output (output : aws_sdk_s3 :: output :: PutBucketMetricsConfigurationOutput) -> s3d_smithy_codegen_server_s3 :: output :: PutBucketMetricsConfigurationOutput { s3d_smithy_codegen_server_s3 :: output :: PutBucketMetricsConfigurationOutput { } }

pub fn conv_to_client_get_object_retention_input (input : s3d_smithy_codegen_server_s3 :: input :: GetObjectRetentionInput) -> aws_sdk_s3 :: input :: GetObjectRetentionInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: GetObjectRetentionInput :: builder () ; b = b . set_version_id (v . version_id . map (| v | v . to_owned ())) ; b = b . set_request_payer (v . request_payer . map (| v | aws_sdk_s3 :: model :: RequestPayer :: from (v . as_str ()))) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_key (Some (v . key . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_get_object_retention_output (output : aws_sdk_s3 :: output :: GetObjectRetentionOutput) -> s3d_smithy_codegen_server_s3 :: output :: GetObjectRetentionOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: GetObjectRetentionOutput :: builder () ; b = b . set_retention (v . retention . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: ObjectLockRetention :: builder () ; b = b . set_mode (v . mode . map (| v | s3d_smithy_codegen_server_s3 :: model :: ObjectLockRetentionMode :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_retain_until_date (v . retain_until_date . map (| v | v . to_owned ())) ; b . build () })) ; b . build () } }

pub fn conv_to_client_list_object_versions_input (input : s3d_smithy_codegen_server_s3 :: input :: ListObjectVersionsInput) -> aws_sdk_s3 :: input :: ListObjectVersionsInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: ListObjectVersionsInput :: builder () ; b = b . set_key_marker (v . key_marker . map (| v | v . to_owned ())) ; b = b . set_version_id_marker (v . version_id_marker . map (| v | v . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_delimiter (v . delimiter . map (| v | v . to_owned ())) ; b = b . set_max_keys (Some (v . max_keys . to_owned ())) ; b = b . set_encoding_type (v . encoding_type . map (| v | aws_sdk_s3 :: model :: EncodingType :: from (v . as_str ()))) ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_list_object_versions_output (output : aws_sdk_s3 :: output :: ListObjectVersionsOutput) -> s3d_smithy_codegen_server_s3 :: output :: ListObjectVersionsOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: ListObjectVersionsOutput :: builder () ; b = b . set_delimiter (v . delimiter . map (| v | v . to_owned ())) ; b = b . set_versions (v . versions . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: ObjectVersion :: builder () ; b = b . set_checksum_algorithm (v . checksum_algorithm . map (| v | v . into_iter () . map (| v | s3d_smithy_codegen_server_s3 :: model :: ChecksumAlgorithm :: from_str (v . as_str ()) . expect ("todo guy")) . collect ())) ; b = b . set_is_latest (Some (v . is_latest . to_owned ())) ; b = b . set_storage_class (v . storage_class . map (| v | s3d_smithy_codegen_server_s3 :: model :: ObjectVersionStorageClass :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_version_id (v . version_id . map (| v | v . to_owned ())) ; b = b . set_last_modified (v . last_modified . map (| v | v . to_owned ())) ; b = b . set_key (v . key . map (| v | v . to_owned ())) ; b = b . set_owner (v . owner . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Owner :: builder () ; b = b . set_display_name (v . display_name . map (| v | v . to_owned ())) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_size (Some (v . size . to_owned ())) ; b = b . set_e_tag (v . e_tag . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_key_marker (v . key_marker . map (| v | v . to_owned ())) ; b = b . set_common_prefixes (v . common_prefixes . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: CommonPrefix :: builder () ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b = b . set_delete_markers (v . delete_markers . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: DeleteMarkerEntry :: builder () ; b = b . set_is_latest (Some (v . is_latest . to_owned ())) ; b = b . set_version_id (v . version_id . map (| v | v . to_owned ())) ; b = b . set_last_modified (v . last_modified . map (| v | v . to_owned ())) ; b = b . set_owner (v . owner . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Owner :: builder () ; b = b . set_display_name (v . display_name . map (| v | v . to_owned ())) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_key (v . key . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b = b . set_name (v . name . map (| v | v . to_owned ())) ; b = b . set_next_key_marker (v . next_key_marker . map (| v | v . to_owned ())) ; b = b . set_next_version_id_marker (v . next_version_id_marker . map (| v | v . to_owned ())) ; b = b . set_is_truncated (Some (v . is_truncated . to_owned ())) ; b = b . set_version_id_marker (v . version_id_marker . map (| v | v . to_owned ())) ; b = b . set_max_keys (Some (v . max_keys . to_owned ())) ; b = b . set_encoding_type (v . encoding_type . map (| v | s3d_smithy_codegen_server_s3 :: model :: EncodingType :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () } }

pub fn conv_to_client_delete_bucket_policy_input (input : s3d_smithy_codegen_server_s3 :: input :: DeleteBucketPolicyInput) -> aws_sdk_s3 :: input :: DeleteBucketPolicyInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: DeleteBucketPolicyInput :: builder () ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_delete_bucket_policy_output (output : aws_sdk_s3 :: output :: DeleteBucketPolicyOutput) -> s3d_smithy_codegen_server_s3 :: output :: DeleteBucketPolicyOutput { s3d_smithy_codegen_server_s3 :: output :: DeleteBucketPolicyOutput { } }

pub fn conv_to_client_put_object_lock_configuration_input (input : s3d_smithy_codegen_server_s3 :: input :: PutObjectLockConfigurationInput) -> aws_sdk_s3 :: input :: PutObjectLockConfigurationInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: PutObjectLockConfigurationInput :: builder () ; b = b . set_request_payer (v . request_payer . map (| v | aws_sdk_s3 :: model :: RequestPayer :: from (v . as_str ()))) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_token (v . token . map (| v | v . to_owned ())) ; b = b . set_checksum_algorithm (v . checksum_algorithm . map (| v | aws_sdk_s3 :: model :: ChecksumAlgorithm :: from (v . as_str ()))) ; b = b . set_object_lock_configuration (v . object_lock_configuration . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: ObjectLockConfiguration :: builder () ; b = b . set_rule (v . rule . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: ObjectLockRule :: builder () ; b = b . set_default_retention (v . default_retention . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: DefaultRetention :: builder () ; b = b . set_mode (v . mode . map (| v | aws_sdk_s3 :: model :: ObjectLockRetentionMode :: from (v . as_str ()))) ; b = b . set_years (Some (v . years . to_owned ())) ; b = b . set_days (Some (v . days . to_owned ())) ; b . build () })) ; b . build () })) ; b = b . set_object_lock_enabled (v . object_lock_enabled . map (| v | aws_sdk_s3 :: model :: ObjectLockEnabled :: from (v . as_str ()))) ; b . build () })) ; b = b . set_content_md5 (v . content_md5 . map (| v | v . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_put_object_lock_configuration_output (output : aws_sdk_s3 :: output :: PutObjectLockConfigurationOutput) -> s3d_smithy_codegen_server_s3 :: output :: PutObjectLockConfigurationOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: PutObjectLockConfigurationOutput :: builder () ; b = b . set_request_charged (v . request_charged . map (| v | s3d_smithy_codegen_server_s3 :: model :: RequestCharged :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () } }

pub fn conv_to_client_list_buckets_input (input : s3d_smithy_codegen_server_s3 :: input :: ListBucketsInput) -> aws_sdk_s3 :: input :: ListBucketsInput { aws_sdk_s3 :: input :: ListBucketsInput :: builder () . build () . unwrap () }

pub fn conv_from_client_list_buckets_output (output : aws_sdk_s3 :: output :: ListBucketsOutput) -> s3d_smithy_codegen_server_s3 :: output :: ListBucketsOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: ListBucketsOutput :: builder () ; b = b . set_buckets (v . buckets . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Bucket :: builder () ; b = b . set_creation_date (v . creation_date . map (| v | v . to_owned ())) ; b = b . set_name (v . name . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b = b . set_owner (v . owner . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Owner :: builder () ; b = b . set_display_name (v . display_name . map (| v | v . to_owned ())) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b . build () })) ; b . build () } }

pub fn conv_to_client_create_multipart_upload_input (input : s3d_smithy_codegen_server_s3 :: input :: CreateMultipartUploadInput) -> aws_sdk_s3 :: input :: CreateMultipartUploadInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: CreateMultipartUploadInput :: builder () ; b = b . set_content_disposition (v . content_disposition . map (| v | v . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_cache_control (v . cache_control . map (| v | v . to_owned ())) ; b = b . set_tagging (v . tagging . map (| v | v . to_owned ())) ; b = b . set_ssekms_key_id (v . ssekms_key_id . map (| v | v . to_owned ())) ; b = b . set_acl (v . acl . map (| v | aws_sdk_s3 :: model :: ObjectCannedAcl :: from (v . as_str ()))) ; b = b . set_content_encoding (v . content_encoding . map (| v | v . to_owned ())) ; b = b . set_object_lock_legal_hold_status (v . object_lock_legal_hold_status . map (| v | aws_sdk_s3 :: model :: ObjectLockLegalHoldStatus :: from (v . as_str ()))) ; b = b . set_checksum_algorithm (v . checksum_algorithm . map (| v | aws_sdk_s3 :: model :: ChecksumAlgorithm :: from (v . as_str ()))) ; b = b . set_expires (v . expires . map (| v | v . to_owned ())) ; b = b . set_content_language (v . content_language . map (| v | v . to_owned ())) ; b = b . set_object_lock_retain_until_date (v . object_lock_retain_until_date . map (| v | v . to_owned ())) ; b = b . set_grant_write_acp (v . grant_write_acp . map (| v | v . to_owned ())) ; b = b . set_storage_class (v . storage_class . map (| v | aws_sdk_s3 :: model :: StorageClass :: from (v . as_str ()))) ; b = b . set_sse_customer_algorithm (v . sse_customer_algorithm . map (| v | v . to_owned ())) ; b = b . set_sse_customer_key_md5 (v . sse_customer_key_md5 . map (| v | v . to_owned ())) ; b = b . set_grant_full_control (v . grant_full_control . map (| v | v . to_owned ())) ; b = b . set_grant_read (v . grant_read . map (| v | v . to_owned ())) ; b = b . set_object_lock_mode (v . object_lock_mode . map (| v | aws_sdk_s3 :: model :: ObjectLockMode :: from (v . as_str ()))) ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_server_side_encryption (v . server_side_encryption . map (| v | aws_sdk_s3 :: model :: ServerSideEncryption :: from (v . as_str ()))) ; b = b . set_sse_customer_key (v . sse_customer_key . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_bucket_key_enabled (Some (v . bucket_key_enabled . to_owned ())) ; b = b . set_website_redirect_location (v . website_redirect_location . map (| v | v . to_owned ())) ; b = b . set_content_type (v . content_type . map (| v | v . to_owned ())) ; b = b . set_ssekms_encryption_context (v . ssekms_encryption_context . map (| v | v . to_owned ())) ; b = b . set_request_payer (v . request_payer . map (| v | aws_sdk_s3 :: model :: RequestPayer :: from (v . as_str ()))) ; b = b . set_metadata (v . metadata . map (| v | v . to_owned ())) ; b = b . set_grant_read_acp (v . grant_read_acp . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_create_multipart_upload_output (output : aws_sdk_s3 :: output :: CreateMultipartUploadOutput) -> s3d_smithy_codegen_server_s3 :: output :: CreateMultipartUploadOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: CreateMultipartUploadOutput :: builder () ; b = b . set_abort_rule_id (v . abort_rule_id . map (| v | v . to_owned ())) ; b = b . set_bucket (v . bucket . map (| v | v . to_owned ())) ; b = b . set_sse_customer_algorithm (v . sse_customer_algorithm . map (| v | v . to_owned ())) ; b = b . set_upload_id (v . upload_id . map (| v | v . to_owned ())) ; b = b . set_abort_date (v . abort_date . map (| v | v . to_owned ())) ; b = b . set_ssekms_encryption_context (v . ssekms_encryption_context . map (| v | v . to_owned ())) ; b = b . set_bucket_key_enabled (Some (v . bucket_key_enabled . to_owned ())) ; b = b . set_checksum_algorithm (v . checksum_algorithm . map (| v | s3d_smithy_codegen_server_s3 :: model :: ChecksumAlgorithm :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_request_charged (v . request_charged . map (| v | s3d_smithy_codegen_server_s3 :: model :: RequestCharged :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_ssekms_key_id (v . ssekms_key_id . map (| v | v . to_owned ())) ; b = b . set_server_side_encryption (v . server_side_encryption . map (| v | s3d_smithy_codegen_server_s3 :: model :: ServerSideEncryption :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_sse_customer_key_md5 (v . sse_customer_key_md5 . map (| v | v . to_owned ())) ; b = b . set_key (v . key . map (| v | v . to_owned ())) ; b . build () } }

pub fn conv_to_client_head_object_input (input : s3d_smithy_codegen_server_s3 :: input :: HeadObjectInput) -> aws_sdk_s3 :: input :: HeadObjectInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: HeadObjectInput :: builder () ; b = b . set_checksum_mode (v . checksum_mode . map (| v | aws_sdk_s3 :: model :: ChecksumMode :: from (v . as_str ()))) ; b = b . set_if_none_match (v . if_none_match . map (| v | v . to_owned ())) ; b = b . set_sse_customer_algorithm (v . sse_customer_algorithm . map (| v | v . to_owned ())) ; b = b . set_version_id (v . version_id . map (| v | v . to_owned ())) ; b = b . set_part_number (Some (v . part_number . to_owned ())) ; b = b . set_range (v . range . map (| v | v . to_owned ())) ; b = b . set_request_payer (v . request_payer . map (| v | aws_sdk_s3 :: model :: RequestPayer :: from (v . as_str ()))) ; b = b . set_sse_customer_key (v . sse_customer_key . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_if_modified_since (v . if_modified_since . map (| v | v . to_owned ())) ; b = b . set_sse_customer_key_md5 (v . sse_customer_key_md5 . map (| v | v . to_owned ())) ; b = b . set_if_unmodified_since (v . if_unmodified_since . map (| v | v . to_owned ())) ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_if_match (v . if_match . map (| v | v . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_head_object_output (output : aws_sdk_s3 :: output :: HeadObjectOutput) -> s3d_smithy_codegen_server_s3 :: output :: HeadObjectOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: HeadObjectOutput :: builder () ; b = b . set_checksum_sha1 (v . checksum_sha1 . map (| v | v . to_owned ())) ; b = b . set_sse_customer_algorithm (v . sse_customer_algorithm . map (| v | v . to_owned ())) ; b = b . set_storage_class (v . storage_class . map (| v | s3d_smithy_codegen_server_s3 :: model :: StorageClass :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_object_lock_mode (v . object_lock_mode . map (| v | s3d_smithy_codegen_server_s3 :: model :: ObjectLockMode :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_object_lock_retain_until_date (v . object_lock_retain_until_date . map (| v | v . to_owned ())) ; b = b . set_checksum_sha256 (v . checksum_sha256 . map (| v | v . to_owned ())) ; b = b . set_content_encoding (v . content_encoding . map (| v | v . to_owned ())) ; b = b . set_checksum_crc32_c (v . checksum_crc32_c . map (| v | v . to_owned ())) ; b = b . set_metadata (v . metadata . map (| v | v . to_owned ())) ; b = b . set_object_lock_legal_hold_status (v . object_lock_legal_hold_status . map (| v | s3d_smithy_codegen_server_s3 :: model :: ObjectLockLegalHoldStatus :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_replication_status (v . replication_status . map (| v | s3d_smithy_codegen_server_s3 :: model :: ReplicationStatus :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_request_charged (v . request_charged . map (| v | s3d_smithy_codegen_server_s3 :: model :: RequestCharged :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_restore (v . restore . map (| v | v . to_owned ())) ; b = b . set_missing_meta (Some (v . missing_meta . to_owned ())) ; b = b . set_server_side_encryption (v . server_side_encryption . map (| v | s3d_smithy_codegen_server_s3 :: model :: ServerSideEncryption :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_ssekms_key_id (v . ssekms_key_id . map (| v | v . to_owned ())) ; b = b . set_accept_ranges (v . accept_ranges . map (| v | v . to_owned ())) ; b = b . set_parts_count (Some (v . parts_count . to_owned ())) ; b = b . set_content_disposition (v . content_disposition . map (| v | v . to_owned ())) ; b = b . set_expires (v . expires . map (| v | v . to_owned ())) ; b = b . set_e_tag (v . e_tag . map (| v | v . to_owned ())) ; b = b . set_content_length (Some (v . content_length . to_owned ())) ; b = b . set_delete_marker (Some (v . delete_marker . to_owned ())) ; b = b . set_sse_customer_key_md5 (v . sse_customer_key_md5 . map (| v | v . to_owned ())) ; b = b . set_content_language (v . content_language . map (| v | v . to_owned ())) ; b = b . set_expiration (v . expiration . map (| v | v . to_owned ())) ; b = b . set_last_modified (v . last_modified . map (| v | v . to_owned ())) ; b = b . set_content_type (v . content_type . map (| v | v . to_owned ())) ; b = b . set_archive_status (v . archive_status . map (| v | s3d_smithy_codegen_server_s3 :: model :: ArchiveStatus :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_cache_control (v . cache_control . map (| v | v . to_owned ())) ; b = b . set_version_id (v . version_id . map (| v | v . to_owned ())) ; b = b . set_website_redirect_location (v . website_redirect_location . map (| v | v . to_owned ())) ; b = b . set_bucket_key_enabled (Some (v . bucket_key_enabled . to_owned ())) ; b = b . set_checksum_crc32 (v . checksum_crc32 . map (| v | v . to_owned ())) ; b . build () } }

pub fn conv_to_client_get_object_input (input : s3d_smithy_codegen_server_s3 :: input :: GetObjectInput) -> aws_sdk_s3 :: input :: GetObjectInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: GetObjectInput :: builder () ; b = b . set_response_content_disposition (v . response_content_disposition . map (| v | v . to_owned ())) ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_sse_customer_algorithm (v . sse_customer_algorithm . map (| v | v . to_owned ())) ; b = b . set_part_number (Some (v . part_number . to_owned ())) ; b = b . set_response_content_encoding (v . response_content_encoding . map (| v | v . to_owned ())) ; b = b . set_response_content_type (v . response_content_type . map (| v | v . to_owned ())) ; b = b . set_if_modified_since (v . if_modified_since . map (| v | v . to_owned ())) ; b = b . set_checksum_mode (v . checksum_mode . map (| v | aws_sdk_s3 :: model :: ChecksumMode :: from (v . as_str ()))) ; b = b . set_response_cache_control (v . response_cache_control . map (| v | v . to_owned ())) ; b = b . set_if_none_match (v . if_none_match . map (| v | v . to_owned ())) ; b = b . set_request_payer (v . request_payer . map (| v | aws_sdk_s3 :: model :: RequestPayer :: from (v . as_str ()))) ; b = b . set_if_match (v . if_match . map (| v | v . to_owned ())) ; b = b . set_if_unmodified_since (v . if_unmodified_since . map (| v | v . to_owned ())) ; b = b . set_response_expires (v . response_expires . map (| v | v . to_owned ())) ; b = b . set_sse_customer_key (v . sse_customer_key . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_response_content_language (v . response_content_language . map (| v | v . to_owned ())) ; b = b . set_version_id (v . version_id . map (| v | v . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_range (v . range . map (| v | v . to_owned ())) ; b = b . set_sse_customer_key_md5 (v . sse_customer_key_md5 . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_get_object_output (output : aws_sdk_s3 :: output :: GetObjectOutput) -> s3d_smithy_codegen_server_s3 :: output :: GetObjectOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: GetObjectOutput :: builder () ; b = b . set_content_range (v . content_range . map (| v | v . to_owned ())) ; b = b . set_content_disposition (v . content_disposition . map (| v | v . to_owned ())) ; b = b . set_object_lock_mode (v . object_lock_mode . map (| v | s3d_smithy_codegen_server_s3 :: model :: ObjectLockMode :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_object_lock_retain_until_date (v . object_lock_retain_until_date . map (| v | v . to_owned ())) ; b = b . set_request_charged (v . request_charged . map (| v | s3d_smithy_codegen_server_s3 :: model :: RequestCharged :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_version_id (v . version_id . map (| v | v . to_owned ())) ; b = b . set_content_type (v . content_type . map (| v | v . to_owned ())) ; b = b . set_checksum_sha256 (v . checksum_sha256 . map (| v | v . to_owned ())) ; b = b . set_sse_customer_algorithm (v . sse_customer_algorithm . map (| v | v . to_owned ())) ; b = b . set_delete_marker (Some (v . delete_marker . to_owned ())) ; b = b . set_ssekms_key_id (v . ssekms_key_id . map (| v | v . to_owned ())) ; b = b . set_last_modified (v . last_modified . map (| v | v . to_owned ())) ; b = b . set_checksum_sha1 (v . checksum_sha1 . map (| v | v . to_owned ())) ; b = b . set_content_encoding (v . content_encoding . map (| v | v . to_owned ())) ; b = b . set_expires (v . expires . map (| v | v . to_owned ())) ; b = b . set_replication_status (v . replication_status . map (| v | s3d_smithy_codegen_server_s3 :: model :: ReplicationStatus :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_body (Some (v . body)) ; b = b . set_sse_customer_key_md5 (v . sse_customer_key_md5 . map (| v | v . to_owned ())) ; b = b . set_checksum_crc32 (v . checksum_crc32 . map (| v | v . to_owned ())) ; b = b . set_website_redirect_location (v . website_redirect_location . map (| v | v . to_owned ())) ; b = b . set_accept_ranges (v . accept_ranges . map (| v | v . to_owned ())) ; b = b . set_content_language (v . content_language . map (| v | v . to_owned ())) ; b = b . set_storage_class (v . storage_class . map (| v | s3d_smithy_codegen_server_s3 :: model :: StorageClass :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_content_length (Some (v . content_length . to_owned ())) ; b = b . set_parts_count (Some (v . parts_count . to_owned ())) ; b = b . set_checksum_crc32_c (v . checksum_crc32_c . map (| v | v . to_owned ())) ; b = b . set_restore (v . restore . map (| v | v . to_owned ())) ; b = b . set_object_lock_legal_hold_status (v . object_lock_legal_hold_status . map (| v | s3d_smithy_codegen_server_s3 :: model :: ObjectLockLegalHoldStatus :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_e_tag (v . e_tag . map (| v | v . to_owned ())) ; b = b . set_server_side_encryption (v . server_side_encryption . map (| v | s3d_smithy_codegen_server_s3 :: model :: ServerSideEncryption :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_bucket_key_enabled (Some (v . bucket_key_enabled . to_owned ())) ; b = b . set_cache_control (v . cache_control . map (| v | v . to_owned ())) ; b = b . set_metadata (v . metadata . map (| v | v . to_owned ())) ; b = b . set_tag_count (Some (v . tag_count . to_owned ())) ; b = b . set_expiration (v . expiration . map (| v | v . to_owned ())) ; b = b . set_missing_meta (Some (v . missing_meta . to_owned ())) ; b . build () } }

pub fn conv_to_client_delete_bucket_inventory_configuration_input (input : s3d_smithy_codegen_server_s3 :: input :: DeleteBucketInventoryConfigurationInput) -> aws_sdk_s3 :: input :: DeleteBucketInventoryConfigurationInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: DeleteBucketInventoryConfigurationInput :: builder () ; b = b . set_id (Some (v . id . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_delete_bucket_inventory_configuration_output (output : aws_sdk_s3 :: output :: DeleteBucketInventoryConfigurationOutput) -> s3d_smithy_codegen_server_s3 :: output :: DeleteBucketInventoryConfigurationOutput { s3d_smithy_codegen_server_s3 :: output :: DeleteBucketInventoryConfigurationOutput { } }

pub fn conv_to_client_get_bucket_policy_status_input (input : s3d_smithy_codegen_server_s3 :: input :: GetBucketPolicyStatusInput) -> aws_sdk_s3 :: input :: GetBucketPolicyStatusInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: GetBucketPolicyStatusInput :: builder () ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_get_bucket_policy_status_output (output : aws_sdk_s3 :: output :: GetBucketPolicyStatusOutput) -> s3d_smithy_codegen_server_s3 :: output :: GetBucketPolicyStatusOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: GetBucketPolicyStatusOutput :: builder () ; b = b . set_policy_status (v . policy_status . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: PolicyStatus :: builder () ; b = b . set_is_public (Some (v . is_public . to_owned ())) ; b . build () })) ; b . build () } }

pub fn conv_to_client_delete_bucket_lifecycle_input (input : s3d_smithy_codegen_server_s3 :: input :: DeleteBucketLifecycleInput) -> aws_sdk_s3 :: input :: DeleteBucketLifecycleInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: DeleteBucketLifecycleInput :: builder () ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_delete_bucket_lifecycle_output (output : aws_sdk_s3 :: output :: DeleteBucketLifecycleOutput) -> s3d_smithy_codegen_server_s3 :: output :: DeleteBucketLifecycleOutput { s3d_smithy_codegen_server_s3 :: output :: DeleteBucketLifecycleOutput { } }

pub fn conv_to_client_put_bucket_encryption_input (input : s3d_smithy_codegen_server_s3 :: input :: PutBucketEncryptionInput) -> aws_sdk_s3 :: input :: PutBucketEncryptionInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: PutBucketEncryptionInput :: builder () ; b = b . set_server_side_encryption_configuration (Some ({ let v = v . server_side_encryption_configuration ; let mut b = aws_sdk_s3 :: model :: ServerSideEncryptionConfiguration :: builder () ; b = b . set_rules (Some (v . rules . into_iter () . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: ServerSideEncryptionRule :: builder () ; b = b . set_apply_server_side_encryption_by_default (v . apply_server_side_encryption_by_default . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: ServerSideEncryptionByDefault :: builder () ; b = b . set_sse_algorithm (Some (aws_sdk_s3 :: model :: ServerSideEncryption :: from (v . sse_algorithm . as_str ()))) ; b = b . set_kms_master_key_id (v . kms_master_key_id . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_bucket_key_enabled (Some (v . bucket_key_enabled . to_owned ())) ; b . build () }) . collect ())) ; b . build () })) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_content_md5 (v . content_md5 . map (| v | v . to_owned ())) ; b = b . set_checksum_algorithm (v . checksum_algorithm . map (| v | aws_sdk_s3 :: model :: ChecksumAlgorithm :: from (v . as_str ()))) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_put_bucket_encryption_output (output : aws_sdk_s3 :: output :: PutBucketEncryptionOutput) -> s3d_smithy_codegen_server_s3 :: output :: PutBucketEncryptionOutput { s3d_smithy_codegen_server_s3 :: output :: PutBucketEncryptionOutput { } }

pub fn conv_to_client_delete_bucket_ownership_controls_input (input : s3d_smithy_codegen_server_s3 :: input :: DeleteBucketOwnershipControlsInput) -> aws_sdk_s3 :: input :: DeleteBucketOwnershipControlsInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: DeleteBucketOwnershipControlsInput :: builder () ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_delete_bucket_ownership_controls_output (output : aws_sdk_s3 :: output :: DeleteBucketOwnershipControlsOutput) -> s3d_smithy_codegen_server_s3 :: output :: DeleteBucketOwnershipControlsOutput { s3d_smithy_codegen_server_s3 :: output :: DeleteBucketOwnershipControlsOutput { } }

pub fn conv_to_client_list_multipart_uploads_input (input : s3d_smithy_codegen_server_s3 :: input :: ListMultipartUploadsInput) -> aws_sdk_s3 :: input :: ListMultipartUploadsInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: ListMultipartUploadsInput :: builder () ; b = b . set_key_marker (v . key_marker . map (| v | v . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_upload_id_marker (v . upload_id_marker . map (| v | v . to_owned ())) ; b = b . set_delimiter (v . delimiter . map (| v | v . to_owned ())) ; b = b . set_encoding_type (v . encoding_type . map (| v | aws_sdk_s3 :: model :: EncodingType :: from (v . as_str ()))) ; b = b . set_max_uploads (Some (v . max_uploads . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_list_multipart_uploads_output (output : aws_sdk_s3 :: output :: ListMultipartUploadsOutput) -> s3d_smithy_codegen_server_s3 :: output :: ListMultipartUploadsOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: ListMultipartUploadsOutput :: builder () ; b = b . set_delimiter (v . delimiter . map (| v | v . to_owned ())) ; b = b . set_bucket (v . bucket . map (| v | v . to_owned ())) ; b = b . set_is_truncated (Some (v . is_truncated . to_owned ())) ; b = b . set_max_uploads (Some (v . max_uploads . to_owned ())) ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_encoding_type (v . encoding_type . map (| v | s3d_smithy_codegen_server_s3 :: model :: EncodingType :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_next_key_marker (v . next_key_marker . map (| v | v . to_owned ())) ; b = b . set_uploads (v . uploads . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: MultipartUpload :: builder () ; b = b . set_storage_class (v . storage_class . map (| v | s3d_smithy_codegen_server_s3 :: model :: StorageClass :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_upload_id (v . upload_id . map (| v | v . to_owned ())) ; b = b . set_owner (v . owner . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Owner :: builder () ; b = b . set_display_name (v . display_name . map (| v | v . to_owned ())) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_checksum_algorithm (v . checksum_algorithm . map (| v | s3d_smithy_codegen_server_s3 :: model :: ChecksumAlgorithm :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_initiator (v . initiator . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Initiator :: builder () ; b = b . set_display_name (v . display_name . map (| v | v . to_owned ())) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_initiated (v . initiated . map (| v | v . to_owned ())) ; b = b . set_key (v . key . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b = b . set_upload_id_marker (v . upload_id_marker . map (| v | v . to_owned ())) ; b = b . set_next_upload_id_marker (v . next_upload_id_marker . map (| v | v . to_owned ())) ; b = b . set_key_marker (v . key_marker . map (| v | v . to_owned ())) ; b = b . set_common_prefixes (v . common_prefixes . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: CommonPrefix :: builder () ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b . build () } }

pub fn conv_to_client_delete_bucket_analytics_configuration_input (input : s3d_smithy_codegen_server_s3 :: input :: DeleteBucketAnalyticsConfigurationInput) -> aws_sdk_s3 :: input :: DeleteBucketAnalyticsConfigurationInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: DeleteBucketAnalyticsConfigurationInput :: builder () ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_id (Some (v . id . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_delete_bucket_analytics_configuration_output (output : aws_sdk_s3 :: output :: DeleteBucketAnalyticsConfigurationOutput) -> s3d_smithy_codegen_server_s3 :: output :: DeleteBucketAnalyticsConfigurationOutput { s3d_smithy_codegen_server_s3 :: output :: DeleteBucketAnalyticsConfigurationOutput { } }

pub fn conv_to_client_delete_bucket_metrics_configuration_input (input : s3d_smithy_codegen_server_s3 :: input :: DeleteBucketMetricsConfigurationInput) -> aws_sdk_s3 :: input :: DeleteBucketMetricsConfigurationInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: DeleteBucketMetricsConfigurationInput :: builder () ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_id (Some (v . id . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_delete_bucket_metrics_configuration_output (output : aws_sdk_s3 :: output :: DeleteBucketMetricsConfigurationOutput) -> s3d_smithy_codegen_server_s3 :: output :: DeleteBucketMetricsConfigurationOutput { s3d_smithy_codegen_server_s3 :: output :: DeleteBucketMetricsConfigurationOutput { } }

pub fn conv_to_client_put_public_access_block_input (input : s3d_smithy_codegen_server_s3 :: input :: PutPublicAccessBlockInput) -> aws_sdk_s3 :: input :: PutPublicAccessBlockInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: PutPublicAccessBlockInput :: builder () ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_checksum_algorithm (v . checksum_algorithm . map (| v | aws_sdk_s3 :: model :: ChecksumAlgorithm :: from (v . as_str ()))) ; b = b . set_public_access_block_configuration (Some ({ let v = v . public_access_block_configuration ; let mut b = aws_sdk_s3 :: model :: PublicAccessBlockConfiguration :: builder () ; b = b . set_block_public_acls (Some (v . block_public_acls . to_owned ())) ; b = b . set_restrict_public_buckets (Some (v . restrict_public_buckets . to_owned ())) ; b = b . set_ignore_public_acls (Some (v . ignore_public_acls . to_owned ())) ; b = b . set_block_public_policy (Some (v . block_public_policy . to_owned ())) ; b . build () })) ; b = b . set_content_md5 (v . content_md5 . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_put_public_access_block_output (output : aws_sdk_s3 :: output :: PutPublicAccessBlockOutput) -> s3d_smithy_codegen_server_s3 :: output :: PutPublicAccessBlockOutput { s3d_smithy_codegen_server_s3 :: output :: PutPublicAccessBlockOutput { } }

pub fn conv_to_client_get_bucket_analytics_configuration_input (input : s3d_smithy_codegen_server_s3 :: input :: GetBucketAnalyticsConfigurationInput) -> aws_sdk_s3 :: input :: GetBucketAnalyticsConfigurationInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: GetBucketAnalyticsConfigurationInput :: builder () ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_id (Some (v . id . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_get_bucket_analytics_configuration_output (output : aws_sdk_s3 :: output :: GetBucketAnalyticsConfigurationOutput) -> s3d_smithy_codegen_server_s3 :: output :: GetBucketAnalyticsConfigurationOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: GetBucketAnalyticsConfigurationOutput :: builder () ; b = b . set_analytics_configuration (v . analytics_configuration . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: AnalyticsConfiguration :: builder () ; b = b . set_storage_class_analysis (v . storage_class_analysis . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: StorageClassAnalysis :: builder () ; b = b . set_data_export (v . data_export . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: StorageClassAnalysisDataExport :: builder () ; b = b . set_destination (v . destination . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: AnalyticsExportDestination :: builder () ; b = b . set_s3_bucket_destination (v . s3_bucket_destination . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: AnalyticsS3BucketDestination :: builder () ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_bucket_account_id (v . bucket_account_id . map (| v | v . to_owned ())) ; b = b . set_format (v . format . map (| v | s3d_smithy_codegen_server_s3 :: model :: AnalyticsS3ExportFileFormat :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_bucket (v . bucket . map (| v | v . to_owned ())) ; b . build () . unwrap () })) ; b . build () . unwrap () })) ; b = b . set_output_schema_version (v . output_schema_version . map (| v | s3d_smithy_codegen_server_s3 :: model :: StorageClassAnalysisSchemaVersion :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () . unwrap () })) ; b . build () })) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b = b . set_filter (v . filter . map (| v | { match v { aws_sdk_s3 :: model :: AnalyticsFilter :: And (v) => s3d_smithy_codegen_server_s3 :: model :: AnalyticsFilter :: And ({ let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: AnalyticsAndOperator :: builder () ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_tags (v . tags . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Tag :: builder () ; b = b . set_key (v . key . map (| v | v . to_owned ())) ; b = b . set_value (v . value . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b . build () }) , aws_sdk_s3 :: model :: AnalyticsFilter :: Prefix (v) => s3d_smithy_codegen_server_s3 :: model :: AnalyticsFilter :: Prefix (v . to_owned ()) , aws_sdk_s3 :: model :: AnalyticsFilter :: Tag (v) => s3d_smithy_codegen_server_s3 :: model :: AnalyticsFilter :: Tag ({ let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Tag :: builder () ; b = b . set_key (v . key . map (| v | v . to_owned ())) ; b = b . set_value (v . value . map (| v | v . to_owned ())) ; b . build () }) , _ => panic ! ("unknown union value") , } })) ; b . build () . unwrap () })) ; b . build () } }

pub fn conv_to_client_get_bucket_acl_input (input : s3d_smithy_codegen_server_s3 :: input :: GetBucketAclInput) -> aws_sdk_s3 :: input :: GetBucketAclInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: GetBucketAclInput :: builder () ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_get_bucket_acl_output (output : aws_sdk_s3 :: output :: GetBucketAclOutput) -> s3d_smithy_codegen_server_s3 :: output :: GetBucketAclOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: GetBucketAclOutput :: builder () ; b = b . set_owner (v . owner . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Owner :: builder () ; b = b . set_display_name (v . display_name . map (| v | v . to_owned ())) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_grants (v . grants . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Grant :: builder () ; b = b . set_grantee (v . grantee . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Grantee :: builder () ; b = b . set_type (v . r#type . map (| v | s3d_smithy_codegen_server_s3 :: model :: Type :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_uri (v . uri . map (| v | v . to_owned ())) ; b = b . set_display_name (v . display_name . map (| v | v . to_owned ())) ; b = b . set_email_address (v . email_address . map (| v | v . to_owned ())) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b . build () . unwrap () })) ; b = b . set_permission (v . permission . map (| v | s3d_smithy_codegen_server_s3 :: model :: Permission :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () }) . collect ())) ; b . build () } }

pub fn conv_to_client_get_bucket_metrics_configuration_input (input : s3d_smithy_codegen_server_s3 :: input :: GetBucketMetricsConfigurationInput) -> aws_sdk_s3 :: input :: GetBucketMetricsConfigurationInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: GetBucketMetricsConfigurationInput :: builder () ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_id (Some (v . id . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_get_bucket_metrics_configuration_output (output : aws_sdk_s3 :: output :: GetBucketMetricsConfigurationOutput) -> s3d_smithy_codegen_server_s3 :: output :: GetBucketMetricsConfigurationOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: GetBucketMetricsConfigurationOutput :: builder () ; b = b . set_metrics_configuration (v . metrics_configuration . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: MetricsConfiguration :: builder () ; b = b . set_filter (v . filter . map (| v | { match v { aws_sdk_s3 :: model :: MetricsFilter :: And (v) => s3d_smithy_codegen_server_s3 :: model :: MetricsFilter :: And ({ let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: MetricsAndOperator :: builder () ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_tags (v . tags . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Tag :: builder () ; b = b . set_key (v . key . map (| v | v . to_owned ())) ; b = b . set_value (v . value . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b = b . set_access_point_arn (v . access_point_arn . map (| v | v . to_owned ())) ; b . build () }) , aws_sdk_s3 :: model :: MetricsFilter :: AccessPointArn (v) => s3d_smithy_codegen_server_s3 :: model :: MetricsFilter :: AccessPointArn (v . to_owned ()) , aws_sdk_s3 :: model :: MetricsFilter :: Tag (v) => s3d_smithy_codegen_server_s3 :: model :: MetricsFilter :: Tag ({ let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Tag :: builder () ; b = b . set_key (v . key . map (| v | v . to_owned ())) ; b = b . set_value (v . value . map (| v | v . to_owned ())) ; b . build () }) , aws_sdk_s3 :: model :: MetricsFilter :: Prefix (v) => s3d_smithy_codegen_server_s3 :: model :: MetricsFilter :: Prefix (v . to_owned ()) , _ => panic ! ("unknown union value") , } })) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b . build () })) ; b . build () } }

pub fn conv_to_client_delete_objects_input (input : s3d_smithy_codegen_server_s3 :: input :: DeleteObjectsInput) -> aws_sdk_s3 :: input :: DeleteObjectsInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: DeleteObjectsInput :: builder () ; b = b . set_delete (Some ({ let v = v . delete ; let mut b = aws_sdk_s3 :: model :: Delete :: builder () ; b = b . set_quiet (Some (v . quiet . to_owned ())) ; b = b . set_objects (Some (v . objects . into_iter () . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: ObjectIdentifier :: builder () ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_version_id (v . version_id . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b . build () })) ; b = b . set_checksum_algorithm (v . checksum_algorithm . map (| v | aws_sdk_s3 :: model :: ChecksumAlgorithm :: from (v . as_str ()))) ; b = b . set_bypass_governance_retention (Some (v . bypass_governance_retention . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_mfa (v . mfa . map (| v | v . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_request_payer (v . request_payer . map (| v | aws_sdk_s3 :: model :: RequestPayer :: from (v . as_str ()))) ; b . build () . unwrap () } }

pub fn conv_from_client_delete_objects_output (output : aws_sdk_s3 :: output :: DeleteObjectsOutput) -> s3d_smithy_codegen_server_s3 :: output :: DeleteObjectsOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: DeleteObjectsOutput :: builder () ; b = b . set_errors (v . errors . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Error :: builder () ; b = b . set_code (v . code . map (| v | v . to_owned ())) ; b = b . set_version_id (v . version_id . map (| v | v . to_owned ())) ; b = b . set_key (v . key . map (| v | v . to_owned ())) ; b = b . set_message (v . message . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b = b . set_request_charged (v . request_charged . map (| v | s3d_smithy_codegen_server_s3 :: model :: RequestCharged :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_deleted (v . deleted . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: DeletedObject :: builder () ; b = b . set_key (v . key . map (| v | v . to_owned ())) ; b = b . set_version_id (v . version_id . map (| v | v . to_owned ())) ; b = b . set_delete_marker_version_id (v . delete_marker_version_id . map (| v | v . to_owned ())) ; b = b . set_delete_marker (Some (v . delete_marker . to_owned ())) ; b . build () }) . collect ())) ; b . build () } }

pub fn conv_to_client_get_bucket_website_input (input : s3d_smithy_codegen_server_s3 :: input :: GetBucketWebsiteInput) -> aws_sdk_s3 :: input :: GetBucketWebsiteInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: GetBucketWebsiteInput :: builder () ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_get_bucket_website_output (output : aws_sdk_s3 :: output :: GetBucketWebsiteOutput) -> s3d_smithy_codegen_server_s3 :: output :: GetBucketWebsiteOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: GetBucketWebsiteOutput :: builder () ; b = b . set_error_document (v . error_document . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: ErrorDocument :: builder () ; b = b . set_key (v . key . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_routing_rules (v . routing_rules . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: RoutingRule :: builder () ; b = b . set_condition (v . condition . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Condition :: builder () ; b = b . set_http_error_code_returned_equals (v . http_error_code_returned_equals . map (| v | v . to_owned ())) ; b = b . set_key_prefix_equals (v . key_prefix_equals . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_redirect (v . redirect . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Redirect :: builder () ; b = b . set_host_name (v . host_name . map (| v | v . to_owned ())) ; b = b . set_http_redirect_code (v . http_redirect_code . map (| v | v . to_owned ())) ; b = b . set_protocol (v . protocol . map (| v | s3d_smithy_codegen_server_s3 :: model :: Protocol :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_replace_key_prefix_with (v . replace_key_prefix_with . map (| v | v . to_owned ())) ; b = b . set_replace_key_with (v . replace_key_with . map (| v | v . to_owned ())) ; b . build () })) ; b . build () . unwrap () }) . collect ())) ; b = b . set_index_document (v . index_document . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: IndexDocument :: builder () ; b = b . set_suffix (v . suffix . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_redirect_all_requests_to (v . redirect_all_requests_to . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: RedirectAllRequestsTo :: builder () ; b = b . set_protocol (v . protocol . map (| v | s3d_smithy_codegen_server_s3 :: model :: Protocol :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_host_name (v . host_name . map (| v | v . to_owned ())) ; b . build () })) ; b . build () } }

pub fn conv_to_client_get_bucket_request_payment_input (input : s3d_smithy_codegen_server_s3 :: input :: GetBucketRequestPaymentInput) -> aws_sdk_s3 :: input :: GetBucketRequestPaymentInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: GetBucketRequestPaymentInput :: builder () ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_get_bucket_request_payment_output (output : aws_sdk_s3 :: output :: GetBucketRequestPaymentOutput) -> s3d_smithy_codegen_server_s3 :: output :: GetBucketRequestPaymentOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: GetBucketRequestPaymentOutput :: builder () ; b = b . set_payer (v . payer . map (| v | s3d_smithy_codegen_server_s3 :: model :: Payer :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () } }

pub fn conv_to_client_get_object_acl_input (input : s3d_smithy_codegen_server_s3 :: input :: GetObjectAclInput) -> aws_sdk_s3 :: input :: GetObjectAclInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: GetObjectAclInput :: builder () ; b = b . set_version_id (v . version_id . map (| v | v . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_request_payer (v . request_payer . map (| v | aws_sdk_s3 :: model :: RequestPayer :: from (v . as_str ()))) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_get_object_acl_output (output : aws_sdk_s3 :: output :: GetObjectAclOutput) -> s3d_smithy_codegen_server_s3 :: output :: GetObjectAclOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: GetObjectAclOutput :: builder () ; b = b . set_owner (v . owner . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Owner :: builder () ; b = b . set_display_name (v . display_name . map (| v | v . to_owned ())) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_request_charged (v . request_charged . map (| v | s3d_smithy_codegen_server_s3 :: model :: RequestCharged :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_grants (v . grants . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Grant :: builder () ; b = b . set_grantee (v . grantee . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Grantee :: builder () ; b = b . set_type (v . r#type . map (| v | s3d_smithy_codegen_server_s3 :: model :: Type :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_uri (v . uri . map (| v | v . to_owned ())) ; b = b . set_display_name (v . display_name . map (| v | v . to_owned ())) ; b = b . set_email_address (v . email_address . map (| v | v . to_owned ())) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b . build () . unwrap () })) ; b = b . set_permission (v . permission . map (| v | s3d_smithy_codegen_server_s3 :: model :: Permission :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () }) . collect ())) ; b . build () } }

pub fn conv_to_client_list_objects_v2_input (input : s3d_smithy_codegen_server_s3 :: input :: ListObjectsV2Input) -> aws_sdk_s3 :: input :: ListObjectsV2Input { { let v = input ; let mut b = aws_sdk_s3 :: input :: ListObjectsV2Input :: builder () ; b = b . set_max_keys (Some (v . max_keys . to_owned ())) ; b = b . set_continuation_token (v . continuation_token . map (| v | v . to_owned ())) ; b = b . set_delimiter (v . delimiter . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_start_after (v . start_after . map (| v | v . to_owned ())) ; b = b . set_fetch_owner (Some (v . fetch_owner . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_request_payer (v . request_payer . map (| v | aws_sdk_s3 :: model :: RequestPayer :: from (v . as_str ()))) ; b = b . set_encoding_type (v . encoding_type . map (| v | aws_sdk_s3 :: model :: EncodingType :: from (v . as_str ()))) ; b . build () . unwrap () } }

pub fn conv_from_client_list_objects_v2_output (output : aws_sdk_s3 :: output :: ListObjectsV2Output) -> s3d_smithy_codegen_server_s3 :: output :: ListObjectsV2Output { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: ListObjectsV2Output :: builder () ; b = b . set_start_after (v . start_after . map (| v | v . to_owned ())) ; b = b . set_is_truncated (Some (v . is_truncated . to_owned ())) ; b = b . set_max_keys (Some (v . max_keys . to_owned ())) ; b = b . set_common_prefixes (v . common_prefixes . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: CommonPrefix :: builder () ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b = b . set_contents (v . contents . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Object :: builder () ; b = b . set_storage_class (v . storage_class . map (| v | s3d_smithy_codegen_server_s3 :: model :: ObjectStorageClass :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_checksum_algorithm (v . checksum_algorithm . map (| v | v . into_iter () . map (| v | s3d_smithy_codegen_server_s3 :: model :: ChecksumAlgorithm :: from_str (v . as_str ()) . expect ("todo guy")) . collect ())) ; b = b . set_owner (v . owner . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Owner :: builder () ; b = b . set_display_name (v . display_name . map (| v | v . to_owned ())) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_size (Some (v . size . to_owned ())) ; b = b . set_e_tag (v . e_tag . map (| v | v . to_owned ())) ; b = b . set_key (v . key . map (| v | v . to_owned ())) ; b = b . set_last_modified (v . last_modified . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b = b . set_delimiter (v . delimiter . map (| v | v . to_owned ())) ; b = b . set_key_count (Some (v . key_count . to_owned ())) ; b = b . set_name (v . name . map (| v | v . to_owned ())) ; b = b . set_continuation_token (v . continuation_token . map (| v | v . to_owned ())) ; b = b . set_encoding_type (v . encoding_type . map (| v | s3d_smithy_codegen_server_s3 :: model :: EncodingType :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_next_continuation_token (v . next_continuation_token . map (| v | v . to_owned ())) ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b . build () } }

pub fn conv_to_client_put_bucket_logging_input (input : s3d_smithy_codegen_server_s3 :: input :: PutBucketLoggingInput) -> aws_sdk_s3 :: input :: PutBucketLoggingInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: PutBucketLoggingInput :: builder () ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_checksum_algorithm (v . checksum_algorithm . map (| v | aws_sdk_s3 :: model :: ChecksumAlgorithm :: from (v . as_str ()))) ; b = b . set_bucket_logging_status (Some ({ let v = v . bucket_logging_status ; let mut b = aws_sdk_s3 :: model :: BucketLoggingStatus :: builder () ; b = b . set_logging_enabled (v . logging_enabled . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: LoggingEnabled :: builder () ; b = b . set_target_bucket (Some (v . target_bucket . to_owned ())) ; b = b . set_target_prefix (Some (v . target_prefix . to_owned ())) ; b = b . set_target_grants (v . target_grants . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: TargetGrant :: builder () ; b = b . set_grantee (v . grantee . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: Grantee :: builder () ; b = b . set_type (Some (aws_sdk_s3 :: model :: Type :: from (v . r#type . as_str ()))) ; b = b . set_uri (v . uri . map (| v | v . to_owned ())) ; b = b . set_display_name (v . display_name . map (| v | v . to_owned ())) ; b = b . set_email_address (v . email_address . map (| v | v . to_owned ())) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_permission (v . permission . map (| v | aws_sdk_s3 :: model :: BucketLogsPermission :: from (v . as_str ()))) ; b . build () }) . collect ())) ; b . build () })) ; b . build () })) ; b = b . set_content_md5 (v . content_md5 . map (| v | v . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_put_bucket_logging_output (output : aws_sdk_s3 :: output :: PutBucketLoggingOutput) -> s3d_smithy_codegen_server_s3 :: output :: PutBucketLoggingOutput { s3d_smithy_codegen_server_s3 :: output :: PutBucketLoggingOutput { } }

pub fn conv_to_client_put_bucket_website_input (input : s3d_smithy_codegen_server_s3 :: input :: PutBucketWebsiteInput) -> aws_sdk_s3 :: input :: PutBucketWebsiteInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: PutBucketWebsiteInput :: builder () ; b = b . set_website_configuration (Some ({ let v = v . website_configuration ; let mut b = aws_sdk_s3 :: model :: WebsiteConfiguration :: builder () ; b = b . set_index_document (v . index_document . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: IndexDocument :: builder () ; b = b . set_suffix (Some (v . suffix . to_owned ())) ; b . build () })) ; b = b . set_routing_rules (v . routing_rules . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: RoutingRule :: builder () ; b = b . set_condition (v . condition . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: Condition :: builder () ; b = b . set_http_error_code_returned_equals (v . http_error_code_returned_equals . map (| v | v . to_owned ())) ; b = b . set_key_prefix_equals (v . key_prefix_equals . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_redirect (Some ({ let v = v . redirect ; let mut b = aws_sdk_s3 :: model :: Redirect :: builder () ; b = b . set_host_name (v . host_name . map (| v | v . to_owned ())) ; b = b . set_http_redirect_code (v . http_redirect_code . map (| v | v . to_owned ())) ; b = b . set_protocol (v . protocol . map (| v | aws_sdk_s3 :: model :: Protocol :: from (v . as_str ()))) ; b = b . set_replace_key_prefix_with (v . replace_key_prefix_with . map (| v | v . to_owned ())) ; b = b . set_replace_key_with (v . replace_key_with . map (| v | v . to_owned ())) ; b . build () })) ; b . build () }) . collect ())) ; b = b . set_error_document (v . error_document . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: ErrorDocument :: builder () ; b = b . set_key (Some (v . key . to_owned ())) ; b . build () })) ; b = b . set_redirect_all_requests_to (v . redirect_all_requests_to . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: RedirectAllRequestsTo :: builder () ; b = b . set_protocol (v . protocol . map (| v | aws_sdk_s3 :: model :: Protocol :: from (v . as_str ()))) ; b = b . set_host_name (Some (v . host_name . to_owned ())) ; b . build () })) ; b . build () })) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_checksum_algorithm (v . checksum_algorithm . map (| v | aws_sdk_s3 :: model :: ChecksumAlgorithm :: from (v . as_str ()))) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_content_md5 (v . content_md5 . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_put_bucket_website_output (output : aws_sdk_s3 :: output :: PutBucketWebsiteOutput) -> s3d_smithy_codegen_server_s3 :: output :: PutBucketWebsiteOutput { s3d_smithy_codegen_server_s3 :: output :: PutBucketWebsiteOutput { } }

pub fn conv_to_client_get_bucket_location_input (input : s3d_smithy_codegen_server_s3 :: input :: GetBucketLocationInput) -> aws_sdk_s3 :: input :: GetBucketLocationInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: GetBucketLocationInput :: builder () ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_get_bucket_location_output (output : aws_sdk_s3 :: output :: GetBucketLocationOutput) -> s3d_smithy_codegen_server_s3 :: output :: GetBucketLocationOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: GetBucketLocationOutput :: builder () ; b = b . set_location_constraint (v . location_constraint . map (| v | s3d_smithy_codegen_server_s3 :: model :: BucketLocationConstraint :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () } }

pub fn conv_to_client_get_bucket_encryption_input (input : s3d_smithy_codegen_server_s3 :: input :: GetBucketEncryptionInput) -> aws_sdk_s3 :: input :: GetBucketEncryptionInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: GetBucketEncryptionInput :: builder () ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_get_bucket_encryption_output (output : aws_sdk_s3 :: output :: GetBucketEncryptionOutput) -> s3d_smithy_codegen_server_s3 :: output :: GetBucketEncryptionOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: GetBucketEncryptionOutput :: builder () ; b = b . set_server_side_encryption_configuration (v . server_side_encryption_configuration . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: ServerSideEncryptionConfiguration :: builder () ; b = b . set_rules (v . rules . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: ServerSideEncryptionRule :: builder () ; b = b . set_apply_server_side_encryption_by_default (v . apply_server_side_encryption_by_default . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: ServerSideEncryptionByDefault :: builder () ; b = b . set_sse_algorithm (v . sse_algorithm . map (| v | s3d_smithy_codegen_server_s3 :: model :: ServerSideEncryption :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_kms_master_key_id (v . kms_master_key_id . map (| v | v . to_owned ())) ; b . build () . unwrap () })) ; b = b . set_bucket_key_enabled (Some (v . bucket_key_enabled . to_owned ())) ; b . build () }) . collect ())) ; b . build () . unwrap () })) ; b . build () } }

pub fn conv_to_client_get_bucket_replication_input (input : s3d_smithy_codegen_server_s3 :: input :: GetBucketReplicationInput) -> aws_sdk_s3 :: input :: GetBucketReplicationInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: GetBucketReplicationInput :: builder () ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_get_bucket_replication_output (output : aws_sdk_s3 :: output :: GetBucketReplicationOutput) -> s3d_smithy_codegen_server_s3 :: output :: GetBucketReplicationOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: GetBucketReplicationOutput :: builder () ; b = b . set_replication_configuration (v . replication_configuration . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: ReplicationConfiguration :: builder () ; b = b . set_rules (v . rules . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: ReplicationRule :: builder () ; b = b . set_existing_object_replication (v . existing_object_replication . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: ExistingObjectReplication :: builder () ; b = b . set_status (v . status . map (| v | s3d_smithy_codegen_server_s3 :: model :: ExistingObjectReplicationStatus :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () . unwrap () })) ; b = b . set_delete_marker_replication (v . delete_marker_replication . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: DeleteMarkerReplication :: builder () ; b = b . set_status (v . status . map (| v | s3d_smithy_codegen_server_s3 :: model :: DeleteMarkerReplicationStatus :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () })) ; b = b . set_destination (v . destination . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Destination :: builder () ; b = b . set_bucket (v . bucket . map (| v | v . to_owned ())) ; b = b . set_replication_time (v . replication_time . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: ReplicationTime :: builder () ; b = b . set_time (v . time . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: ReplicationTimeValue :: builder () ; b = b . set_minutes (Some (v . minutes . to_owned ())) ; b . build () })) ; b = b . set_status (v . status . map (| v | s3d_smithy_codegen_server_s3 :: model :: ReplicationTimeStatus :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () . unwrap () })) ; b = b . set_encryption_configuration (v . encryption_configuration . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: EncryptionConfiguration :: builder () ; b = b . set_replica_kms_key_id (v . replica_kms_key_id . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_account (v . account . map (| v | v . to_owned ())) ; b = b . set_metrics (v . metrics . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Metrics :: builder () ; b = b . set_status (v . status . map (| v | s3d_smithy_codegen_server_s3 :: model :: MetricsStatus :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_event_threshold (v . event_threshold . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: ReplicationTimeValue :: builder () ; b = b . set_minutes (Some (v . minutes . to_owned ())) ; b . build () })) ; b . build () . unwrap () })) ; b = b . set_storage_class (v . storage_class . map (| v | s3d_smithy_codegen_server_s3 :: model :: StorageClass :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_access_control_translation (v . access_control_translation . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: AccessControlTranslation :: builder () ; b = b . set_owner (v . owner . map (| v | s3d_smithy_codegen_server_s3 :: model :: OwnerOverride :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () . unwrap () })) ; b . build () })) ; b = b . set_priority (Some (v . priority . to_owned ())) ; b = b . set_filter (v . filter . map (| v | { match v { aws_sdk_s3 :: model :: ReplicationRuleFilter :: Prefix (v) => s3d_smithy_codegen_server_s3 :: model :: ReplicationRuleFilter :: Prefix (v . to_owned ()) , aws_sdk_s3 :: model :: ReplicationRuleFilter :: Tag (v) => s3d_smithy_codegen_server_s3 :: model :: ReplicationRuleFilter :: Tag ({ let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Tag :: builder () ; b = b . set_key (v . key . map (| v | v . to_owned ())) ; b = b . set_value (v . value . map (| v | v . to_owned ())) ; b . build () }) , aws_sdk_s3 :: model :: ReplicationRuleFilter :: And (v) => s3d_smithy_codegen_server_s3 :: model :: ReplicationRuleFilter :: And ({ let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: ReplicationRuleAndOperator :: builder () ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_tags (v . tags . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Tag :: builder () ; b = b . set_key (v . key . map (| v | v . to_owned ())) ; b = b . set_value (v . value . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b . build () }) , _ => panic ! ("unknown union value") , } })) ; b = b . set_source_selection_criteria (v . source_selection_criteria . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: SourceSelectionCriteria :: builder () ; b = b . set_replica_modifications (v . replica_modifications . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: ReplicaModifications :: builder () ; b = b . set_status (v . status . map (| v | s3d_smithy_codegen_server_s3 :: model :: ReplicaModificationsStatus :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () . unwrap () })) ; b = b . set_sse_kms_encrypted_objects (v . sse_kms_encrypted_objects . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: SseKmsEncryptedObjects :: builder () ; b = b . set_status (v . status . map (| v | s3d_smithy_codegen_server_s3 :: model :: SseKmsEncryptedObjectsStatus :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () . unwrap () })) ; b . build () })) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_status (v . status . map (| v | s3d_smithy_codegen_server_s3 :: model :: ReplicationRuleStatus :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () . unwrap () }) . collect ())) ; b = b . set_role (v . role . map (| v | v . to_owned ())) ; b . build () . unwrap () })) ; b . build () } }

pub fn conv_to_client_get_object_lock_configuration_input (input : s3d_smithy_codegen_server_s3 :: input :: GetObjectLockConfigurationInput) -> aws_sdk_s3 :: input :: GetObjectLockConfigurationInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: GetObjectLockConfigurationInput :: builder () ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_get_object_lock_configuration_output (output : aws_sdk_s3 :: output :: GetObjectLockConfigurationOutput) -> s3d_smithy_codegen_server_s3 :: output :: GetObjectLockConfigurationOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: GetObjectLockConfigurationOutput :: builder () ; b = b . set_object_lock_configuration (v . object_lock_configuration . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: ObjectLockConfiguration :: builder () ; b = b . set_rule (v . rule . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: ObjectLockRule :: builder () ; b = b . set_default_retention (v . default_retention . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: DefaultRetention :: builder () ; b = b . set_mode (v . mode . map (| v | s3d_smithy_codegen_server_s3 :: model :: ObjectLockRetentionMode :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_years (Some (v . years . to_owned ())) ; b = b . set_days (Some (v . days . to_owned ())) ; b . build () })) ; b . build () })) ; b = b . set_object_lock_enabled (v . object_lock_enabled . map (| v | s3d_smithy_codegen_server_s3 :: model :: ObjectLockEnabled :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () })) ; b . build () } }

pub fn conv_to_client_put_bucket_policy_input (input : s3d_smithy_codegen_server_s3 :: input :: PutBucketPolicyInput) -> aws_sdk_s3 :: input :: PutBucketPolicyInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: PutBucketPolicyInput :: builder () ; b = b . set_checksum_algorithm (v . checksum_algorithm . map (| v | aws_sdk_s3 :: model :: ChecksumAlgorithm :: from (v . as_str ()))) ; b = b . set_content_md5 (v . content_md5 . map (| v | v . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_confirm_remove_self_bucket_access (Some (v . confirm_remove_self_bucket_access . to_owned ())) ; b = b . set_policy (Some (v . policy . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_put_bucket_policy_output (output : aws_sdk_s3 :: output :: PutBucketPolicyOutput) -> s3d_smithy_codegen_server_s3 :: output :: PutBucketPolicyOutput { s3d_smithy_codegen_server_s3 :: output :: PutBucketPolicyOutput { } }

pub fn conv_to_client_delete_bucket_input (input : s3d_smithy_codegen_server_s3 :: input :: DeleteBucketInput) -> aws_sdk_s3 :: input :: DeleteBucketInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: DeleteBucketInput :: builder () ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_delete_bucket_output (output : aws_sdk_s3 :: output :: DeleteBucketOutput) -> s3d_smithy_codegen_server_s3 :: output :: DeleteBucketOutput { s3d_smithy_codegen_server_s3 :: output :: DeleteBucketOutput { } }

pub fn conv_to_client_list_bucket_inventory_configurations_input (input : s3d_smithy_codegen_server_s3 :: input :: ListBucketInventoryConfigurationsInput) -> aws_sdk_s3 :: input :: ListBucketInventoryConfigurationsInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: ListBucketInventoryConfigurationsInput :: builder () ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_continuation_token (v . continuation_token . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_list_bucket_inventory_configurations_output (output : aws_sdk_s3 :: output :: ListBucketInventoryConfigurationsOutput) -> s3d_smithy_codegen_server_s3 :: output :: ListBucketInventoryConfigurationsOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: ListBucketInventoryConfigurationsOutput :: builder () ; b = b . set_next_continuation_token (v . next_continuation_token . map (| v | v . to_owned ())) ; b = b . set_continuation_token (v . continuation_token . map (| v | v . to_owned ())) ; b = b . set_inventory_configuration_list (v . inventory_configuration_list . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: InventoryConfiguration :: builder () ; b = b . set_filter (v . filter . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: InventoryFilter :: builder () ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b = b . set_included_object_versions (v . included_object_versions . map (| v | s3d_smithy_codegen_server_s3 :: model :: InventoryIncludedObjectVersions :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_destination (v . destination . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: InventoryDestination :: builder () ; b = b . set_s3_bucket_destination (v . s3_bucket_destination . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: InventoryS3BucketDestination :: builder () ; b = b . set_account_id (v . account_id . map (| v | v . to_owned ())) ; b = b . set_encryption (v . encryption . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: InventoryEncryption :: builder () ; b = b . set_ssekms (v . ssekms . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Ssekms :: builder () ; b = b . set_key_id (v . key_id . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_sses3 (v . sses3 . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Sses3 :: builder () ; b . build () })) ; b . build () })) ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_bucket (v . bucket . map (| v | v . to_owned ())) ; b = b . set_format (v . format . map (| v | s3d_smithy_codegen_server_s3 :: model :: InventoryFormat :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () . unwrap () })) ; b . build () . unwrap () })) ; b = b . set_is_enabled (Some (v . is_enabled . to_owned ())) ; b = b . set_schedule (v . schedule . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: InventorySchedule :: builder () ; b = b . set_frequency (v . frequency . map (| v | s3d_smithy_codegen_server_s3 :: model :: InventoryFrequency :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () . unwrap () })) ; b = b . set_optional_fields (v . optional_fields . map (| v | v . into_iter () . map (| v | s3d_smithy_codegen_server_s3 :: model :: InventoryOptionalField :: from_str (v . as_str ()) . expect ("todo guy")) . collect ())) ; b . build () . unwrap () }) . collect ())) ; b = b . set_is_truncated (Some (v . is_truncated . to_owned ())) ; b . build () } }

pub fn conv_to_client_put_bucket_replication_input (input : s3d_smithy_codegen_server_s3 :: input :: PutBucketReplicationInput) -> aws_sdk_s3 :: input :: PutBucketReplicationInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: PutBucketReplicationInput :: builder () ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_content_md5 (v . content_md5 . map (| v | v . to_owned ())) ; b = b . set_checksum_algorithm (v . checksum_algorithm . map (| v | aws_sdk_s3 :: model :: ChecksumAlgorithm :: from (v . as_str ()))) ; b = b . set_replication_configuration (Some ({ let v = v . replication_configuration ; let mut b = aws_sdk_s3 :: model :: ReplicationConfiguration :: builder () ; b = b . set_rules (Some (v . rules . into_iter () . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: ReplicationRule :: builder () ; b = b . set_existing_object_replication (v . existing_object_replication . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: ExistingObjectReplication :: builder () ; b = b . set_status (Some (aws_sdk_s3 :: model :: ExistingObjectReplicationStatus :: from (v . status . as_str ()))) ; b . build () })) ; b = b . set_delete_marker_replication (v . delete_marker_replication . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: DeleteMarkerReplication :: builder () ; b = b . set_status (v . status . map (| v | aws_sdk_s3 :: model :: DeleteMarkerReplicationStatus :: from (v . as_str ()))) ; b . build () })) ; b = b . set_destination (Some ({ let v = v . destination ; let mut b = aws_sdk_s3 :: model :: Destination :: builder () ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_replication_time (v . replication_time . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: ReplicationTime :: builder () ; b = b . set_time (Some ({ let v = v . time ; let mut b = aws_sdk_s3 :: model :: ReplicationTimeValue :: builder () ; b = b . set_minutes (Some (v . minutes . to_owned ())) ; b . build () })) ; b = b . set_status (Some (aws_sdk_s3 :: model :: ReplicationTimeStatus :: from (v . status . as_str ()))) ; b . build () })) ; b = b . set_encryption_configuration (v . encryption_configuration . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: EncryptionConfiguration :: builder () ; b = b . set_replica_kms_key_id (v . replica_kms_key_id . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_account (v . account . map (| v | v . to_owned ())) ; b = b . set_metrics (v . metrics . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: Metrics :: builder () ; b = b . set_status (Some (aws_sdk_s3 :: model :: MetricsStatus :: from (v . status . as_str ()))) ; b = b . set_event_threshold (v . event_threshold . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: ReplicationTimeValue :: builder () ; b = b . set_minutes (Some (v . minutes . to_owned ())) ; b . build () })) ; b . build () })) ; b = b . set_storage_class (v . storage_class . map (| v | aws_sdk_s3 :: model :: StorageClass :: from (v . as_str ()))) ; b = b . set_access_control_translation (v . access_control_translation . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: AccessControlTranslation :: builder () ; b = b . set_owner (Some (aws_sdk_s3 :: model :: OwnerOverride :: from (v . owner . as_str ()))) ; b . build () })) ; b . build () })) ; b = b . set_priority (Some (v . priority . to_owned ())) ; b = b . set_filter (v . filter . map (| v | { match v { s3d_smithy_codegen_server_s3 :: model :: ReplicationRuleFilter :: Prefix (v) => aws_sdk_s3 :: model :: ReplicationRuleFilter :: Prefix (v . to_owned ()) , s3d_smithy_codegen_server_s3 :: model :: ReplicationRuleFilter :: Tag (v) => aws_sdk_s3 :: model :: ReplicationRuleFilter :: Tag ({ let v = v ; let mut b = aws_sdk_s3 :: model :: Tag :: builder () ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_value (Some (v . value . to_owned ())) ; b . build () }) , s3d_smithy_codegen_server_s3 :: model :: ReplicationRuleFilter :: And (v) => aws_sdk_s3 :: model :: ReplicationRuleFilter :: And ({ let v = v ; let mut b = aws_sdk_s3 :: model :: ReplicationRuleAndOperator :: builder () ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_tags (v . tags . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: Tag :: builder () ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_value (Some (v . value . to_owned ())) ; b . build () }) . collect ())) ; b . build () }) , _ => panic ! ("unknown union value") , } })) ; b = b . set_source_selection_criteria (v . source_selection_criteria . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: SourceSelectionCriteria :: builder () ; b = b . set_replica_modifications (v . replica_modifications . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: ReplicaModifications :: builder () ; b = b . set_status (Some (aws_sdk_s3 :: model :: ReplicaModificationsStatus :: from (v . status . as_str ()))) ; b . build () })) ; b = b . set_sse_kms_encrypted_objects (v . sse_kms_encrypted_objects . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: SseKmsEncryptedObjects :: builder () ; b = b . set_status (Some (aws_sdk_s3 :: model :: SseKmsEncryptedObjectsStatus :: from (v . status . as_str ()))) ; b . build () })) ; b . build () })) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_status (Some (aws_sdk_s3 :: model :: ReplicationRuleStatus :: from (v . status . as_str ()))) ; b . build () }) . collect ())) ; b = b . set_role (Some (v . role . to_owned ())) ; b . build () })) ; b = b . set_token (v . token . map (| v | v . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_put_bucket_replication_output (output : aws_sdk_s3 :: output :: PutBucketReplicationOutput) -> s3d_smithy_codegen_server_s3 :: output :: PutBucketReplicationOutput { s3d_smithy_codegen_server_s3 :: output :: PutBucketReplicationOutput { } }

pub fn conv_to_client_get_bucket_notification_configuration_input (input : s3d_smithy_codegen_server_s3 :: input :: GetBucketNotificationConfigurationInput) -> aws_sdk_s3 :: input :: GetBucketNotificationConfigurationInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: GetBucketNotificationConfigurationInput :: builder () ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_get_bucket_notification_configuration_output (output : aws_sdk_s3 :: output :: GetBucketNotificationConfigurationOutput) -> s3d_smithy_codegen_server_s3 :: output :: GetBucketNotificationConfigurationOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: GetBucketNotificationConfigurationOutput :: builder () ; b = b . set_topic_configurations (v . topic_configurations . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: TopicConfiguration :: builder () ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b = b . set_filter (v . filter . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: NotificationConfigurationFilter :: builder () ; b = b . set_key (v . key . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: S3KeyFilter :: builder () ; b = b . set_filter_rules (v . filter_rules . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: FilterRule :: builder () ; b = b . set_name (v . name . map (| v | s3d_smithy_codegen_server_s3 :: model :: FilterRuleName :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_value (v . value . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b . build () })) ; b . build () })) ; b = b . set_topic_arn (v . topic_arn . map (| v | v . to_owned ())) ; b = b . set_events (v . events . map (| v | v . into_iter () . map (| v | s3d_smithy_codegen_server_s3 :: model :: Event :: from_str (v . as_str ()) . expect ("todo guy")) . collect ())) ; b . build () . unwrap () }) . collect ())) ; b = b . set_event_bridge_configuration (v . event_bridge_configuration . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: EventBridgeConfiguration :: builder () ; b . build () })) ; b = b . set_lambda_function_configurations (v . lambda_function_configurations . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: LambdaFunctionConfiguration :: builder () ; b = b . set_events (v . events . map (| v | v . into_iter () . map (| v | s3d_smithy_codegen_server_s3 :: model :: Event :: from_str (v . as_str ()) . expect ("todo guy")) . collect ())) ; b = b . set_lambda_function_arn (v . lambda_function_arn . map (| v | v . to_owned ())) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b = b . set_filter (v . filter . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: NotificationConfigurationFilter :: builder () ; b = b . set_key (v . key . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: S3KeyFilter :: builder () ; b = b . set_filter_rules (v . filter_rules . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: FilterRule :: builder () ; b = b . set_name (v . name . map (| v | s3d_smithy_codegen_server_s3 :: model :: FilterRuleName :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_value (v . value . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b . build () })) ; b . build () })) ; b . build () . unwrap () }) . collect ())) ; b = b . set_queue_configurations (v . queue_configurations . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: QueueConfiguration :: builder () ; b = b . set_events (v . events . map (| v | v . into_iter () . map (| v | s3d_smithy_codegen_server_s3 :: model :: Event :: from_str (v . as_str ()) . expect ("todo guy")) . collect ())) ; b = b . set_filter (v . filter . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: NotificationConfigurationFilter :: builder () ; b = b . set_key (v . key . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: S3KeyFilter :: builder () ; b = b . set_filter_rules (v . filter_rules . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: FilterRule :: builder () ; b = b . set_name (v . name . map (| v | s3d_smithy_codegen_server_s3 :: model :: FilterRuleName :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_value (v . value . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b . build () })) ; b . build () })) ; b = b . set_queue_arn (v . queue_arn . map (| v | v . to_owned ())) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b . build () . unwrap () }) . collect ())) ; b . build () } }

pub fn conv_to_client_put_bucket_analytics_configuration_input (input : s3d_smithy_codegen_server_s3 :: input :: PutBucketAnalyticsConfigurationInput) -> aws_sdk_s3 :: input :: PutBucketAnalyticsConfigurationInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: PutBucketAnalyticsConfigurationInput :: builder () ; b = b . set_id (Some (v . id . to_owned ())) ; b = b . set_analytics_configuration (Some ({ let v = v . analytics_configuration ; let mut b = aws_sdk_s3 :: model :: AnalyticsConfiguration :: builder () ; b = b . set_storage_class_analysis (Some ({ let v = v . storage_class_analysis ; let mut b = aws_sdk_s3 :: model :: StorageClassAnalysis :: builder () ; b = b . set_data_export (v . data_export . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: StorageClassAnalysisDataExport :: builder () ; b = b . set_destination (Some ({ let v = v . destination ; let mut b = aws_sdk_s3 :: model :: AnalyticsExportDestination :: builder () ; b = b . set_s3_bucket_destination (Some ({ let v = v . s3_bucket_destination ; let mut b = aws_sdk_s3 :: model :: AnalyticsS3BucketDestination :: builder () ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_bucket_account_id (v . bucket_account_id . map (| v | v . to_owned ())) ; b = b . set_format (Some (aws_sdk_s3 :: model :: AnalyticsS3ExportFileFormat :: from (v . format . as_str ()))) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () })) ; b . build () })) ; b = b . set_output_schema_version (Some (aws_sdk_s3 :: model :: StorageClassAnalysisSchemaVersion :: from (v . output_schema_version . as_str ()))) ; b . build () })) ; b . build () })) ; b = b . set_id (Some (v . id . to_owned ())) ; b = b . set_filter (v . filter . map (| v | { match v { s3d_smithy_codegen_server_s3 :: model :: AnalyticsFilter :: And (v) => aws_sdk_s3 :: model :: AnalyticsFilter :: And ({ let v = v ; let mut b = aws_sdk_s3 :: model :: AnalyticsAndOperator :: builder () ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_tags (v . tags . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: Tag :: builder () ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_value (Some (v . value . to_owned ())) ; b . build () }) . collect ())) ; b . build () }) , s3d_smithy_codegen_server_s3 :: model :: AnalyticsFilter :: Prefix (v) => aws_sdk_s3 :: model :: AnalyticsFilter :: Prefix (v . to_owned ()) , s3d_smithy_codegen_server_s3 :: model :: AnalyticsFilter :: Tag (v) => aws_sdk_s3 :: model :: AnalyticsFilter :: Tag ({ let v = v ; let mut b = aws_sdk_s3 :: model :: Tag :: builder () ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_value (Some (v . value . to_owned ())) ; b . build () }) , _ => panic ! ("unknown union value") , } })) ; b . build () })) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_put_bucket_analytics_configuration_output (output : aws_sdk_s3 :: output :: PutBucketAnalyticsConfigurationOutput) -> s3d_smithy_codegen_server_s3 :: output :: PutBucketAnalyticsConfigurationOutput { s3d_smithy_codegen_server_s3 :: output :: PutBucketAnalyticsConfigurationOutput { } }

pub fn conv_to_client_put_bucket_request_payment_input (input : s3d_smithy_codegen_server_s3 :: input :: PutBucketRequestPaymentInput) -> aws_sdk_s3 :: input :: PutBucketRequestPaymentInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: PutBucketRequestPaymentInput :: builder () ; b = b . set_content_md5 (v . content_md5 . map (| v | v . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_request_payment_configuration (Some ({ let v = v . request_payment_configuration ; let mut b = aws_sdk_s3 :: model :: RequestPaymentConfiguration :: builder () ; b = b . set_payer (Some (aws_sdk_s3 :: model :: Payer :: from (v . payer . as_str ()))) ; b . build () })) ; b = b . set_checksum_algorithm (v . checksum_algorithm . map (| v | aws_sdk_s3 :: model :: ChecksumAlgorithm :: from (v . as_str ()))) ; b . build () . unwrap () } }

pub fn conv_from_client_put_bucket_request_payment_output (output : aws_sdk_s3 :: output :: PutBucketRequestPaymentOutput) -> s3d_smithy_codegen_server_s3 :: output :: PutBucketRequestPaymentOutput { s3d_smithy_codegen_server_s3 :: output :: PutBucketRequestPaymentOutput { } }

pub fn conv_to_client_delete_bucket_intelligent_tiering_configuration_input (input : s3d_smithy_codegen_server_s3 :: input :: DeleteBucketIntelligentTieringConfigurationInput) -> aws_sdk_s3 :: input :: DeleteBucketIntelligentTieringConfigurationInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: DeleteBucketIntelligentTieringConfigurationInput :: builder () ; b = b . set_id (Some (v . id . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_delete_bucket_intelligent_tiering_configuration_output (output : aws_sdk_s3 :: output :: DeleteBucketIntelligentTieringConfigurationOutput) -> s3d_smithy_codegen_server_s3 :: output :: DeleteBucketIntelligentTieringConfigurationOutput { s3d_smithy_codegen_server_s3 :: output :: DeleteBucketIntelligentTieringConfigurationOutput { } }

pub fn conv_to_client_list_parts_input (input : s3d_smithy_codegen_server_s3 :: input :: ListPartsInput) -> aws_sdk_s3 :: input :: ListPartsInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: ListPartsInput :: builder () ; b = b . set_max_parts (Some (v . max_parts . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_part_number_marker (v . part_number_marker . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_sse_customer_key (v . sse_customer_key . map (| v | v . to_owned ())) ; b = b . set_request_payer (v . request_payer . map (| v | aws_sdk_s3 :: model :: RequestPayer :: from (v . as_str ()))) ; b = b . set_upload_id (Some (v . upload_id . to_owned ())) ; b = b . set_sse_customer_key_md5 (v . sse_customer_key_md5 . map (| v | v . to_owned ())) ; b = b . set_key (Some (v . key . to_owned ())) ; b = b . set_sse_customer_algorithm (v . sse_customer_algorithm . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_list_parts_output (output : aws_sdk_s3 :: output :: ListPartsOutput) -> s3d_smithy_codegen_server_s3 :: output :: ListPartsOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: ListPartsOutput :: builder () ; b = b . set_upload_id (v . upload_id . map (| v | v . to_owned ())) ; b = b . set_abort_date (v . abort_date . map (| v | v . to_owned ())) ; b = b . set_max_parts (Some (v . max_parts . to_owned ())) ; b = b . set_is_truncated (Some (v . is_truncated . to_owned ())) ; b = b . set_next_part_number_marker (v . next_part_number_marker . map (| v | v . to_owned ())) ; b = b . set_part_number_marker (v . part_number_marker . map (| v | v . to_owned ())) ; b = b . set_checksum_algorithm (v . checksum_algorithm . map (| v | s3d_smithy_codegen_server_s3 :: model :: ChecksumAlgorithm :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_request_charged (v . request_charged . map (| v | s3d_smithy_codegen_server_s3 :: model :: RequestCharged :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_initiator (v . initiator . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Initiator :: builder () ; b = b . set_display_name (v . display_name . map (| v | v . to_owned ())) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_parts (v . parts . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Part :: builder () ; b = b . set_part_number (Some (v . part_number . to_owned ())) ; b = b . set_e_tag (v . e_tag . map (| v | v . to_owned ())) ; b = b . set_checksum_sha1 (v . checksum_sha1 . map (| v | v . to_owned ())) ; b = b . set_checksum_crc32 (v . checksum_crc32 . map (| v | v . to_owned ())) ; b = b . set_last_modified (v . last_modified . map (| v | v . to_owned ())) ; b = b . set_size (Some (v . size . to_owned ())) ; b = b . set_checksum_sha256 (v . checksum_sha256 . map (| v | v . to_owned ())) ; b = b . set_checksum_crc32_c (v . checksum_crc32_c . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b = b . set_key (v . key . map (| v | v . to_owned ())) ; b = b . set_owner (v . owner . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Owner :: builder () ; b = b . set_display_name (v . display_name . map (| v | v . to_owned ())) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_storage_class (v . storage_class . map (| v | s3d_smithy_codegen_server_s3 :: model :: StorageClass :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_abort_rule_id (v . abort_rule_id . map (| v | v . to_owned ())) ; b = b . set_bucket (v . bucket . map (| v | v . to_owned ())) ; b . build () } }

pub fn conv_to_client_get_bucket_tagging_input (input : s3d_smithy_codegen_server_s3 :: input :: GetBucketTaggingInput) -> aws_sdk_s3 :: input :: GetBucketTaggingInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: GetBucketTaggingInput :: builder () ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_get_bucket_tagging_output (output : aws_sdk_s3 :: output :: GetBucketTaggingOutput) -> s3d_smithy_codegen_server_s3 :: output :: GetBucketTaggingOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: GetBucketTaggingOutput :: builder () ; b = b . set_tag_set (v . tag_set . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Tag :: builder () ; b = b . set_key (v . key . map (| v | v . to_owned ())) ; b = b . set_value (v . value . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b . build () . unwrap () } }

pub fn conv_to_client_delete_public_access_block_input (input : s3d_smithy_codegen_server_s3 :: input :: DeletePublicAccessBlockInput) -> aws_sdk_s3 :: input :: DeletePublicAccessBlockInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: DeletePublicAccessBlockInput :: builder () ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_delete_public_access_block_output (output : aws_sdk_s3 :: output :: DeletePublicAccessBlockOutput) -> s3d_smithy_codegen_server_s3 :: output :: DeletePublicAccessBlockOutput { s3d_smithy_codegen_server_s3 :: output :: DeletePublicAccessBlockOutput { } }

pub fn conv_to_client_list_bucket_metrics_configurations_input (input : s3d_smithy_codegen_server_s3 :: input :: ListBucketMetricsConfigurationsInput) -> aws_sdk_s3 :: input :: ListBucketMetricsConfigurationsInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: ListBucketMetricsConfigurationsInput :: builder () ; b = b . set_continuation_token (v . continuation_token . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_list_bucket_metrics_configurations_output (output : aws_sdk_s3 :: output :: ListBucketMetricsConfigurationsOutput) -> s3d_smithy_codegen_server_s3 :: output :: ListBucketMetricsConfigurationsOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: ListBucketMetricsConfigurationsOutput :: builder () ; b = b . set_is_truncated (Some (v . is_truncated . to_owned ())) ; b = b . set_continuation_token (v . continuation_token . map (| v | v . to_owned ())) ; b = b . set_next_continuation_token (v . next_continuation_token . map (| v | v . to_owned ())) ; b = b . set_metrics_configuration_list (v . metrics_configuration_list . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: MetricsConfiguration :: builder () ; b = b . set_filter (v . filter . map (| v | { match v { aws_sdk_s3 :: model :: MetricsFilter :: And (v) => s3d_smithy_codegen_server_s3 :: model :: MetricsFilter :: And ({ let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: MetricsAndOperator :: builder () ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_tags (v . tags . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Tag :: builder () ; b = b . set_key (v . key . map (| v | v . to_owned ())) ; b = b . set_value (v . value . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b = b . set_access_point_arn (v . access_point_arn . map (| v | v . to_owned ())) ; b . build () }) , aws_sdk_s3 :: model :: MetricsFilter :: AccessPointArn (v) => s3d_smithy_codegen_server_s3 :: model :: MetricsFilter :: AccessPointArn (v . to_owned ()) , aws_sdk_s3 :: model :: MetricsFilter :: Tag (v) => s3d_smithy_codegen_server_s3 :: model :: MetricsFilter :: Tag ({ let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Tag :: builder () ; b = b . set_key (v . key . map (| v | v . to_owned ())) ; b = b . set_value (v . value . map (| v | v . to_owned ())) ; b . build () }) , aws_sdk_s3 :: model :: MetricsFilter :: Prefix (v) => s3d_smithy_codegen_server_s3 :: model :: MetricsFilter :: Prefix (v . to_owned ()) , _ => panic ! ("unknown union value") , } })) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b . build () } }

pub fn conv_to_client_put_bucket_ownership_controls_input (input : s3d_smithy_codegen_server_s3 :: input :: PutBucketOwnershipControlsInput) -> aws_sdk_s3 :: input :: PutBucketOwnershipControlsInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: PutBucketOwnershipControlsInput :: builder () ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_ownership_controls (Some ({ let v = v . ownership_controls ; let mut b = aws_sdk_s3 :: model :: OwnershipControls :: builder () ; b = b . set_rules (Some (v . rules . into_iter () . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: OwnershipControlsRule :: builder () ; b = b . set_object_ownership (Some (aws_sdk_s3 :: model :: ObjectOwnership :: from (v . object_ownership . as_str ()))) ; b . build () }) . collect ())) ; b . build () })) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_content_md5 (v . content_md5 . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_put_bucket_ownership_controls_output (output : aws_sdk_s3 :: output :: PutBucketOwnershipControlsOutput) -> s3d_smithy_codegen_server_s3 :: output :: PutBucketOwnershipControlsOutput { s3d_smithy_codegen_server_s3 :: output :: PutBucketOwnershipControlsOutput { } }

pub fn conv_to_client_delete_bucket_replication_input (input : s3d_smithy_codegen_server_s3 :: input :: DeleteBucketReplicationInput) -> aws_sdk_s3 :: input :: DeleteBucketReplicationInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: DeleteBucketReplicationInput :: builder () ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_delete_bucket_replication_output (output : aws_sdk_s3 :: output :: DeleteBucketReplicationOutput) -> s3d_smithy_codegen_server_s3 :: output :: DeleteBucketReplicationOutput { s3d_smithy_codegen_server_s3 :: output :: DeleteBucketReplicationOutput { } }

pub fn conv_to_client_get_bucket_policy_input (input : s3d_smithy_codegen_server_s3 :: input :: GetBucketPolicyInput) -> aws_sdk_s3 :: input :: GetBucketPolicyInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: GetBucketPolicyInput :: builder () ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_get_bucket_policy_output (output : aws_sdk_s3 :: output :: GetBucketPolicyOutput) -> s3d_smithy_codegen_server_s3 :: output :: GetBucketPolicyOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: GetBucketPolicyOutput :: builder () ; b = b . set_policy (v . policy . map (| v | v . to_owned ())) ; b . build () } }

pub fn conv_to_client_get_bucket_lifecycle_configuration_input (input : s3d_smithy_codegen_server_s3 :: input :: GetBucketLifecycleConfigurationInput) -> aws_sdk_s3 :: input :: GetBucketLifecycleConfigurationInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: GetBucketLifecycleConfigurationInput :: builder () ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_get_bucket_lifecycle_configuration_output (output : aws_sdk_s3 :: output :: GetBucketLifecycleConfigurationOutput) -> s3d_smithy_codegen_server_s3 :: output :: GetBucketLifecycleConfigurationOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: GetBucketLifecycleConfigurationOutput :: builder () ; b = b . set_rules (v . rules . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: LifecycleRule :: builder () ; b = b . set_abort_incomplete_multipart_upload (v . abort_incomplete_multipart_upload . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: AbortIncompleteMultipartUpload :: builder () ; b = b . set_days_after_initiation (Some (v . days_after_initiation . to_owned ())) ; b . build () })) ; b = b . set_filter (v . filter . map (| v | { match v { aws_sdk_s3 :: model :: LifecycleRuleFilter :: ObjectSizeLessThan (v) => s3d_smithy_codegen_server_s3 :: model :: LifecycleRuleFilter :: ObjectSizeLessThan (v . to_owned ()) , aws_sdk_s3 :: model :: LifecycleRuleFilter :: Prefix (v) => s3d_smithy_codegen_server_s3 :: model :: LifecycleRuleFilter :: Prefix (v . to_owned ()) , aws_sdk_s3 :: model :: LifecycleRuleFilter :: ObjectSizeGreaterThan (v) => s3d_smithy_codegen_server_s3 :: model :: LifecycleRuleFilter :: ObjectSizeGreaterThan (v . to_owned ()) , aws_sdk_s3 :: model :: LifecycleRuleFilter :: And (v) => s3d_smithy_codegen_server_s3 :: model :: LifecycleRuleFilter :: And ({ let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: LifecycleRuleAndOperator :: builder () ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_object_size_greater_than (Some (v . object_size_greater_than . to_owned ())) ; b = b . set_tags (v . tags . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Tag :: builder () ; b = b . set_key (v . key . map (| v | v . to_owned ())) ; b = b . set_value (v . value . map (| v | v . to_owned ())) ; b . build () }) . collect ())) ; b = b . set_object_size_less_than (Some (v . object_size_less_than . to_owned ())) ; b . build () }) , aws_sdk_s3 :: model :: LifecycleRuleFilter :: Tag (v) => s3d_smithy_codegen_server_s3 :: model :: LifecycleRuleFilter :: Tag ({ let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Tag :: builder () ; b = b . set_key (v . key . map (| v | v . to_owned ())) ; b = b . set_value (v . value . map (| v | v . to_owned ())) ; b . build () }) , _ => panic ! ("unknown union value") , } })) ; b = b . set_prefix (v . prefix . map (| v | v . to_owned ())) ; b = b . set_status (v . status . map (| v | s3d_smithy_codegen_server_s3 :: model :: ExpirationStatus :: from_str (v . as_str ()) . expect ("todo guy"))) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b = b . set_noncurrent_version_expiration (v . noncurrent_version_expiration . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: NoncurrentVersionExpiration :: builder () ; b = b . set_newer_noncurrent_versions (Some (v . newer_noncurrent_versions . to_owned ())) ; b = b . set_noncurrent_days (Some (v . noncurrent_days . to_owned ())) ; b . build () })) ; b = b . set_noncurrent_version_transitions (v . noncurrent_version_transitions . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: NoncurrentVersionTransition :: builder () ; b = b . set_newer_noncurrent_versions (Some (v . newer_noncurrent_versions . to_owned ())) ; b = b . set_noncurrent_days (Some (v . noncurrent_days . to_owned ())) ; b = b . set_storage_class (v . storage_class . map (| v | s3d_smithy_codegen_server_s3 :: model :: TransitionStorageClass :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () }) . collect ())) ; b = b . set_expiration (v . expiration . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: LifecycleExpiration :: builder () ; b = b . set_days (Some (v . days . to_owned ())) ; b = b . set_date (v . date . map (| v | v . to_owned ())) ; b = b . set_expired_object_delete_marker (Some (v . expired_object_delete_marker . to_owned ())) ; b . build () })) ; b = b . set_transitions (v . transitions . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = s3d_smithy_codegen_server_s3 :: model :: Transition :: builder () ; b = b . set_date (v . date . map (| v | v . to_owned ())) ; b = b . set_days (Some (v . days . to_owned ())) ; b = b . set_storage_class (v . storage_class . map (| v | s3d_smithy_codegen_server_s3 :: model :: TransitionStorageClass :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () }) . collect ())) ; b . build () . unwrap () }) . collect ())) ; b . build () } }

pub fn conv_to_client_put_bucket_acl_input (input : s3d_smithy_codegen_server_s3 :: input :: PutBucketAclInput) -> aws_sdk_s3 :: input :: PutBucketAclInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: PutBucketAclInput :: builder () ; b = b . set_grant_read (v . grant_read . map (| v | v . to_owned ())) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_checksum_algorithm (v . checksum_algorithm . map (| v | aws_sdk_s3 :: model :: ChecksumAlgorithm :: from (v . as_str ()))) ; b = b . set_acl (v . acl . map (| v | aws_sdk_s3 :: model :: BucketCannedAcl :: from (v . as_str ()))) ; b = b . set_grant_full_control (v . grant_full_control . map (| v | v . to_owned ())) ; b = b . set_grant_write_acp (v . grant_write_acp . map (| v | v . to_owned ())) ; b = b . set_access_control_policy (v . access_control_policy . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: AccessControlPolicy :: builder () ; b = b . set_grants (v . grants . map (| v | v . into_iter () . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: Grant :: builder () ; b = b . set_grantee (v . grantee . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: Grantee :: builder () ; b = b . set_type (Some (aws_sdk_s3 :: model :: Type :: from (v . r#type . as_str ()))) ; b = b . set_uri (v . uri . map (| v | v . to_owned ())) ; b = b . set_display_name (v . display_name . map (| v | v . to_owned ())) ; b = b . set_email_address (v . email_address . map (| v | v . to_owned ())) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b . build () })) ; b = b . set_permission (v . permission . map (| v | aws_sdk_s3 :: model :: Permission :: from (v . as_str ()))) ; b . build () }) . collect ())) ; b = b . set_owner (v . owner . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: Owner :: builder () ; b = b . set_display_name (v . display_name . map (| v | v . to_owned ())) ; b = b . set_id (v . id . map (| v | v . to_owned ())) ; b . build () })) ; b . build () })) ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_content_md5 (v . content_md5 . map (| v | v . to_owned ())) ; b = b . set_grant_read_acp (v . grant_read_acp . map (| v | v . to_owned ())) ; b = b . set_grant_write (v . grant_write . map (| v | v . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_put_bucket_acl_output (output : aws_sdk_s3 :: output :: PutBucketAclOutput) -> s3d_smithy_codegen_server_s3 :: output :: PutBucketAclOutput { s3d_smithy_codegen_server_s3 :: output :: PutBucketAclOutput { } }

pub fn conv_to_client_put_object_legal_hold_input (input : s3d_smithy_codegen_server_s3 :: input :: PutObjectLegalHoldInput) -> aws_sdk_s3 :: input :: PutObjectLegalHoldInput { { let v = input ; let mut b = aws_sdk_s3 :: input :: PutObjectLegalHoldInput :: builder () ; b = b . set_bucket (Some (v . bucket . to_owned ())) ; b = b . set_content_md5 (v . content_md5 . map (| v | v . to_owned ())) ; b = b . set_legal_hold (v . legal_hold . map (| v | { let v = v ; let mut b = aws_sdk_s3 :: model :: ObjectLockLegalHold :: builder () ; b = b . set_status (v . status . map (| v | aws_sdk_s3 :: model :: ObjectLockLegalHoldStatus :: from (v . as_str ()))) ; b . build () })) ; b = b . set_expected_bucket_owner (v . expected_bucket_owner . map (| v | v . to_owned ())) ; b = b . set_checksum_algorithm (v . checksum_algorithm . map (| v | aws_sdk_s3 :: model :: ChecksumAlgorithm :: from (v . as_str ()))) ; b = b . set_version_id (v . version_id . map (| v | v . to_owned ())) ; b = b . set_request_payer (v . request_payer . map (| v | aws_sdk_s3 :: model :: RequestPayer :: from (v . as_str ()))) ; b = b . set_key (Some (v . key . to_owned ())) ; b . build () . unwrap () } }

pub fn conv_from_client_put_object_legal_hold_output (output : aws_sdk_s3 :: output :: PutObjectLegalHoldOutput) -> s3d_smithy_codegen_server_s3 :: output :: PutObjectLegalHoldOutput { { let v = output ; let mut b = s3d_smithy_codegen_server_s3 :: output :: PutObjectLegalHoldOutput :: builder () ; b = b . set_request_charged (v . request_charged . map (| v | s3d_smithy_codegen_server_s3 :: model :: RequestCharged :: from_str (v . as_str ()) . expect ("todo guy"))) ; b . build () } }

