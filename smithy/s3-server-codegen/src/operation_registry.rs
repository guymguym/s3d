// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::all)]
pub struct OperationRegistry<
    B,
    Op0,
    In0,
    Op1,
    In1,
    Op2,
    In2,
    Op3,
    In3,
    Op4,
    In4,
    Op5,
    In5,
    Op6,
    In6,
    Op7,
    In7,
    Op8,
    In8,
    Op9,
    In9,
    Op10,
    In10,
    Op11,
    In11,
    Op12,
    In12,
    Op13,
    In13,
    Op14,
    In14,
    Op15,
    In15,
    Op16,
    In16,
    Op17,
    In17,
    Op18,
    In18,
    Op19,
    In19,
    Op20,
    In20,
    Op21,
    In21,
    Op22,
    In22,
    Op23,
    In23,
    Op24,
    In24,
    Op25,
    In25,
    Op26,
    In26,
    Op27,
    In27,
    Op28,
    In28,
    Op29,
    In29,
    Op30,
    In30,
    Op31,
    In31,
    Op32,
    In32,
    Op33,
    In33,
    Op34,
    In34,
    Op35,
    In35,
    Op36,
    In36,
    Op37,
    In37,
    Op38,
    In38,
    Op39,
    In39,
    Op40,
    In40,
    Op41,
    In41,
    Op42,
    In42,
    Op43,
    In43,
    Op44,
    In44,
    Op45,
    In45,
    Op46,
    In46,
    Op47,
    In47,
    Op48,
    In48,
    Op49,
    In49,
    Op50,
    In50,
    Op51,
    In51,
    Op52,
    In52,
    Op53,
    In53,
    Op54,
    In54,
    Op55,
    In55,
    Op56,
    In56,
    Op57,
    In57,
    Op58,
    In58,
    Op59,
    In59,
    Op60,
    In60,
    Op61,
    In61,
    Op62,
    In62,
    Op63,
    In63,
    Op64,
    In64,
    Op65,
    In65,
    Op66,
    In66,
    Op67,
    In67,
    Op68,
    In68,
    Op69,
    In69,
    Op70,
    In70,
    Op71,
    In71,
    Op72,
    In72,
    Op73,
    In73,
    Op74,
    In74,
    Op75,
    In75,
    Op76,
    In76,
    Op77,
    In77,
    Op78,
    In78,
    Op79,
    In79,
    Op80,
    In80,
    Op81,
    In81,
    Op82,
    In82,
    Op83,
    In83,
    Op84,
    In84,
    Op85,
    In85,
    Op86,
    In86,
    Op87,
    In87,
    Op88,
    In88,
    Op89,
    In89,
    Op90,
    In90,
> {
    abort_multipart_upload: Op0,
    complete_multipart_upload: Op1,
    copy_object: Op2,
    create_bucket: Op3,
    create_multipart_upload: Op4,
    delete_bucket: Op5,
    delete_bucket_analytics_configuration: Op6,
    delete_bucket_cors: Op7,
    delete_bucket_encryption: Op8,
    delete_bucket_intelligent_tiering_configuration: Op9,
    delete_bucket_inventory_configuration: Op10,
    delete_bucket_lifecycle: Op11,
    delete_bucket_metrics_configuration: Op12,
    delete_bucket_ownership_controls: Op13,
    delete_bucket_policy: Op14,
    delete_bucket_replication: Op15,
    delete_bucket_tagging: Op16,
    delete_bucket_website: Op17,
    delete_object: Op18,
    delete_objects: Op19,
    delete_object_tagging: Op20,
    delete_public_access_block: Op21,
    get_bucket_accelerate_configuration: Op22,
    get_bucket_acl: Op23,
    get_bucket_analytics_configuration: Op24,
    get_bucket_cors: Op25,
    get_bucket_encryption: Op26,
    get_bucket_intelligent_tiering_configuration: Op27,
    get_bucket_inventory_configuration: Op28,
    get_bucket_lifecycle_configuration: Op29,
    get_bucket_location: Op30,
    get_bucket_logging: Op31,
    get_bucket_metrics_configuration: Op32,
    get_bucket_notification_configuration: Op33,
    get_bucket_ownership_controls: Op34,
    get_bucket_policy: Op35,
    get_bucket_policy_status: Op36,
    get_bucket_replication: Op37,
    get_bucket_request_payment: Op38,
    get_bucket_tagging: Op39,
    get_bucket_versioning: Op40,
    get_bucket_website: Op41,
    get_object: Op42,
    get_object_acl: Op43,
    get_object_legal_hold: Op44,
    get_object_lock_configuration: Op45,
    get_object_retention: Op46,
    get_object_tagging: Op47,
    get_object_torrent: Op48,
    get_public_access_block: Op49,
    head_bucket: Op50,
    head_object: Op51,
    list_bucket_analytics_configurations: Op52,
    list_bucket_intelligent_tiering_configurations: Op53,
    list_bucket_inventory_configurations: Op54,
    list_bucket_metrics_configurations: Op55,
    list_buckets: Op56,
    list_multipart_uploads: Op57,
    list_objects: Op58,
    list_objects_v2: Op59,
    list_object_versions: Op60,
    list_parts: Op61,
    put_bucket_accelerate_configuration: Op62,
    put_bucket_acl: Op63,
    put_bucket_analytics_configuration: Op64,
    put_bucket_cors: Op65,
    put_bucket_encryption: Op66,
    put_bucket_intelligent_tiering_configuration: Op67,
    put_bucket_inventory_configuration: Op68,
    put_bucket_lifecycle_configuration: Op69,
    put_bucket_logging: Op70,
    put_bucket_metrics_configuration: Op71,
    put_bucket_notification_configuration: Op72,
    put_bucket_ownership_controls: Op73,
    put_bucket_policy: Op74,
    put_bucket_replication: Op75,
    put_bucket_request_payment: Op76,
    put_bucket_tagging: Op77,
    put_bucket_versioning: Op78,
    put_bucket_website: Op79,
    put_object: Op80,
    put_object_acl: Op81,
    put_object_legal_hold: Op82,
    put_object_lock_configuration: Op83,
    put_object_retention: Op84,
    put_object_tagging: Op85,
    put_public_access_block: Op86,
    restore_object: Op87,
    upload_part: Op88,
    upload_part_copy: Op89,
    write_get_object_response: Op90,
    _phantom: std::marker::PhantomData<(
        B,
        In0,
        In1,
        In2,
        In3,
        In4,
        In5,
        In6,
        In7,
        In8,
        In9,
        In10,
        In11,
        In12,
        In13,
        In14,
        In15,
        In16,
        In17,
        In18,
        In19,
        In20,
        In21,
        In22,
        In23,
        In24,
        In25,
        In26,
        In27,
        In28,
        In29,
        In30,
        In31,
        In32,
        In33,
        In34,
        In35,
        In36,
        In37,
        In38,
        In39,
        In40,
        In41,
        In42,
        In43,
        In44,
        In45,
        In46,
        In47,
        In48,
        In49,
        In50,
        In51,
        In52,
        In53,
        In54,
        In55,
        In56,
        In57,
        In58,
        In59,
        In60,
        In61,
        In62,
        In63,
        In64,
        In65,
        In66,
        In67,
        In68,
        In69,
        In70,
        In71,
        In72,
        In73,
        In74,
        In75,
        In76,
        In77,
        In78,
        In79,
        In80,
        In81,
        In82,
        In83,
        In84,
        In85,
        In86,
        In87,
        In88,
        In89,
        In90,
    )>,
}
#[allow(clippy::all)]
pub struct OperationRegistryBuilder<
    B,
    Op0,
    In0,
    Op1,
    In1,
    Op2,
    In2,
    Op3,
    In3,
    Op4,
    In4,
    Op5,
    In5,
    Op6,
    In6,
    Op7,
    In7,
    Op8,
    In8,
    Op9,
    In9,
    Op10,
    In10,
    Op11,
    In11,
    Op12,
    In12,
    Op13,
    In13,
    Op14,
    In14,
    Op15,
    In15,
    Op16,
    In16,
    Op17,
    In17,
    Op18,
    In18,
    Op19,
    In19,
    Op20,
    In20,
    Op21,
    In21,
    Op22,
    In22,
    Op23,
    In23,
    Op24,
    In24,
    Op25,
    In25,
    Op26,
    In26,
    Op27,
    In27,
    Op28,
    In28,
    Op29,
    In29,
    Op30,
    In30,
    Op31,
    In31,
    Op32,
    In32,
    Op33,
    In33,
    Op34,
    In34,
    Op35,
    In35,
    Op36,
    In36,
    Op37,
    In37,
    Op38,
    In38,
    Op39,
    In39,
    Op40,
    In40,
    Op41,
    In41,
    Op42,
    In42,
    Op43,
    In43,
    Op44,
    In44,
    Op45,
    In45,
    Op46,
    In46,
    Op47,
    In47,
    Op48,
    In48,
    Op49,
    In49,
    Op50,
    In50,
    Op51,
    In51,
    Op52,
    In52,
    Op53,
    In53,
    Op54,
    In54,
    Op55,
    In55,
    Op56,
    In56,
    Op57,
    In57,
    Op58,
    In58,
    Op59,
    In59,
    Op60,
    In60,
    Op61,
    In61,
    Op62,
    In62,
    Op63,
    In63,
    Op64,
    In64,
    Op65,
    In65,
    Op66,
    In66,
    Op67,
    In67,
    Op68,
    In68,
    Op69,
    In69,
    Op70,
    In70,
    Op71,
    In71,
    Op72,
    In72,
    Op73,
    In73,
    Op74,
    In74,
    Op75,
    In75,
    Op76,
    In76,
    Op77,
    In77,
    Op78,
    In78,
    Op79,
    In79,
    Op80,
    In80,
    Op81,
    In81,
    Op82,
    In82,
    Op83,
    In83,
    Op84,
    In84,
    Op85,
    In85,
    Op86,
    In86,
    Op87,
    In87,
    Op88,
    In88,
    Op89,
    In89,
    Op90,
    In90,
> {
    abort_multipart_upload: Option<Op0>,
    complete_multipart_upload: Option<Op1>,
    copy_object: Option<Op2>,
    create_bucket: Option<Op3>,
    create_multipart_upload: Option<Op4>,
    delete_bucket: Option<Op5>,
    delete_bucket_analytics_configuration: Option<Op6>,
    delete_bucket_cors: Option<Op7>,
    delete_bucket_encryption: Option<Op8>,
    delete_bucket_intelligent_tiering_configuration: Option<Op9>,
    delete_bucket_inventory_configuration: Option<Op10>,
    delete_bucket_lifecycle: Option<Op11>,
    delete_bucket_metrics_configuration: Option<Op12>,
    delete_bucket_ownership_controls: Option<Op13>,
    delete_bucket_policy: Option<Op14>,
    delete_bucket_replication: Option<Op15>,
    delete_bucket_tagging: Option<Op16>,
    delete_bucket_website: Option<Op17>,
    delete_object: Option<Op18>,
    delete_objects: Option<Op19>,
    delete_object_tagging: Option<Op20>,
    delete_public_access_block: Option<Op21>,
    get_bucket_accelerate_configuration: Option<Op22>,
    get_bucket_acl: Option<Op23>,
    get_bucket_analytics_configuration: Option<Op24>,
    get_bucket_cors: Option<Op25>,
    get_bucket_encryption: Option<Op26>,
    get_bucket_intelligent_tiering_configuration: Option<Op27>,
    get_bucket_inventory_configuration: Option<Op28>,
    get_bucket_lifecycle_configuration: Option<Op29>,
    get_bucket_location: Option<Op30>,
    get_bucket_logging: Option<Op31>,
    get_bucket_metrics_configuration: Option<Op32>,
    get_bucket_notification_configuration: Option<Op33>,
    get_bucket_ownership_controls: Option<Op34>,
    get_bucket_policy: Option<Op35>,
    get_bucket_policy_status: Option<Op36>,
    get_bucket_replication: Option<Op37>,
    get_bucket_request_payment: Option<Op38>,
    get_bucket_tagging: Option<Op39>,
    get_bucket_versioning: Option<Op40>,
    get_bucket_website: Option<Op41>,
    get_object: Option<Op42>,
    get_object_acl: Option<Op43>,
    get_object_legal_hold: Option<Op44>,
    get_object_lock_configuration: Option<Op45>,
    get_object_retention: Option<Op46>,
    get_object_tagging: Option<Op47>,
    get_object_torrent: Option<Op48>,
    get_public_access_block: Option<Op49>,
    head_bucket: Option<Op50>,
    head_object: Option<Op51>,
    list_bucket_analytics_configurations: Option<Op52>,
    list_bucket_intelligent_tiering_configurations: Option<Op53>,
    list_bucket_inventory_configurations: Option<Op54>,
    list_bucket_metrics_configurations: Option<Op55>,
    list_buckets: Option<Op56>,
    list_multipart_uploads: Option<Op57>,
    list_objects: Option<Op58>,
    list_objects_v2: Option<Op59>,
    list_object_versions: Option<Op60>,
    list_parts: Option<Op61>,
    put_bucket_accelerate_configuration: Option<Op62>,
    put_bucket_acl: Option<Op63>,
    put_bucket_analytics_configuration: Option<Op64>,
    put_bucket_cors: Option<Op65>,
    put_bucket_encryption: Option<Op66>,
    put_bucket_intelligent_tiering_configuration: Option<Op67>,
    put_bucket_inventory_configuration: Option<Op68>,
    put_bucket_lifecycle_configuration: Option<Op69>,
    put_bucket_logging: Option<Op70>,
    put_bucket_metrics_configuration: Option<Op71>,
    put_bucket_notification_configuration: Option<Op72>,
    put_bucket_ownership_controls: Option<Op73>,
    put_bucket_policy: Option<Op74>,
    put_bucket_replication: Option<Op75>,
    put_bucket_request_payment: Option<Op76>,
    put_bucket_tagging: Option<Op77>,
    put_bucket_versioning: Option<Op78>,
    put_bucket_website: Option<Op79>,
    put_object: Option<Op80>,
    put_object_acl: Option<Op81>,
    put_object_legal_hold: Option<Op82>,
    put_object_lock_configuration: Option<Op83>,
    put_object_retention: Option<Op84>,
    put_object_tagging: Option<Op85>,
    put_public_access_block: Option<Op86>,
    restore_object: Option<Op87>,
    upload_part: Option<Op88>,
    upload_part_copy: Option<Op89>,
    write_get_object_response: Option<Op90>,
    _phantom: std::marker::PhantomData<(
        B,
        In0,
        In1,
        In2,
        In3,
        In4,
        In5,
        In6,
        In7,
        In8,
        In9,
        In10,
        In11,
        In12,
        In13,
        In14,
        In15,
        In16,
        In17,
        In18,
        In19,
        In20,
        In21,
        In22,
        In23,
        In24,
        In25,
        In26,
        In27,
        In28,
        In29,
        In30,
        In31,
        In32,
        In33,
        In34,
        In35,
        In36,
        In37,
        In38,
        In39,
        In40,
        In41,
        In42,
        In43,
        In44,
        In45,
        In46,
        In47,
        In48,
        In49,
        In50,
        In51,
        In52,
        In53,
        In54,
        In55,
        In56,
        In57,
        In58,
        In59,
        In60,
        In61,
        In62,
        In63,
        In64,
        In65,
        In66,
        In67,
        In68,
        In69,
        In70,
        In71,
        In72,
        In73,
        In74,
        In75,
        In76,
        In77,
        In78,
        In79,
        In80,
        In81,
        In82,
        In83,
        In84,
        In85,
        In86,
        In87,
        In88,
        In89,
        In90,
    )>,
}
#[derive(std::fmt::Debug)]
pub enum OperationRegistryBuilderError {
    UninitializedField(&'static str),
}
impl std::fmt::Display for OperationRegistryBuilderError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::UninitializedField(v) => write!(f, "{}", v),
        }
    }
}
impl std::error::Error for OperationRegistryBuilderError {}
impl<
        B,
        Op0,
        In0,
        Op1,
        In1,
        Op2,
        In2,
        Op3,
        In3,
        Op4,
        In4,
        Op5,
        In5,
        Op6,
        In6,
        Op7,
        In7,
        Op8,
        In8,
        Op9,
        In9,
        Op10,
        In10,
        Op11,
        In11,
        Op12,
        In12,
        Op13,
        In13,
        Op14,
        In14,
        Op15,
        In15,
        Op16,
        In16,
        Op17,
        In17,
        Op18,
        In18,
        Op19,
        In19,
        Op20,
        In20,
        Op21,
        In21,
        Op22,
        In22,
        Op23,
        In23,
        Op24,
        In24,
        Op25,
        In25,
        Op26,
        In26,
        Op27,
        In27,
        Op28,
        In28,
        Op29,
        In29,
        Op30,
        In30,
        Op31,
        In31,
        Op32,
        In32,
        Op33,
        In33,
        Op34,
        In34,
        Op35,
        In35,
        Op36,
        In36,
        Op37,
        In37,
        Op38,
        In38,
        Op39,
        In39,
        Op40,
        In40,
        Op41,
        In41,
        Op42,
        In42,
        Op43,
        In43,
        Op44,
        In44,
        Op45,
        In45,
        Op46,
        In46,
        Op47,
        In47,
        Op48,
        In48,
        Op49,
        In49,
        Op50,
        In50,
        Op51,
        In51,
        Op52,
        In52,
        Op53,
        In53,
        Op54,
        In54,
        Op55,
        In55,
        Op56,
        In56,
        Op57,
        In57,
        Op58,
        In58,
        Op59,
        In59,
        Op60,
        In60,
        Op61,
        In61,
        Op62,
        In62,
        Op63,
        In63,
        Op64,
        In64,
        Op65,
        In65,
        Op66,
        In66,
        Op67,
        In67,
        Op68,
        In68,
        Op69,
        In69,
        Op70,
        In70,
        Op71,
        In71,
        Op72,
        In72,
        Op73,
        In73,
        Op74,
        In74,
        Op75,
        In75,
        Op76,
        In76,
        Op77,
        In77,
        Op78,
        In78,
        Op79,
        In79,
        Op80,
        In80,
        Op81,
        In81,
        Op82,
        In82,
        Op83,
        In83,
        Op84,
        In84,
        Op85,
        In85,
        Op86,
        In86,
        Op87,
        In87,
        Op88,
        In88,
        Op89,
        In89,
        Op90,
        In90,
    > Default
    for OperationRegistryBuilder<
        B,
        Op0,
        In0,
        Op1,
        In1,
        Op2,
        In2,
        Op3,
        In3,
        Op4,
        In4,
        Op5,
        In5,
        Op6,
        In6,
        Op7,
        In7,
        Op8,
        In8,
        Op9,
        In9,
        Op10,
        In10,
        Op11,
        In11,
        Op12,
        In12,
        Op13,
        In13,
        Op14,
        In14,
        Op15,
        In15,
        Op16,
        In16,
        Op17,
        In17,
        Op18,
        In18,
        Op19,
        In19,
        Op20,
        In20,
        Op21,
        In21,
        Op22,
        In22,
        Op23,
        In23,
        Op24,
        In24,
        Op25,
        In25,
        Op26,
        In26,
        Op27,
        In27,
        Op28,
        In28,
        Op29,
        In29,
        Op30,
        In30,
        Op31,
        In31,
        Op32,
        In32,
        Op33,
        In33,
        Op34,
        In34,
        Op35,
        In35,
        Op36,
        In36,
        Op37,
        In37,
        Op38,
        In38,
        Op39,
        In39,
        Op40,
        In40,
        Op41,
        In41,
        Op42,
        In42,
        Op43,
        In43,
        Op44,
        In44,
        Op45,
        In45,
        Op46,
        In46,
        Op47,
        In47,
        Op48,
        In48,
        Op49,
        In49,
        Op50,
        In50,
        Op51,
        In51,
        Op52,
        In52,
        Op53,
        In53,
        Op54,
        In54,
        Op55,
        In55,
        Op56,
        In56,
        Op57,
        In57,
        Op58,
        In58,
        Op59,
        In59,
        Op60,
        In60,
        Op61,
        In61,
        Op62,
        In62,
        Op63,
        In63,
        Op64,
        In64,
        Op65,
        In65,
        Op66,
        In66,
        Op67,
        In67,
        Op68,
        In68,
        Op69,
        In69,
        Op70,
        In70,
        Op71,
        In71,
        Op72,
        In72,
        Op73,
        In73,
        Op74,
        In74,
        Op75,
        In75,
        Op76,
        In76,
        Op77,
        In77,
        Op78,
        In78,
        Op79,
        In79,
        Op80,
        In80,
        Op81,
        In81,
        Op82,
        In82,
        Op83,
        In83,
        Op84,
        In84,
        Op85,
        In85,
        Op86,
        In86,
        Op87,
        In87,
        Op88,
        In88,
        Op89,
        In89,
        Op90,
        In90,
    >
{
    fn default() -> Self {
        Self {
            abort_multipart_upload: Default::default(),
            complete_multipart_upload: Default::default(),
            copy_object: Default::default(),
            create_bucket: Default::default(),
            create_multipart_upload: Default::default(),
            delete_bucket: Default::default(),
            delete_bucket_analytics_configuration: Default::default(),
            delete_bucket_cors: Default::default(),
            delete_bucket_encryption: Default::default(),
            delete_bucket_intelligent_tiering_configuration: Default::default(),
            delete_bucket_inventory_configuration: Default::default(),
            delete_bucket_lifecycle: Default::default(),
            delete_bucket_metrics_configuration: Default::default(),
            delete_bucket_ownership_controls: Default::default(),
            delete_bucket_policy: Default::default(),
            delete_bucket_replication: Default::default(),
            delete_bucket_tagging: Default::default(),
            delete_bucket_website: Default::default(),
            delete_object: Default::default(),
            delete_objects: Default::default(),
            delete_object_tagging: Default::default(),
            delete_public_access_block: Default::default(),
            get_bucket_accelerate_configuration: Default::default(),
            get_bucket_acl: Default::default(),
            get_bucket_analytics_configuration: Default::default(),
            get_bucket_cors: Default::default(),
            get_bucket_encryption: Default::default(),
            get_bucket_intelligent_tiering_configuration: Default::default(),
            get_bucket_inventory_configuration: Default::default(),
            get_bucket_lifecycle_configuration: Default::default(),
            get_bucket_location: Default::default(),
            get_bucket_logging: Default::default(),
            get_bucket_metrics_configuration: Default::default(),
            get_bucket_notification_configuration: Default::default(),
            get_bucket_ownership_controls: Default::default(),
            get_bucket_policy: Default::default(),
            get_bucket_policy_status: Default::default(),
            get_bucket_replication: Default::default(),
            get_bucket_request_payment: Default::default(),
            get_bucket_tagging: Default::default(),
            get_bucket_versioning: Default::default(),
            get_bucket_website: Default::default(),
            get_object: Default::default(),
            get_object_acl: Default::default(),
            get_object_legal_hold: Default::default(),
            get_object_lock_configuration: Default::default(),
            get_object_retention: Default::default(),
            get_object_tagging: Default::default(),
            get_object_torrent: Default::default(),
            get_public_access_block: Default::default(),
            head_bucket: Default::default(),
            head_object: Default::default(),
            list_bucket_analytics_configurations: Default::default(),
            list_bucket_intelligent_tiering_configurations: Default::default(),
            list_bucket_inventory_configurations: Default::default(),
            list_bucket_metrics_configurations: Default::default(),
            list_buckets: Default::default(),
            list_multipart_uploads: Default::default(),
            list_objects: Default::default(),
            list_objects_v2: Default::default(),
            list_object_versions: Default::default(),
            list_parts: Default::default(),
            put_bucket_accelerate_configuration: Default::default(),
            put_bucket_acl: Default::default(),
            put_bucket_analytics_configuration: Default::default(),
            put_bucket_cors: Default::default(),
            put_bucket_encryption: Default::default(),
            put_bucket_intelligent_tiering_configuration: Default::default(),
            put_bucket_inventory_configuration: Default::default(),
            put_bucket_lifecycle_configuration: Default::default(),
            put_bucket_logging: Default::default(),
            put_bucket_metrics_configuration: Default::default(),
            put_bucket_notification_configuration: Default::default(),
            put_bucket_ownership_controls: Default::default(),
            put_bucket_policy: Default::default(),
            put_bucket_replication: Default::default(),
            put_bucket_request_payment: Default::default(),
            put_bucket_tagging: Default::default(),
            put_bucket_versioning: Default::default(),
            put_bucket_website: Default::default(),
            put_object: Default::default(),
            put_object_acl: Default::default(),
            put_object_legal_hold: Default::default(),
            put_object_lock_configuration: Default::default(),
            put_object_retention: Default::default(),
            put_object_tagging: Default::default(),
            put_public_access_block: Default::default(),
            restore_object: Default::default(),
            upload_part: Default::default(),
            upload_part_copy: Default::default(),
            write_get_object_response: Default::default(),
            _phantom: std::marker::PhantomData,
        }
    }
}
#[allow(clippy::all)]
impl<
        B,
        Op0,
        In0,
        Op1,
        In1,
        Op2,
        In2,
        Op3,
        In3,
        Op4,
        In4,
        Op5,
        In5,
        Op6,
        In6,
        Op7,
        In7,
        Op8,
        In8,
        Op9,
        In9,
        Op10,
        In10,
        Op11,
        In11,
        Op12,
        In12,
        Op13,
        In13,
        Op14,
        In14,
        Op15,
        In15,
        Op16,
        In16,
        Op17,
        In17,
        Op18,
        In18,
        Op19,
        In19,
        Op20,
        In20,
        Op21,
        In21,
        Op22,
        In22,
        Op23,
        In23,
        Op24,
        In24,
        Op25,
        In25,
        Op26,
        In26,
        Op27,
        In27,
        Op28,
        In28,
        Op29,
        In29,
        Op30,
        In30,
        Op31,
        In31,
        Op32,
        In32,
        Op33,
        In33,
        Op34,
        In34,
        Op35,
        In35,
        Op36,
        In36,
        Op37,
        In37,
        Op38,
        In38,
        Op39,
        In39,
        Op40,
        In40,
        Op41,
        In41,
        Op42,
        In42,
        Op43,
        In43,
        Op44,
        In44,
        Op45,
        In45,
        Op46,
        In46,
        Op47,
        In47,
        Op48,
        In48,
        Op49,
        In49,
        Op50,
        In50,
        Op51,
        In51,
        Op52,
        In52,
        Op53,
        In53,
        Op54,
        In54,
        Op55,
        In55,
        Op56,
        In56,
        Op57,
        In57,
        Op58,
        In58,
        Op59,
        In59,
        Op60,
        In60,
        Op61,
        In61,
        Op62,
        In62,
        Op63,
        In63,
        Op64,
        In64,
        Op65,
        In65,
        Op66,
        In66,
        Op67,
        In67,
        Op68,
        In68,
        Op69,
        In69,
        Op70,
        In70,
        Op71,
        In71,
        Op72,
        In72,
        Op73,
        In73,
        Op74,
        In74,
        Op75,
        In75,
        Op76,
        In76,
        Op77,
        In77,
        Op78,
        In78,
        Op79,
        In79,
        Op80,
        In80,
        Op81,
        In81,
        Op82,
        In82,
        Op83,
        In83,
        Op84,
        In84,
        Op85,
        In85,
        Op86,
        In86,
        Op87,
        In87,
        Op88,
        In88,
        Op89,
        In89,
        Op90,
        In90,
    >
    OperationRegistryBuilder<
        B,
        Op0,
        In0,
        Op1,
        In1,
        Op2,
        In2,
        Op3,
        In3,
        Op4,
        In4,
        Op5,
        In5,
        Op6,
        In6,
        Op7,
        In7,
        Op8,
        In8,
        Op9,
        In9,
        Op10,
        In10,
        Op11,
        In11,
        Op12,
        In12,
        Op13,
        In13,
        Op14,
        In14,
        Op15,
        In15,
        Op16,
        In16,
        Op17,
        In17,
        Op18,
        In18,
        Op19,
        In19,
        Op20,
        In20,
        Op21,
        In21,
        Op22,
        In22,
        Op23,
        In23,
        Op24,
        In24,
        Op25,
        In25,
        Op26,
        In26,
        Op27,
        In27,
        Op28,
        In28,
        Op29,
        In29,
        Op30,
        In30,
        Op31,
        In31,
        Op32,
        In32,
        Op33,
        In33,
        Op34,
        In34,
        Op35,
        In35,
        Op36,
        In36,
        Op37,
        In37,
        Op38,
        In38,
        Op39,
        In39,
        Op40,
        In40,
        Op41,
        In41,
        Op42,
        In42,
        Op43,
        In43,
        Op44,
        In44,
        Op45,
        In45,
        Op46,
        In46,
        Op47,
        In47,
        Op48,
        In48,
        Op49,
        In49,
        Op50,
        In50,
        Op51,
        In51,
        Op52,
        In52,
        Op53,
        In53,
        Op54,
        In54,
        Op55,
        In55,
        Op56,
        In56,
        Op57,
        In57,
        Op58,
        In58,
        Op59,
        In59,
        Op60,
        In60,
        Op61,
        In61,
        Op62,
        In62,
        Op63,
        In63,
        Op64,
        In64,
        Op65,
        In65,
        Op66,
        In66,
        Op67,
        In67,
        Op68,
        In68,
        Op69,
        In69,
        Op70,
        In70,
        Op71,
        In71,
        Op72,
        In72,
        Op73,
        In73,
        Op74,
        In74,
        Op75,
        In75,
        Op76,
        In76,
        Op77,
        In77,
        Op78,
        In78,
        Op79,
        In79,
        Op80,
        In80,
        Op81,
        In81,
        Op82,
        In82,
        Op83,
        In83,
        Op84,
        In84,
        Op85,
        In85,
        Op86,
        In86,
        Op87,
        In87,
        Op88,
        In88,
        Op89,
        In89,
        Op90,
        In90,
    >
{
    pub fn abort_multipart_upload(self, value: Op0) -> Self {
        let mut new = self;
        new.abort_multipart_upload = Some(value);
        new
    }
    pub fn complete_multipart_upload(self, value: Op1) -> Self {
        let mut new = self;
        new.complete_multipart_upload = Some(value);
        new
    }
    pub fn copy_object(self, value: Op2) -> Self {
        let mut new = self;
        new.copy_object = Some(value);
        new
    }
    pub fn create_bucket(self, value: Op3) -> Self {
        let mut new = self;
        new.create_bucket = Some(value);
        new
    }
    pub fn create_multipart_upload(self, value: Op4) -> Self {
        let mut new = self;
        new.create_multipart_upload = Some(value);
        new
    }
    pub fn delete_bucket(self, value: Op5) -> Self {
        let mut new = self;
        new.delete_bucket = Some(value);
        new
    }
    pub fn delete_bucket_analytics_configuration(self, value: Op6) -> Self {
        let mut new = self;
        new.delete_bucket_analytics_configuration = Some(value);
        new
    }
    pub fn delete_bucket_cors(self, value: Op7) -> Self {
        let mut new = self;
        new.delete_bucket_cors = Some(value);
        new
    }
    pub fn delete_bucket_encryption(self, value: Op8) -> Self {
        let mut new = self;
        new.delete_bucket_encryption = Some(value);
        new
    }
    pub fn delete_bucket_intelligent_tiering_configuration(self, value: Op9) -> Self {
        let mut new = self;
        new.delete_bucket_intelligent_tiering_configuration = Some(value);
        new
    }
    pub fn delete_bucket_inventory_configuration(self, value: Op10) -> Self {
        let mut new = self;
        new.delete_bucket_inventory_configuration = Some(value);
        new
    }
    pub fn delete_bucket_lifecycle(self, value: Op11) -> Self {
        let mut new = self;
        new.delete_bucket_lifecycle = Some(value);
        new
    }
    pub fn delete_bucket_metrics_configuration(self, value: Op12) -> Self {
        let mut new = self;
        new.delete_bucket_metrics_configuration = Some(value);
        new
    }
    pub fn delete_bucket_ownership_controls(self, value: Op13) -> Self {
        let mut new = self;
        new.delete_bucket_ownership_controls = Some(value);
        new
    }
    pub fn delete_bucket_policy(self, value: Op14) -> Self {
        let mut new = self;
        new.delete_bucket_policy = Some(value);
        new
    }
    pub fn delete_bucket_replication(self, value: Op15) -> Self {
        let mut new = self;
        new.delete_bucket_replication = Some(value);
        new
    }
    pub fn delete_bucket_tagging(self, value: Op16) -> Self {
        let mut new = self;
        new.delete_bucket_tagging = Some(value);
        new
    }
    pub fn delete_bucket_website(self, value: Op17) -> Self {
        let mut new = self;
        new.delete_bucket_website = Some(value);
        new
    }
    pub fn delete_object(self, value: Op18) -> Self {
        let mut new = self;
        new.delete_object = Some(value);
        new
    }
    pub fn delete_objects(self, value: Op19) -> Self {
        let mut new = self;
        new.delete_objects = Some(value);
        new
    }
    pub fn delete_object_tagging(self, value: Op20) -> Self {
        let mut new = self;
        new.delete_object_tagging = Some(value);
        new
    }
    pub fn delete_public_access_block(self, value: Op21) -> Self {
        let mut new = self;
        new.delete_public_access_block = Some(value);
        new
    }
    pub fn get_bucket_accelerate_configuration(self, value: Op22) -> Self {
        let mut new = self;
        new.get_bucket_accelerate_configuration = Some(value);
        new
    }
    pub fn get_bucket_acl(self, value: Op23) -> Self {
        let mut new = self;
        new.get_bucket_acl = Some(value);
        new
    }
    pub fn get_bucket_analytics_configuration(self, value: Op24) -> Self {
        let mut new = self;
        new.get_bucket_analytics_configuration = Some(value);
        new
    }
    pub fn get_bucket_cors(self, value: Op25) -> Self {
        let mut new = self;
        new.get_bucket_cors = Some(value);
        new
    }
    pub fn get_bucket_encryption(self, value: Op26) -> Self {
        let mut new = self;
        new.get_bucket_encryption = Some(value);
        new
    }
    pub fn get_bucket_intelligent_tiering_configuration(self, value: Op27) -> Self {
        let mut new = self;
        new.get_bucket_intelligent_tiering_configuration = Some(value);
        new
    }
    pub fn get_bucket_inventory_configuration(self, value: Op28) -> Self {
        let mut new = self;
        new.get_bucket_inventory_configuration = Some(value);
        new
    }
    pub fn get_bucket_lifecycle_configuration(self, value: Op29) -> Self {
        let mut new = self;
        new.get_bucket_lifecycle_configuration = Some(value);
        new
    }
    pub fn get_bucket_location(self, value: Op30) -> Self {
        let mut new = self;
        new.get_bucket_location = Some(value);
        new
    }
    pub fn get_bucket_logging(self, value: Op31) -> Self {
        let mut new = self;
        new.get_bucket_logging = Some(value);
        new
    }
    pub fn get_bucket_metrics_configuration(self, value: Op32) -> Self {
        let mut new = self;
        new.get_bucket_metrics_configuration = Some(value);
        new
    }
    pub fn get_bucket_notification_configuration(self, value: Op33) -> Self {
        let mut new = self;
        new.get_bucket_notification_configuration = Some(value);
        new
    }
    pub fn get_bucket_ownership_controls(self, value: Op34) -> Self {
        let mut new = self;
        new.get_bucket_ownership_controls = Some(value);
        new
    }
    pub fn get_bucket_policy(self, value: Op35) -> Self {
        let mut new = self;
        new.get_bucket_policy = Some(value);
        new
    }
    pub fn get_bucket_policy_status(self, value: Op36) -> Self {
        let mut new = self;
        new.get_bucket_policy_status = Some(value);
        new
    }
    pub fn get_bucket_replication(self, value: Op37) -> Self {
        let mut new = self;
        new.get_bucket_replication = Some(value);
        new
    }
    pub fn get_bucket_request_payment(self, value: Op38) -> Self {
        let mut new = self;
        new.get_bucket_request_payment = Some(value);
        new
    }
    pub fn get_bucket_tagging(self, value: Op39) -> Self {
        let mut new = self;
        new.get_bucket_tagging = Some(value);
        new
    }
    pub fn get_bucket_versioning(self, value: Op40) -> Self {
        let mut new = self;
        new.get_bucket_versioning = Some(value);
        new
    }
    pub fn get_bucket_website(self, value: Op41) -> Self {
        let mut new = self;
        new.get_bucket_website = Some(value);
        new
    }
    pub fn get_object(self, value: Op42) -> Self {
        let mut new = self;
        new.get_object = Some(value);
        new
    }
    pub fn get_object_acl(self, value: Op43) -> Self {
        let mut new = self;
        new.get_object_acl = Some(value);
        new
    }
    pub fn get_object_legal_hold(self, value: Op44) -> Self {
        let mut new = self;
        new.get_object_legal_hold = Some(value);
        new
    }
    pub fn get_object_lock_configuration(self, value: Op45) -> Self {
        let mut new = self;
        new.get_object_lock_configuration = Some(value);
        new
    }
    pub fn get_object_retention(self, value: Op46) -> Self {
        let mut new = self;
        new.get_object_retention = Some(value);
        new
    }
    pub fn get_object_tagging(self, value: Op47) -> Self {
        let mut new = self;
        new.get_object_tagging = Some(value);
        new
    }
    pub fn get_object_torrent(self, value: Op48) -> Self {
        let mut new = self;
        new.get_object_torrent = Some(value);
        new
    }
    pub fn get_public_access_block(self, value: Op49) -> Self {
        let mut new = self;
        new.get_public_access_block = Some(value);
        new
    }
    pub fn head_bucket(self, value: Op50) -> Self {
        let mut new = self;
        new.head_bucket = Some(value);
        new
    }
    pub fn head_object(self, value: Op51) -> Self {
        let mut new = self;
        new.head_object = Some(value);
        new
    }
    pub fn list_bucket_analytics_configurations(self, value: Op52) -> Self {
        let mut new = self;
        new.list_bucket_analytics_configurations = Some(value);
        new
    }
    pub fn list_bucket_intelligent_tiering_configurations(self, value: Op53) -> Self {
        let mut new = self;
        new.list_bucket_intelligent_tiering_configurations = Some(value);
        new
    }
    pub fn list_bucket_inventory_configurations(self, value: Op54) -> Self {
        let mut new = self;
        new.list_bucket_inventory_configurations = Some(value);
        new
    }
    pub fn list_bucket_metrics_configurations(self, value: Op55) -> Self {
        let mut new = self;
        new.list_bucket_metrics_configurations = Some(value);
        new
    }
    pub fn list_buckets(self, value: Op56) -> Self {
        let mut new = self;
        new.list_buckets = Some(value);
        new
    }
    pub fn list_multipart_uploads(self, value: Op57) -> Self {
        let mut new = self;
        new.list_multipart_uploads = Some(value);
        new
    }
    pub fn list_objects(self, value: Op58) -> Self {
        let mut new = self;
        new.list_objects = Some(value);
        new
    }
    pub fn list_objects_v2(self, value: Op59) -> Self {
        let mut new = self;
        new.list_objects_v2 = Some(value);
        new
    }
    pub fn list_object_versions(self, value: Op60) -> Self {
        let mut new = self;
        new.list_object_versions = Some(value);
        new
    }
    pub fn list_parts(self, value: Op61) -> Self {
        let mut new = self;
        new.list_parts = Some(value);
        new
    }
    pub fn put_bucket_accelerate_configuration(self, value: Op62) -> Self {
        let mut new = self;
        new.put_bucket_accelerate_configuration = Some(value);
        new
    }
    pub fn put_bucket_acl(self, value: Op63) -> Self {
        let mut new = self;
        new.put_bucket_acl = Some(value);
        new
    }
    pub fn put_bucket_analytics_configuration(self, value: Op64) -> Self {
        let mut new = self;
        new.put_bucket_analytics_configuration = Some(value);
        new
    }
    pub fn put_bucket_cors(self, value: Op65) -> Self {
        let mut new = self;
        new.put_bucket_cors = Some(value);
        new
    }
    pub fn put_bucket_encryption(self, value: Op66) -> Self {
        let mut new = self;
        new.put_bucket_encryption = Some(value);
        new
    }
    pub fn put_bucket_intelligent_tiering_configuration(self, value: Op67) -> Self {
        let mut new = self;
        new.put_bucket_intelligent_tiering_configuration = Some(value);
        new
    }
    pub fn put_bucket_inventory_configuration(self, value: Op68) -> Self {
        let mut new = self;
        new.put_bucket_inventory_configuration = Some(value);
        new
    }
    pub fn put_bucket_lifecycle_configuration(self, value: Op69) -> Self {
        let mut new = self;
        new.put_bucket_lifecycle_configuration = Some(value);
        new
    }
    pub fn put_bucket_logging(self, value: Op70) -> Self {
        let mut new = self;
        new.put_bucket_logging = Some(value);
        new
    }
    pub fn put_bucket_metrics_configuration(self, value: Op71) -> Self {
        let mut new = self;
        new.put_bucket_metrics_configuration = Some(value);
        new
    }
    pub fn put_bucket_notification_configuration(self, value: Op72) -> Self {
        let mut new = self;
        new.put_bucket_notification_configuration = Some(value);
        new
    }
    pub fn put_bucket_ownership_controls(self, value: Op73) -> Self {
        let mut new = self;
        new.put_bucket_ownership_controls = Some(value);
        new
    }
    pub fn put_bucket_policy(self, value: Op74) -> Self {
        let mut new = self;
        new.put_bucket_policy = Some(value);
        new
    }
    pub fn put_bucket_replication(self, value: Op75) -> Self {
        let mut new = self;
        new.put_bucket_replication = Some(value);
        new
    }
    pub fn put_bucket_request_payment(self, value: Op76) -> Self {
        let mut new = self;
        new.put_bucket_request_payment = Some(value);
        new
    }
    pub fn put_bucket_tagging(self, value: Op77) -> Self {
        let mut new = self;
        new.put_bucket_tagging = Some(value);
        new
    }
    pub fn put_bucket_versioning(self, value: Op78) -> Self {
        let mut new = self;
        new.put_bucket_versioning = Some(value);
        new
    }
    pub fn put_bucket_website(self, value: Op79) -> Self {
        let mut new = self;
        new.put_bucket_website = Some(value);
        new
    }
    pub fn put_object(self, value: Op80) -> Self {
        let mut new = self;
        new.put_object = Some(value);
        new
    }
    pub fn put_object_acl(self, value: Op81) -> Self {
        let mut new = self;
        new.put_object_acl = Some(value);
        new
    }
    pub fn put_object_legal_hold(self, value: Op82) -> Self {
        let mut new = self;
        new.put_object_legal_hold = Some(value);
        new
    }
    pub fn put_object_lock_configuration(self, value: Op83) -> Self {
        let mut new = self;
        new.put_object_lock_configuration = Some(value);
        new
    }
    pub fn put_object_retention(self, value: Op84) -> Self {
        let mut new = self;
        new.put_object_retention = Some(value);
        new
    }
    pub fn put_object_tagging(self, value: Op85) -> Self {
        let mut new = self;
        new.put_object_tagging = Some(value);
        new
    }
    pub fn put_public_access_block(self, value: Op86) -> Self {
        let mut new = self;
        new.put_public_access_block = Some(value);
        new
    }
    pub fn restore_object(self, value: Op87) -> Self {
        let mut new = self;
        new.restore_object = Some(value);
        new
    }
    pub fn upload_part(self, value: Op88) -> Self {
        let mut new = self;
        new.upload_part = Some(value);
        new
    }
    pub fn upload_part_copy(self, value: Op89) -> Self {
        let mut new = self;
        new.upload_part_copy = Some(value);
        new
    }
    pub fn write_get_object_response(self, value: Op90) -> Self {
        let mut new = self;
        new.write_get_object_response = Some(value);
        new
    }
    pub fn build(
        self,
    ) -> Result<
        OperationRegistry<
            B,
            Op0,
            In0,
            Op1,
            In1,
            Op2,
            In2,
            Op3,
            In3,
            Op4,
            In4,
            Op5,
            In5,
            Op6,
            In6,
            Op7,
            In7,
            Op8,
            In8,
            Op9,
            In9,
            Op10,
            In10,
            Op11,
            In11,
            Op12,
            In12,
            Op13,
            In13,
            Op14,
            In14,
            Op15,
            In15,
            Op16,
            In16,
            Op17,
            In17,
            Op18,
            In18,
            Op19,
            In19,
            Op20,
            In20,
            Op21,
            In21,
            Op22,
            In22,
            Op23,
            In23,
            Op24,
            In24,
            Op25,
            In25,
            Op26,
            In26,
            Op27,
            In27,
            Op28,
            In28,
            Op29,
            In29,
            Op30,
            In30,
            Op31,
            In31,
            Op32,
            In32,
            Op33,
            In33,
            Op34,
            In34,
            Op35,
            In35,
            Op36,
            In36,
            Op37,
            In37,
            Op38,
            In38,
            Op39,
            In39,
            Op40,
            In40,
            Op41,
            In41,
            Op42,
            In42,
            Op43,
            In43,
            Op44,
            In44,
            Op45,
            In45,
            Op46,
            In46,
            Op47,
            In47,
            Op48,
            In48,
            Op49,
            In49,
            Op50,
            In50,
            Op51,
            In51,
            Op52,
            In52,
            Op53,
            In53,
            Op54,
            In54,
            Op55,
            In55,
            Op56,
            In56,
            Op57,
            In57,
            Op58,
            In58,
            Op59,
            In59,
            Op60,
            In60,
            Op61,
            In61,
            Op62,
            In62,
            Op63,
            In63,
            Op64,
            In64,
            Op65,
            In65,
            Op66,
            In66,
            Op67,
            In67,
            Op68,
            In68,
            Op69,
            In69,
            Op70,
            In70,
            Op71,
            In71,
            Op72,
            In72,
            Op73,
            In73,
            Op74,
            In74,
            Op75,
            In75,
            Op76,
            In76,
            Op77,
            In77,
            Op78,
            In78,
            Op79,
            In79,
            Op80,
            In80,
            Op81,
            In81,
            Op82,
            In82,
            Op83,
            In83,
            Op84,
            In84,
            Op85,
            In85,
            Op86,
            In86,
            Op87,
            In87,
            Op88,
            In88,
            Op89,
            In89,
            Op90,
            In90,
        >,
        OperationRegistryBuilderError,
    > {
        Ok(OperationRegistry {
            abort_multipart_upload: match self.abort_multipart_upload {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "abort_multipart_upload",
                    ))
                }
            },
            complete_multipart_upload: match self.complete_multipart_upload {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "complete_multipart_upload",
                    ))
                }
            },
            copy_object: match self.copy_object {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "copy_object",
                    ))
                }
            },
            create_bucket: match self.create_bucket {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "create_bucket",
                    ))
                }
            },
            create_multipart_upload: match self.create_multipart_upload {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "create_multipart_upload",
                    ))
                }
            },
            delete_bucket: match self.delete_bucket {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "delete_bucket",
                    ))
                }
            },
            delete_bucket_analytics_configuration: match self.delete_bucket_analytics_configuration
            {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "delete_bucket_analytics_configuration",
                    ))
                }
            },
            delete_bucket_cors: match self.delete_bucket_cors {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "delete_bucket_cors",
                    ))
                }
            },
            delete_bucket_encryption: match self.delete_bucket_encryption {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "delete_bucket_encryption",
                    ))
                }
            },
            delete_bucket_intelligent_tiering_configuration: match self
                .delete_bucket_intelligent_tiering_configuration
            {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "delete_bucket_intelligent_tiering_configuration",
                    ))
                }
            },
            delete_bucket_inventory_configuration: match self.delete_bucket_inventory_configuration
            {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "delete_bucket_inventory_configuration",
                    ))
                }
            },
            delete_bucket_lifecycle: match self.delete_bucket_lifecycle {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "delete_bucket_lifecycle",
                    ))
                }
            },
            delete_bucket_metrics_configuration: match self.delete_bucket_metrics_configuration {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "delete_bucket_metrics_configuration",
                    ))
                }
            },
            delete_bucket_ownership_controls: match self.delete_bucket_ownership_controls {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "delete_bucket_ownership_controls",
                    ))
                }
            },
            delete_bucket_policy: match self.delete_bucket_policy {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "delete_bucket_policy",
                    ))
                }
            },
            delete_bucket_replication: match self.delete_bucket_replication {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "delete_bucket_replication",
                    ))
                }
            },
            delete_bucket_tagging: match self.delete_bucket_tagging {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "delete_bucket_tagging",
                    ))
                }
            },
            delete_bucket_website: match self.delete_bucket_website {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "delete_bucket_website",
                    ))
                }
            },
            delete_object: match self.delete_object {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "delete_object",
                    ))
                }
            },
            delete_objects: match self.delete_objects {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "delete_objects",
                    ))
                }
            },
            delete_object_tagging: match self.delete_object_tagging {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "delete_object_tagging",
                    ))
                }
            },
            delete_public_access_block: match self.delete_public_access_block {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "delete_public_access_block",
                    ))
                }
            },
            get_bucket_accelerate_configuration: match self.get_bucket_accelerate_configuration {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_bucket_accelerate_configuration",
                    ))
                }
            },
            get_bucket_acl: match self.get_bucket_acl {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_bucket_acl",
                    ))
                }
            },
            get_bucket_analytics_configuration: match self.get_bucket_analytics_configuration {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_bucket_analytics_configuration",
                    ))
                }
            },
            get_bucket_cors: match self.get_bucket_cors {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_bucket_cors",
                    ))
                }
            },
            get_bucket_encryption: match self.get_bucket_encryption {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_bucket_encryption",
                    ))
                }
            },
            get_bucket_intelligent_tiering_configuration: match self
                .get_bucket_intelligent_tiering_configuration
            {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_bucket_intelligent_tiering_configuration",
                    ))
                }
            },
            get_bucket_inventory_configuration: match self.get_bucket_inventory_configuration {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_bucket_inventory_configuration",
                    ))
                }
            },
            get_bucket_lifecycle_configuration: match self.get_bucket_lifecycle_configuration {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_bucket_lifecycle_configuration",
                    ))
                }
            },
            get_bucket_location: match self.get_bucket_location {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_bucket_location",
                    ))
                }
            },
            get_bucket_logging: match self.get_bucket_logging {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_bucket_logging",
                    ))
                }
            },
            get_bucket_metrics_configuration: match self.get_bucket_metrics_configuration {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_bucket_metrics_configuration",
                    ))
                }
            },
            get_bucket_notification_configuration: match self.get_bucket_notification_configuration
            {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_bucket_notification_configuration",
                    ))
                }
            },
            get_bucket_ownership_controls: match self.get_bucket_ownership_controls {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_bucket_ownership_controls",
                    ))
                }
            },
            get_bucket_policy: match self.get_bucket_policy {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_bucket_policy",
                    ))
                }
            },
            get_bucket_policy_status: match self.get_bucket_policy_status {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_bucket_policy_status",
                    ))
                }
            },
            get_bucket_replication: match self.get_bucket_replication {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_bucket_replication",
                    ))
                }
            },
            get_bucket_request_payment: match self.get_bucket_request_payment {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_bucket_request_payment",
                    ))
                }
            },
            get_bucket_tagging: match self.get_bucket_tagging {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_bucket_tagging",
                    ))
                }
            },
            get_bucket_versioning: match self.get_bucket_versioning {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_bucket_versioning",
                    ))
                }
            },
            get_bucket_website: match self.get_bucket_website {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_bucket_website",
                    ))
                }
            },
            get_object: match self.get_object {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_object",
                    ))
                }
            },
            get_object_acl: match self.get_object_acl {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_object_acl",
                    ))
                }
            },
            get_object_legal_hold: match self.get_object_legal_hold {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_object_legal_hold",
                    ))
                }
            },
            get_object_lock_configuration: match self.get_object_lock_configuration {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_object_lock_configuration",
                    ))
                }
            },
            get_object_retention: match self.get_object_retention {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_object_retention",
                    ))
                }
            },
            get_object_tagging: match self.get_object_tagging {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_object_tagging",
                    ))
                }
            },
            get_object_torrent: match self.get_object_torrent {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_object_torrent",
                    ))
                }
            },
            get_public_access_block: match self.get_public_access_block {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_public_access_block",
                    ))
                }
            },
            head_bucket: match self.head_bucket {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "head_bucket",
                    ))
                }
            },
            head_object: match self.head_object {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "head_object",
                    ))
                }
            },
            list_bucket_analytics_configurations: match self.list_bucket_analytics_configurations {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "list_bucket_analytics_configurations",
                    ))
                }
            },
            list_bucket_intelligent_tiering_configurations: match self
                .list_bucket_intelligent_tiering_configurations
            {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "list_bucket_intelligent_tiering_configurations",
                    ))
                }
            },
            list_bucket_inventory_configurations: match self.list_bucket_inventory_configurations {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "list_bucket_inventory_configurations",
                    ))
                }
            },
            list_bucket_metrics_configurations: match self.list_bucket_metrics_configurations {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "list_bucket_metrics_configurations",
                    ))
                }
            },
            list_buckets: match self.list_buckets {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "list_buckets",
                    ))
                }
            },
            list_multipart_uploads: match self.list_multipart_uploads {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "list_multipart_uploads",
                    ))
                }
            },
            list_objects: match self.list_objects {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "list_objects",
                    ))
                }
            },
            list_objects_v2: match self.list_objects_v2 {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "list_objects_v2",
                    ))
                }
            },
            list_object_versions: match self.list_object_versions {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "list_object_versions",
                    ))
                }
            },
            list_parts: match self.list_parts {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "list_parts",
                    ))
                }
            },
            put_bucket_accelerate_configuration: match self.put_bucket_accelerate_configuration {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "put_bucket_accelerate_configuration",
                    ))
                }
            },
            put_bucket_acl: match self.put_bucket_acl {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "put_bucket_acl",
                    ))
                }
            },
            put_bucket_analytics_configuration: match self.put_bucket_analytics_configuration {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "put_bucket_analytics_configuration",
                    ))
                }
            },
            put_bucket_cors: match self.put_bucket_cors {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "put_bucket_cors",
                    ))
                }
            },
            put_bucket_encryption: match self.put_bucket_encryption {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "put_bucket_encryption",
                    ))
                }
            },
            put_bucket_intelligent_tiering_configuration: match self
                .put_bucket_intelligent_tiering_configuration
            {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "put_bucket_intelligent_tiering_configuration",
                    ))
                }
            },
            put_bucket_inventory_configuration: match self.put_bucket_inventory_configuration {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "put_bucket_inventory_configuration",
                    ))
                }
            },
            put_bucket_lifecycle_configuration: match self.put_bucket_lifecycle_configuration {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "put_bucket_lifecycle_configuration",
                    ))
                }
            },
            put_bucket_logging: match self.put_bucket_logging {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "put_bucket_logging",
                    ))
                }
            },
            put_bucket_metrics_configuration: match self.put_bucket_metrics_configuration {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "put_bucket_metrics_configuration",
                    ))
                }
            },
            put_bucket_notification_configuration: match self.put_bucket_notification_configuration
            {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "put_bucket_notification_configuration",
                    ))
                }
            },
            put_bucket_ownership_controls: match self.put_bucket_ownership_controls {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "put_bucket_ownership_controls",
                    ))
                }
            },
            put_bucket_policy: match self.put_bucket_policy {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "put_bucket_policy",
                    ))
                }
            },
            put_bucket_replication: match self.put_bucket_replication {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "put_bucket_replication",
                    ))
                }
            },
            put_bucket_request_payment: match self.put_bucket_request_payment {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "put_bucket_request_payment",
                    ))
                }
            },
            put_bucket_tagging: match self.put_bucket_tagging {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "put_bucket_tagging",
                    ))
                }
            },
            put_bucket_versioning: match self.put_bucket_versioning {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "put_bucket_versioning",
                    ))
                }
            },
            put_bucket_website: match self.put_bucket_website {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "put_bucket_website",
                    ))
                }
            },
            put_object: match self.put_object {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "put_object",
                    ))
                }
            },
            put_object_acl: match self.put_object_acl {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "put_object_acl",
                    ))
                }
            },
            put_object_legal_hold: match self.put_object_legal_hold {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "put_object_legal_hold",
                    ))
                }
            },
            put_object_lock_configuration: match self.put_object_lock_configuration {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "put_object_lock_configuration",
                    ))
                }
            },
            put_object_retention: match self.put_object_retention {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "put_object_retention",
                    ))
                }
            },
            put_object_tagging: match self.put_object_tagging {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "put_object_tagging",
                    ))
                }
            },
            put_public_access_block: match self.put_public_access_block {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "put_public_access_block",
                    ))
                }
            },
            restore_object: match self.restore_object {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "restore_object",
                    ))
                }
            },
            upload_part: match self.upload_part {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "upload_part",
                    ))
                }
            },
            upload_part_copy: match self.upload_part_copy {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "upload_part_copy",
                    ))
                }
            },
            write_get_object_response: match self.write_get_object_response {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "write_get_object_response",
                    ))
                }
            },
            _phantom: std::marker::PhantomData,
        })
    }
}
#[allow(clippy::all)]
impl<
        B,
        Op0,
        In0,
        Op1,
        In1,
        Op2,
        In2,
        Op3,
        In3,
        Op4,
        In4,
        Op5,
        In5,
        Op6,
        In6,
        Op7,
        In7,
        Op8,
        In8,
        Op9,
        In9,
        Op10,
        In10,
        Op11,
        In11,
        Op12,
        In12,
        Op13,
        In13,
        Op14,
        In14,
        Op15,
        In15,
        Op16,
        In16,
        Op17,
        In17,
        Op18,
        In18,
        Op19,
        In19,
        Op20,
        In20,
        Op21,
        In21,
        Op22,
        In22,
        Op23,
        In23,
        Op24,
        In24,
        Op25,
        In25,
        Op26,
        In26,
        Op27,
        In27,
        Op28,
        In28,
        Op29,
        In29,
        Op30,
        In30,
        Op31,
        In31,
        Op32,
        In32,
        Op33,
        In33,
        Op34,
        In34,
        Op35,
        In35,
        Op36,
        In36,
        Op37,
        In37,
        Op38,
        In38,
        Op39,
        In39,
        Op40,
        In40,
        Op41,
        In41,
        Op42,
        In42,
        Op43,
        In43,
        Op44,
        In44,
        Op45,
        In45,
        Op46,
        In46,
        Op47,
        In47,
        Op48,
        In48,
        Op49,
        In49,
        Op50,
        In50,
        Op51,
        In51,
        Op52,
        In52,
        Op53,
        In53,
        Op54,
        In54,
        Op55,
        In55,
        Op56,
        In56,
        Op57,
        In57,
        Op58,
        In58,
        Op59,
        In59,
        Op60,
        In60,
        Op61,
        In61,
        Op62,
        In62,
        Op63,
        In63,
        Op64,
        In64,
        Op65,
        In65,
        Op66,
        In66,
        Op67,
        In67,
        Op68,
        In68,
        Op69,
        In69,
        Op70,
        In70,
        Op71,
        In71,
        Op72,
        In72,
        Op73,
        In73,
        Op74,
        In74,
        Op75,
        In75,
        Op76,
        In76,
        Op77,
        In77,
        Op78,
        In78,
        Op79,
        In79,
        Op80,
        In80,
        Op81,
        In81,
        Op82,
        In82,
        Op83,
        In83,
        Op84,
        In84,
        Op85,
        In85,
        Op86,
        In86,
        Op87,
        In87,
        Op88,
        In88,
        Op89,
        In89,
        Op90,
        In90,
    >
    From<
        OperationRegistry<
            B,
            Op0,
            In0,
            Op1,
            In1,
            Op2,
            In2,
            Op3,
            In3,
            Op4,
            In4,
            Op5,
            In5,
            Op6,
            In6,
            Op7,
            In7,
            Op8,
            In8,
            Op9,
            In9,
            Op10,
            In10,
            Op11,
            In11,
            Op12,
            In12,
            Op13,
            In13,
            Op14,
            In14,
            Op15,
            In15,
            Op16,
            In16,
            Op17,
            In17,
            Op18,
            In18,
            Op19,
            In19,
            Op20,
            In20,
            Op21,
            In21,
            Op22,
            In22,
            Op23,
            In23,
            Op24,
            In24,
            Op25,
            In25,
            Op26,
            In26,
            Op27,
            In27,
            Op28,
            In28,
            Op29,
            In29,
            Op30,
            In30,
            Op31,
            In31,
            Op32,
            In32,
            Op33,
            In33,
            Op34,
            In34,
            Op35,
            In35,
            Op36,
            In36,
            Op37,
            In37,
            Op38,
            In38,
            Op39,
            In39,
            Op40,
            In40,
            Op41,
            In41,
            Op42,
            In42,
            Op43,
            In43,
            Op44,
            In44,
            Op45,
            In45,
            Op46,
            In46,
            Op47,
            In47,
            Op48,
            In48,
            Op49,
            In49,
            Op50,
            In50,
            Op51,
            In51,
            Op52,
            In52,
            Op53,
            In53,
            Op54,
            In54,
            Op55,
            In55,
            Op56,
            In56,
            Op57,
            In57,
            Op58,
            In58,
            Op59,
            In59,
            Op60,
            In60,
            Op61,
            In61,
            Op62,
            In62,
            Op63,
            In63,
            Op64,
            In64,
            Op65,
            In65,
            Op66,
            In66,
            Op67,
            In67,
            Op68,
            In68,
            Op69,
            In69,
            Op70,
            In70,
            Op71,
            In71,
            Op72,
            In72,
            Op73,
            In73,
            Op74,
            In74,
            Op75,
            In75,
            Op76,
            In76,
            Op77,
            In77,
            Op78,
            In78,
            Op79,
            In79,
            Op80,
            In80,
            Op81,
            In81,
            Op82,
            In82,
            Op83,
            In83,
            Op84,
            In84,
            Op85,
            In85,
            Op86,
            In86,
            Op87,
            In87,
            Op88,
            In88,
            Op89,
            In89,
            Op90,
            In90,
        >,
    > for aws_smithy_http_server::routing::Router<B>
where
    B: Send + 'static,
    Op0: crate::server_operation_handler_trait::Handler<
        B,
        In0,
        crate::input::AbortMultipartUploadInput,
    >,
    In0: 'static + Send,
    Op1: crate::server_operation_handler_trait::Handler<
        B,
        In1,
        crate::input::CompleteMultipartUploadInput,
    >,
    In1: 'static + Send,
    Op2: crate::server_operation_handler_trait::Handler<B, In2, crate::input::CopyObjectInput>,
    In2: 'static + Send,
    Op3: crate::server_operation_handler_trait::Handler<B, In3, crate::input::CreateBucketInput>,
    In3: 'static + Send,
    Op4: crate::server_operation_handler_trait::Handler<
        B,
        In4,
        crate::input::CreateMultipartUploadInput,
    >,
    In4: 'static + Send,
    Op5: crate::server_operation_handler_trait::Handler<B, In5, crate::input::DeleteBucketInput>,
    In5: 'static + Send,
    Op6: crate::server_operation_handler_trait::Handler<
        B,
        In6,
        crate::input::DeleteBucketAnalyticsConfigurationInput,
    >,
    In6: 'static + Send,
    Op7:
        crate::server_operation_handler_trait::Handler<B, In7, crate::input::DeleteBucketCorsInput>,
    In7: 'static + Send,
    Op8: crate::server_operation_handler_trait::Handler<
        B,
        In8,
        crate::input::DeleteBucketEncryptionInput,
    >,
    In8: 'static + Send,
    Op9: crate::server_operation_handler_trait::Handler<
        B,
        In9,
        crate::input::DeleteBucketIntelligentTieringConfigurationInput,
    >,
    In9: 'static + Send,
    Op10: crate::server_operation_handler_trait::Handler<
        B,
        In10,
        crate::input::DeleteBucketInventoryConfigurationInput,
    >,
    In10: 'static + Send,
    Op11: crate::server_operation_handler_trait::Handler<
        B,
        In11,
        crate::input::DeleteBucketLifecycleInput,
    >,
    In11: 'static + Send,
    Op12: crate::server_operation_handler_trait::Handler<
        B,
        In12,
        crate::input::DeleteBucketMetricsConfigurationInput,
    >,
    In12: 'static + Send,
    Op13: crate::server_operation_handler_trait::Handler<
        B,
        In13,
        crate::input::DeleteBucketOwnershipControlsInput,
    >,
    In13: 'static + Send,
    Op14: crate::server_operation_handler_trait::Handler<
        B,
        In14,
        crate::input::DeleteBucketPolicyInput,
    >,
    In14: 'static + Send,
    Op15: crate::server_operation_handler_trait::Handler<
        B,
        In15,
        crate::input::DeleteBucketReplicationInput,
    >,
    In15: 'static + Send,
    Op16: crate::server_operation_handler_trait::Handler<
        B,
        In16,
        crate::input::DeleteBucketTaggingInput,
    >,
    In16: 'static + Send,
    Op17: crate::server_operation_handler_trait::Handler<
        B,
        In17,
        crate::input::DeleteBucketWebsiteInput,
    >,
    In17: 'static + Send,
    Op18: crate::server_operation_handler_trait::Handler<B, In18, crate::input::DeleteObjectInput>,
    In18: 'static + Send,
    Op19: crate::server_operation_handler_trait::Handler<B, In19, crate::input::DeleteObjectsInput>,
    In19: 'static + Send,
    Op20: crate::server_operation_handler_trait::Handler<
        B,
        In20,
        crate::input::DeleteObjectTaggingInput,
    >,
    In20: 'static + Send,
    Op21: crate::server_operation_handler_trait::Handler<
        B,
        In21,
        crate::input::DeletePublicAccessBlockInput,
    >,
    In21: 'static + Send,
    Op22: crate::server_operation_handler_trait::Handler<
        B,
        In22,
        crate::input::GetBucketAccelerateConfigurationInput,
    >,
    In22: 'static + Send,
    Op23: crate::server_operation_handler_trait::Handler<B, In23, crate::input::GetBucketAclInput>,
    In23: 'static + Send,
    Op24: crate::server_operation_handler_trait::Handler<
        B,
        In24,
        crate::input::GetBucketAnalyticsConfigurationInput,
    >,
    In24: 'static + Send,
    Op25: crate::server_operation_handler_trait::Handler<B, In25, crate::input::GetBucketCorsInput>,
    In25: 'static + Send,
    Op26: crate::server_operation_handler_trait::Handler<
        B,
        In26,
        crate::input::GetBucketEncryptionInput,
    >,
    In26: 'static + Send,
    Op27: crate::server_operation_handler_trait::Handler<
        B,
        In27,
        crate::input::GetBucketIntelligentTieringConfigurationInput,
    >,
    In27: 'static + Send,
    Op28: crate::server_operation_handler_trait::Handler<
        B,
        In28,
        crate::input::GetBucketInventoryConfigurationInput,
    >,
    In28: 'static + Send,
    Op29: crate::server_operation_handler_trait::Handler<
        B,
        In29,
        crate::input::GetBucketLifecycleConfigurationInput,
    >,
    In29: 'static + Send,
    Op30: crate::server_operation_handler_trait::Handler<
        B,
        In30,
        crate::input::GetBucketLocationInput,
    >,
    In30: 'static + Send,
    Op31: crate::server_operation_handler_trait::Handler<
        B,
        In31,
        crate::input::GetBucketLoggingInput,
    >,
    In31: 'static + Send,
    Op32: crate::server_operation_handler_trait::Handler<
        B,
        In32,
        crate::input::GetBucketMetricsConfigurationInput,
    >,
    In32: 'static + Send,
    Op33: crate::server_operation_handler_trait::Handler<
        B,
        In33,
        crate::input::GetBucketNotificationConfigurationInput,
    >,
    In33: 'static + Send,
    Op34: crate::server_operation_handler_trait::Handler<
        B,
        In34,
        crate::input::GetBucketOwnershipControlsInput,
    >,
    In34: 'static + Send,
    Op35:
        crate::server_operation_handler_trait::Handler<B, In35, crate::input::GetBucketPolicyInput>,
    In35: 'static + Send,
    Op36: crate::server_operation_handler_trait::Handler<
        B,
        In36,
        crate::input::GetBucketPolicyStatusInput,
    >,
    In36: 'static + Send,
    Op37: crate::server_operation_handler_trait::Handler<
        B,
        In37,
        crate::input::GetBucketReplicationInput,
    >,
    In37: 'static + Send,
    Op38: crate::server_operation_handler_trait::Handler<
        B,
        In38,
        crate::input::GetBucketRequestPaymentInput,
    >,
    In38: 'static + Send,
    Op39: crate::server_operation_handler_trait::Handler<
        B,
        In39,
        crate::input::GetBucketTaggingInput,
    >,
    In39: 'static + Send,
    Op40: crate::server_operation_handler_trait::Handler<
        B,
        In40,
        crate::input::GetBucketVersioningInput,
    >,
    In40: 'static + Send,
    Op41: crate::server_operation_handler_trait::Handler<
        B,
        In41,
        crate::input::GetBucketWebsiteInput,
    >,
    In41: 'static + Send,
    Op42: crate::server_operation_handler_trait::Handler<B, In42, crate::input::GetObjectInput>,
    In42: 'static + Send,
    Op43: crate::server_operation_handler_trait::Handler<B, In43, crate::input::GetObjectAclInput>,
    In43: 'static + Send,
    Op44: crate::server_operation_handler_trait::Handler<
        B,
        In44,
        crate::input::GetObjectLegalHoldInput,
    >,
    In44: 'static + Send,
    Op45: crate::server_operation_handler_trait::Handler<
        B,
        In45,
        crate::input::GetObjectLockConfigurationInput,
    >,
    In45: 'static + Send,
    Op46: crate::server_operation_handler_trait::Handler<
        B,
        In46,
        crate::input::GetObjectRetentionInput,
    >,
    In46: 'static + Send,
    Op47: crate::server_operation_handler_trait::Handler<
        B,
        In47,
        crate::input::GetObjectTaggingInput,
    >,
    In47: 'static + Send,
    Op48: crate::server_operation_handler_trait::Handler<
        B,
        In48,
        crate::input::GetObjectTorrentInput,
    >,
    In48: 'static + Send,
    Op49: crate::server_operation_handler_trait::Handler<
        B,
        In49,
        crate::input::GetPublicAccessBlockInput,
    >,
    In49: 'static + Send,
    Op50: crate::server_operation_handler_trait::Handler<B, In50, crate::input::HeadBucketInput>,
    In50: 'static + Send,
    Op51: crate::server_operation_handler_trait::Handler<B, In51, crate::input::HeadObjectInput>,
    In51: 'static + Send,
    Op52: crate::server_operation_handler_trait::Handler<
        B,
        In52,
        crate::input::ListBucketAnalyticsConfigurationsInput,
    >,
    In52: 'static + Send,
    Op53: crate::server_operation_handler_trait::Handler<
        B,
        In53,
        crate::input::ListBucketIntelligentTieringConfigurationsInput,
    >,
    In53: 'static + Send,
    Op54: crate::server_operation_handler_trait::Handler<
        B,
        In54,
        crate::input::ListBucketInventoryConfigurationsInput,
    >,
    In54: 'static + Send,
    Op55: crate::server_operation_handler_trait::Handler<
        B,
        In55,
        crate::input::ListBucketMetricsConfigurationsInput,
    >,
    In55: 'static + Send,
    Op56: crate::server_operation_handler_trait::Handler<B, In56, crate::input::ListBucketsInput>,
    In56: 'static + Send,
    Op57: crate::server_operation_handler_trait::Handler<
        B,
        In57,
        crate::input::ListMultipartUploadsInput,
    >,
    In57: 'static + Send,
    Op58: crate::server_operation_handler_trait::Handler<B, In58, crate::input::ListObjectsInput>,
    In58: 'static + Send,
    Op59: crate::server_operation_handler_trait::Handler<B, In59, crate::input::ListObjectsV2Input>,
    In59: 'static + Send,
    Op60: crate::server_operation_handler_trait::Handler<
        B,
        In60,
        crate::input::ListObjectVersionsInput,
    >,
    In60: 'static + Send,
    Op61: crate::server_operation_handler_trait::Handler<B, In61, crate::input::ListPartsInput>,
    In61: 'static + Send,
    Op62: crate::server_operation_handler_trait::Handler<
        B,
        In62,
        crate::input::PutBucketAccelerateConfigurationInput,
    >,
    In62: 'static + Send,
    Op63: crate::server_operation_handler_trait::Handler<B, In63, crate::input::PutBucketAclInput>,
    In63: 'static + Send,
    Op64: crate::server_operation_handler_trait::Handler<
        B,
        In64,
        crate::input::PutBucketAnalyticsConfigurationInput,
    >,
    In64: 'static + Send,
    Op65: crate::server_operation_handler_trait::Handler<B, In65, crate::input::PutBucketCorsInput>,
    In65: 'static + Send,
    Op66: crate::server_operation_handler_trait::Handler<
        B,
        In66,
        crate::input::PutBucketEncryptionInput,
    >,
    In66: 'static + Send,
    Op67: crate::server_operation_handler_trait::Handler<
        B,
        In67,
        crate::input::PutBucketIntelligentTieringConfigurationInput,
    >,
    In67: 'static + Send,
    Op68: crate::server_operation_handler_trait::Handler<
        B,
        In68,
        crate::input::PutBucketInventoryConfigurationInput,
    >,
    In68: 'static + Send,
    Op69: crate::server_operation_handler_trait::Handler<
        B,
        In69,
        crate::input::PutBucketLifecycleConfigurationInput,
    >,
    In69: 'static + Send,
    Op70: crate::server_operation_handler_trait::Handler<
        B,
        In70,
        crate::input::PutBucketLoggingInput,
    >,
    In70: 'static + Send,
    Op71: crate::server_operation_handler_trait::Handler<
        B,
        In71,
        crate::input::PutBucketMetricsConfigurationInput,
    >,
    In71: 'static + Send,
    Op72: crate::server_operation_handler_trait::Handler<
        B,
        In72,
        crate::input::PutBucketNotificationConfigurationInput,
    >,
    In72: 'static + Send,
    Op73: crate::server_operation_handler_trait::Handler<
        B,
        In73,
        crate::input::PutBucketOwnershipControlsInput,
    >,
    In73: 'static + Send,
    Op74:
        crate::server_operation_handler_trait::Handler<B, In74, crate::input::PutBucketPolicyInput>,
    In74: 'static + Send,
    Op75: crate::server_operation_handler_trait::Handler<
        B,
        In75,
        crate::input::PutBucketReplicationInput,
    >,
    In75: 'static + Send,
    Op76: crate::server_operation_handler_trait::Handler<
        B,
        In76,
        crate::input::PutBucketRequestPaymentInput,
    >,
    In76: 'static + Send,
    Op77: crate::server_operation_handler_trait::Handler<
        B,
        In77,
        crate::input::PutBucketTaggingInput,
    >,
    In77: 'static + Send,
    Op78: crate::server_operation_handler_trait::Handler<
        B,
        In78,
        crate::input::PutBucketVersioningInput,
    >,
    In78: 'static + Send,
    Op79: crate::server_operation_handler_trait::Handler<
        B,
        In79,
        crate::input::PutBucketWebsiteInput,
    >,
    In79: 'static + Send,
    Op80: crate::server_operation_handler_trait::Handler<B, In80, crate::input::PutObjectInput>,
    In80: 'static + Send,
    Op81: crate::server_operation_handler_trait::Handler<B, In81, crate::input::PutObjectAclInput>,
    In81: 'static + Send,
    Op82: crate::server_operation_handler_trait::Handler<
        B,
        In82,
        crate::input::PutObjectLegalHoldInput,
    >,
    In82: 'static + Send,
    Op83: crate::server_operation_handler_trait::Handler<
        B,
        In83,
        crate::input::PutObjectLockConfigurationInput,
    >,
    In83: 'static + Send,
    Op84: crate::server_operation_handler_trait::Handler<
        B,
        In84,
        crate::input::PutObjectRetentionInput,
    >,
    In84: 'static + Send,
    Op85: crate::server_operation_handler_trait::Handler<
        B,
        In85,
        crate::input::PutObjectTaggingInput,
    >,
    In85: 'static + Send,
    Op86: crate::server_operation_handler_trait::Handler<
        B,
        In86,
        crate::input::PutPublicAccessBlockInput,
    >,
    In86: 'static + Send,
    Op87: crate::server_operation_handler_trait::Handler<B, In87, crate::input::RestoreObjectInput>,
    In87: 'static + Send,
    Op88: crate::server_operation_handler_trait::Handler<B, In88, crate::input::UploadPartInput>,
    In88: 'static + Send,
    Op89:
        crate::server_operation_handler_trait::Handler<B, In89, crate::input::UploadPartCopyInput>,
    In89: 'static + Send,
    Op90: crate::server_operation_handler_trait::Handler<
        B,
        In90,
        crate::input::WriteGetObjectResponseInput,
    >,
    In90: 'static + Send,
{
    fn from(
        registry: OperationRegistry<
            B,
            Op0,
            In0,
            Op1,
            In1,
            Op2,
            In2,
            Op3,
            In3,
            Op4,
            In4,
            Op5,
            In5,
            Op6,
            In6,
            Op7,
            In7,
            Op8,
            In8,
            Op9,
            In9,
            Op10,
            In10,
            Op11,
            In11,
            Op12,
            In12,
            Op13,
            In13,
            Op14,
            In14,
            Op15,
            In15,
            Op16,
            In16,
            Op17,
            In17,
            Op18,
            In18,
            Op19,
            In19,
            Op20,
            In20,
            Op21,
            In21,
            Op22,
            In22,
            Op23,
            In23,
            Op24,
            In24,
            Op25,
            In25,
            Op26,
            In26,
            Op27,
            In27,
            Op28,
            In28,
            Op29,
            In29,
            Op30,
            In30,
            Op31,
            In31,
            Op32,
            In32,
            Op33,
            In33,
            Op34,
            In34,
            Op35,
            In35,
            Op36,
            In36,
            Op37,
            In37,
            Op38,
            In38,
            Op39,
            In39,
            Op40,
            In40,
            Op41,
            In41,
            Op42,
            In42,
            Op43,
            In43,
            Op44,
            In44,
            Op45,
            In45,
            Op46,
            In46,
            Op47,
            In47,
            Op48,
            In48,
            Op49,
            In49,
            Op50,
            In50,
            Op51,
            In51,
            Op52,
            In52,
            Op53,
            In53,
            Op54,
            In54,
            Op55,
            In55,
            Op56,
            In56,
            Op57,
            In57,
            Op58,
            In58,
            Op59,
            In59,
            Op60,
            In60,
            Op61,
            In61,
            Op62,
            In62,
            Op63,
            In63,
            Op64,
            In64,
            Op65,
            In65,
            Op66,
            In66,
            Op67,
            In67,
            Op68,
            In68,
            Op69,
            In69,
            Op70,
            In70,
            Op71,
            In71,
            Op72,
            In72,
            Op73,
            In73,
            Op74,
            In74,
            Op75,
            In75,
            Op76,
            In76,
            Op77,
            In77,
            Op78,
            In78,
            Op79,
            In79,
            Op80,
            In80,
            Op81,
            In81,
            Op82,
            In82,
            Op83,
            In83,
            Op84,
            In84,
            Op85,
            In85,
            Op86,
            In86,
            Op87,
            In87,
            Op88,
            In88,
            Op89,
            In89,
            Op90,
            In90,
        >,
    ) -> Self {
        let abort_multipart_upload_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::DELETE,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Greedy]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::KeyValue(String::from("x-id"), String::from("AbortMultipartUpload"))])
                }
            }
        );
        let complete_multipart_upload_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::POST,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Greedy]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::KeyValue(String::from("x-id"), String::from("CompleteMultipartUpload"))])
                }
            }
        );
        let copy_object_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Greedy]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::KeyValue(String::from("x-id"), String::from("CopyObject"))])
                }
            }
        );
        let create_bucket_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![])
                }
            }
        );
        let create_multipart_upload_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::POST,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Greedy]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("uploads")), aws_smithy_http_server::routing::request_spec::QuerySegment::KeyValue(String::from("x-id"), String::from("CreateMultipartUpload"))])
                }
            }
        );
        let delete_bucket_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::DELETE,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![])
                }
            }
        );
        let delete_bucket_analytics_configuration_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::DELETE,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("analytics"))])
                }
            }
        );
        let delete_bucket_cors_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::DELETE,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("cors"))])
                }
            }
        );
        let delete_bucket_encryption_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::DELETE,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("encryption"))])
                }
            }
        );
        let delete_bucket_intelligent_tiering_configuration_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::DELETE,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("intelligent-tiering"))])
                }
            }
        );
        let delete_bucket_inventory_configuration_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::DELETE,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("inventory"))])
                }
            }
        );
        let delete_bucket_lifecycle_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::DELETE,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("lifecycle"))])
                }
            }
        );
        let delete_bucket_metrics_configuration_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::DELETE,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("metrics"))])
                }
            }
        );
        let delete_bucket_ownership_controls_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::DELETE,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("ownershipControls"))])
                }
            }
        );
        let delete_bucket_policy_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::DELETE,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("policy"))])
                }
            }
        );
        let delete_bucket_replication_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::DELETE,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("replication"))])
                }
            }
        );
        let delete_bucket_tagging_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::DELETE,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("tagging"))])
                }
            }
        );
        let delete_bucket_website_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::DELETE,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("website"))])
                }
            }
        );
        let delete_object_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::DELETE,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Greedy]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::KeyValue(String::from("x-id"), String::from("DeleteObject"))])
                }
            }
        );
        let delete_objects_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::POST,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("delete")), aws_smithy_http_server::routing::request_spec::QuerySegment::KeyValue(String::from("x-id"), String::from("DeleteObjects"))])
                }
            }
        );
        let delete_object_tagging_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::DELETE,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Greedy]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("tagging"))])
                }
            }
        );
        let delete_public_access_block_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::DELETE,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("publicAccessBlock"))])
                }
            }
        );
        let get_bucket_accelerate_configuration_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("accelerate"))])
                }
            }
        );
        let get_bucket_acl_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("acl"))])
                }
            }
        );
        let get_bucket_analytics_configuration_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("analytics")), aws_smithy_http_server::routing::request_spec::QuerySegment::KeyValue(String::from("x-id"), String::from("GetBucketAnalyticsConfiguration"))])
                }
            }
        );
        let get_bucket_cors_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("cors"))])
                }
            }
        );
        let get_bucket_encryption_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("encryption"))])
                }
            }
        );
        let get_bucket_intelligent_tiering_configuration_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("intelligent-tiering")), aws_smithy_http_server::routing::request_spec::QuerySegment::KeyValue(String::from("x-id"), String::from("GetBucketIntelligentTieringConfiguration"))])
                }
            }
        );
        let get_bucket_inventory_configuration_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("inventory")), aws_smithy_http_server::routing::request_spec::QuerySegment::KeyValue(String::from("x-id"), String::from("GetBucketInventoryConfiguration"))])
                }
            }
        );
        let get_bucket_lifecycle_configuration_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("lifecycle"))])
                }
            }
        );
        let get_bucket_location_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("location"))])
                }
            }
        );
        let get_bucket_logging_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("logging"))])
                }
            }
        );
        let get_bucket_metrics_configuration_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("metrics")), aws_smithy_http_server::routing::request_spec::QuerySegment::KeyValue(String::from("x-id"), String::from("GetBucketMetricsConfiguration"))])
                }
            }
        );
        let get_bucket_notification_configuration_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("notification"))])
                }
            }
        );
        let get_bucket_ownership_controls_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("ownershipControls"))])
                }
            }
        );
        let get_bucket_policy_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("policy"))])
                }
            }
        );
        let get_bucket_policy_status_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("policyStatus"))])
                }
            }
        );
        let get_bucket_replication_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("replication"))])
                }
            }
        );
        let get_bucket_request_payment_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("requestPayment"))])
                }
            }
        );
        let get_bucket_tagging_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("tagging"))])
                }
            }
        );
        let get_bucket_versioning_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("versioning"))])
                }
            }
        );
        let get_bucket_website_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("website"))])
                }
            }
        );
        let get_object_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Greedy]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::KeyValue(String::from("x-id"), String::from("GetObject"))])
                }
            }
        );
        let get_object_acl_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Greedy]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("acl"))])
                }
            }
        );
        let get_object_legal_hold_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Greedy]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("legal-hold"))])
                }
            }
        );
        let get_object_lock_configuration_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("object-lock"))])
                }
            }
        );
        let get_object_retention_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Greedy]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("retention"))])
                }
            }
        );
        let get_object_tagging_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Greedy]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("tagging"))])
                }
            }
        );
        let get_object_torrent_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Greedy]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("torrent"))])
                }
            }
        );
        let get_public_access_block_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("publicAccessBlock"))])
                }
            }
        );
        let head_bucket_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::HEAD,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![])
                }
            }
        );
        let head_object_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::HEAD,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Greedy]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![])
                }
            }
        );
        let list_bucket_analytics_configurations_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("analytics")), aws_smithy_http_server::routing::request_spec::QuerySegment::KeyValue(String::from("x-id"), String::from("ListBucketAnalyticsConfigurations"))])
                }
            }
        );
        let list_bucket_intelligent_tiering_configurations_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("intelligent-tiering")), aws_smithy_http_server::routing::request_spec::QuerySegment::KeyValue(String::from("x-id"), String::from("ListBucketIntelligentTieringConfigurations"))])
                }
            }
        );
        let list_bucket_inventory_configurations_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("inventory")), aws_smithy_http_server::routing::request_spec::QuerySegment::KeyValue(String::from("x-id"), String::from("ListBucketInventoryConfigurations"))])
                }
            }
        );
        let list_bucket_metrics_configurations_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("metrics")), aws_smithy_http_server::routing::request_spec::QuerySegment::KeyValue(String::from("x-id"), String::from("ListBucketMetricsConfigurations"))])
                }
            }
        );
        let list_buckets_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![])
                }
            }
        );
        let list_multipart_uploads_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("uploads"))])
                }
            }
        );
        let list_objects_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![])
                }
            }
        );
        let list_objects_v2_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::KeyValue(String::from("list-type"), String::from("2"))])
                }
            }
        );
        let list_object_versions_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("versions"))])
                }
            }
        );
        let list_parts_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Greedy]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::KeyValue(String::from("x-id"), String::from("ListParts"))])
                }
            }
        );
        let put_bucket_accelerate_configuration_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("accelerate"))])
                }
            }
        );
        let put_bucket_acl_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("acl"))])
                }
            }
        );
        let put_bucket_analytics_configuration_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("analytics"))])
                }
            }
        );
        let put_bucket_cors_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("cors"))])
                }
            }
        );
        let put_bucket_encryption_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("encryption"))])
                }
            }
        );
        let put_bucket_intelligent_tiering_configuration_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("intelligent-tiering"))])
                }
            }
        );
        let put_bucket_inventory_configuration_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("inventory"))])
                }
            }
        );
        let put_bucket_lifecycle_configuration_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("lifecycle"))])
                }
            }
        );
        let put_bucket_logging_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("logging"))])
                }
            }
        );
        let put_bucket_metrics_configuration_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("metrics"))])
                }
            }
        );
        let put_bucket_notification_configuration_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("notification"))])
                }
            }
        );
        let put_bucket_ownership_controls_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("ownershipControls"))])
                }
            }
        );
        let put_bucket_policy_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("policy"))])
                }
            }
        );
        let put_bucket_replication_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("replication"))])
                }
            }
        );
        let put_bucket_request_payment_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("requestPayment"))])
                }
            }
        );
        let put_bucket_tagging_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("tagging"))])
                }
            }
        );
        let put_bucket_versioning_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("versioning"))])
                }
            }
        );
        let put_bucket_website_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("website"))])
                }
            }
        );
        let put_object_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Greedy]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::KeyValue(String::from("x-id"), String::from("PutObject"))])
                }
            }
        );
        let put_object_acl_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Greedy]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("acl"))])
                }
            }
        );
        let put_object_legal_hold_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Greedy]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("legal-hold"))])
                }
            }
        );
        let put_object_lock_configuration_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("object-lock"))])
                }
            }
        );
        let put_object_retention_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Greedy]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("retention"))])
                }
            }
        );
        let put_object_tagging_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Greedy]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("tagging"))])
                }
            }
        );
        let put_public_access_block_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("publicAccessBlock"))])
                }
            }
        );
        let restore_object_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::POST,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Greedy]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::Key(String::from("restore")), aws_smithy_http_server::routing::request_spec::QuerySegment::KeyValue(String::from("x-id"), String::from("RestoreObject"))])
                }
            }
        );
        let upload_part_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Greedy]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::KeyValue(String::from("x-id"), String::from("UploadPart"))])
                }
            }
        );
        let upload_part_copy_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Greedy]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::KeyValue(String::from("x-id"), String::from("UploadPartCopy"))])
                }
            }
        );
        let write_get_object_response_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::POST,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("WriteGetObjectResponse"))]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::QuerySegment::KeyValue(String::from("x-id"), String::from("WriteGetObjectResponse"))])
                }
            }
        );
        aws_smithy_http_server::routing::Router::new()
            .route(
                abort_multipart_upload_request_spec,
                crate::server_operation_handler_trait::operation(registry.abort_multipart_upload),
            )
            .route(
                complete_multipart_upload_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.complete_multipart_upload,
                ),
            )
            .route(
                copy_object_request_spec,
                crate::server_operation_handler_trait::operation(registry.copy_object),
            )
            .route(
                create_bucket_request_spec,
                crate::server_operation_handler_trait::operation(registry.create_bucket),
            )
            .route(
                create_multipart_upload_request_spec,
                crate::server_operation_handler_trait::operation(registry.create_multipart_upload),
            )
            .route(
                delete_bucket_request_spec,
                crate::server_operation_handler_trait::operation(registry.delete_bucket),
            )
            .route(
                delete_bucket_analytics_configuration_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.delete_bucket_analytics_configuration,
                ),
            )
            .route(
                delete_bucket_cors_request_spec,
                crate::server_operation_handler_trait::operation(registry.delete_bucket_cors),
            )
            .route(
                delete_bucket_encryption_request_spec,
                crate::server_operation_handler_trait::operation(registry.delete_bucket_encryption),
            )
            .route(
                delete_bucket_intelligent_tiering_configuration_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.delete_bucket_intelligent_tiering_configuration,
                ),
            )
            .route(
                delete_bucket_inventory_configuration_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.delete_bucket_inventory_configuration,
                ),
            )
            .route(
                delete_bucket_lifecycle_request_spec,
                crate::server_operation_handler_trait::operation(registry.delete_bucket_lifecycle),
            )
            .route(
                delete_bucket_metrics_configuration_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.delete_bucket_metrics_configuration,
                ),
            )
            .route(
                delete_bucket_ownership_controls_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.delete_bucket_ownership_controls,
                ),
            )
            .route(
                delete_bucket_policy_request_spec,
                crate::server_operation_handler_trait::operation(registry.delete_bucket_policy),
            )
            .route(
                delete_bucket_replication_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.delete_bucket_replication,
                ),
            )
            .route(
                delete_bucket_tagging_request_spec,
                crate::server_operation_handler_trait::operation(registry.delete_bucket_tagging),
            )
            .route(
                delete_bucket_website_request_spec,
                crate::server_operation_handler_trait::operation(registry.delete_bucket_website),
            )
            .route(
                delete_object_request_spec,
                crate::server_operation_handler_trait::operation(registry.delete_object),
            )
            .route(
                delete_objects_request_spec,
                crate::server_operation_handler_trait::operation(registry.delete_objects),
            )
            .route(
                delete_object_tagging_request_spec,
                crate::server_operation_handler_trait::operation(registry.delete_object_tagging),
            )
            .route(
                delete_public_access_block_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.delete_public_access_block,
                ),
            )
            .route(
                get_bucket_accelerate_configuration_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.get_bucket_accelerate_configuration,
                ),
            )
            .route(
                get_bucket_acl_request_spec,
                crate::server_operation_handler_trait::operation(registry.get_bucket_acl),
            )
            .route(
                get_bucket_analytics_configuration_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.get_bucket_analytics_configuration,
                ),
            )
            .route(
                get_bucket_cors_request_spec,
                crate::server_operation_handler_trait::operation(registry.get_bucket_cors),
            )
            .route(
                get_bucket_encryption_request_spec,
                crate::server_operation_handler_trait::operation(registry.get_bucket_encryption),
            )
            .route(
                get_bucket_intelligent_tiering_configuration_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.get_bucket_intelligent_tiering_configuration,
                ),
            )
            .route(
                get_bucket_inventory_configuration_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.get_bucket_inventory_configuration,
                ),
            )
            .route(
                get_bucket_lifecycle_configuration_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.get_bucket_lifecycle_configuration,
                ),
            )
            .route(
                get_bucket_location_request_spec,
                crate::server_operation_handler_trait::operation(registry.get_bucket_location),
            )
            .route(
                get_bucket_logging_request_spec,
                crate::server_operation_handler_trait::operation(registry.get_bucket_logging),
            )
            .route(
                get_bucket_metrics_configuration_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.get_bucket_metrics_configuration,
                ),
            )
            .route(
                get_bucket_notification_configuration_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.get_bucket_notification_configuration,
                ),
            )
            .route(
                get_bucket_ownership_controls_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.get_bucket_ownership_controls,
                ),
            )
            .route(
                get_bucket_policy_request_spec,
                crate::server_operation_handler_trait::operation(registry.get_bucket_policy),
            )
            .route(
                get_bucket_policy_status_request_spec,
                crate::server_operation_handler_trait::operation(registry.get_bucket_policy_status),
            )
            .route(
                get_bucket_replication_request_spec,
                crate::server_operation_handler_trait::operation(registry.get_bucket_replication),
            )
            .route(
                get_bucket_request_payment_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.get_bucket_request_payment,
                ),
            )
            .route(
                get_bucket_tagging_request_spec,
                crate::server_operation_handler_trait::operation(registry.get_bucket_tagging),
            )
            .route(
                get_bucket_versioning_request_spec,
                crate::server_operation_handler_trait::operation(registry.get_bucket_versioning),
            )
            .route(
                get_bucket_website_request_spec,
                crate::server_operation_handler_trait::operation(registry.get_bucket_website),
            )
            .route(
                get_object_request_spec,
                crate::server_operation_handler_trait::operation(registry.get_object),
            )
            .route(
                get_object_acl_request_spec,
                crate::server_operation_handler_trait::operation(registry.get_object_acl),
            )
            .route(
                get_object_legal_hold_request_spec,
                crate::server_operation_handler_trait::operation(registry.get_object_legal_hold),
            )
            .route(
                get_object_lock_configuration_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.get_object_lock_configuration,
                ),
            )
            .route(
                get_object_retention_request_spec,
                crate::server_operation_handler_trait::operation(registry.get_object_retention),
            )
            .route(
                get_object_tagging_request_spec,
                crate::server_operation_handler_trait::operation(registry.get_object_tagging),
            )
            .route(
                get_object_torrent_request_spec,
                crate::server_operation_handler_trait::operation(registry.get_object_torrent),
            )
            .route(
                get_public_access_block_request_spec,
                crate::server_operation_handler_trait::operation(registry.get_public_access_block),
            )
            .route(
                head_bucket_request_spec,
                crate::server_operation_handler_trait::operation(registry.head_bucket),
            )
            .route(
                head_object_request_spec,
                crate::server_operation_handler_trait::operation(registry.head_object),
            )
            .route(
                list_bucket_analytics_configurations_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.list_bucket_analytics_configurations,
                ),
            )
            .route(
                list_bucket_intelligent_tiering_configurations_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.list_bucket_intelligent_tiering_configurations,
                ),
            )
            .route(
                list_bucket_inventory_configurations_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.list_bucket_inventory_configurations,
                ),
            )
            .route(
                list_bucket_metrics_configurations_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.list_bucket_metrics_configurations,
                ),
            )
            .route(
                list_buckets_request_spec,
                crate::server_operation_handler_trait::operation(registry.list_buckets),
            )
            .route(
                list_multipart_uploads_request_spec,
                crate::server_operation_handler_trait::operation(registry.list_multipart_uploads),
            )
            .route(
                list_objects_request_spec,
                crate::server_operation_handler_trait::operation(registry.list_objects),
            )
            .route(
                list_objects_v2_request_spec,
                crate::server_operation_handler_trait::operation(registry.list_objects_v2),
            )
            .route(
                list_object_versions_request_spec,
                crate::server_operation_handler_trait::operation(registry.list_object_versions),
            )
            .route(
                list_parts_request_spec,
                crate::server_operation_handler_trait::operation(registry.list_parts),
            )
            .route(
                put_bucket_accelerate_configuration_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.put_bucket_accelerate_configuration,
                ),
            )
            .route(
                put_bucket_acl_request_spec,
                crate::server_operation_handler_trait::operation(registry.put_bucket_acl),
            )
            .route(
                put_bucket_analytics_configuration_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.put_bucket_analytics_configuration,
                ),
            )
            .route(
                put_bucket_cors_request_spec,
                crate::server_operation_handler_trait::operation(registry.put_bucket_cors),
            )
            .route(
                put_bucket_encryption_request_spec,
                crate::server_operation_handler_trait::operation(registry.put_bucket_encryption),
            )
            .route(
                put_bucket_intelligent_tiering_configuration_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.put_bucket_intelligent_tiering_configuration,
                ),
            )
            .route(
                put_bucket_inventory_configuration_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.put_bucket_inventory_configuration,
                ),
            )
            .route(
                put_bucket_lifecycle_configuration_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.put_bucket_lifecycle_configuration,
                ),
            )
            .route(
                put_bucket_logging_request_spec,
                crate::server_operation_handler_trait::operation(registry.put_bucket_logging),
            )
            .route(
                put_bucket_metrics_configuration_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.put_bucket_metrics_configuration,
                ),
            )
            .route(
                put_bucket_notification_configuration_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.put_bucket_notification_configuration,
                ),
            )
            .route(
                put_bucket_ownership_controls_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.put_bucket_ownership_controls,
                ),
            )
            .route(
                put_bucket_policy_request_spec,
                crate::server_operation_handler_trait::operation(registry.put_bucket_policy),
            )
            .route(
                put_bucket_replication_request_spec,
                crate::server_operation_handler_trait::operation(registry.put_bucket_replication),
            )
            .route(
                put_bucket_request_payment_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.put_bucket_request_payment,
                ),
            )
            .route(
                put_bucket_tagging_request_spec,
                crate::server_operation_handler_trait::operation(registry.put_bucket_tagging),
            )
            .route(
                put_bucket_versioning_request_spec,
                crate::server_operation_handler_trait::operation(registry.put_bucket_versioning),
            )
            .route(
                put_bucket_website_request_spec,
                crate::server_operation_handler_trait::operation(registry.put_bucket_website),
            )
            .route(
                put_object_request_spec,
                crate::server_operation_handler_trait::operation(registry.put_object),
            )
            .route(
                put_object_acl_request_spec,
                crate::server_operation_handler_trait::operation(registry.put_object_acl),
            )
            .route(
                put_object_legal_hold_request_spec,
                crate::server_operation_handler_trait::operation(registry.put_object_legal_hold),
            )
            .route(
                put_object_lock_configuration_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.put_object_lock_configuration,
                ),
            )
            .route(
                put_object_retention_request_spec,
                crate::server_operation_handler_trait::operation(registry.put_object_retention),
            )
            .route(
                put_object_tagging_request_spec,
                crate::server_operation_handler_trait::operation(registry.put_object_tagging),
            )
            .route(
                put_public_access_block_request_spec,
                crate::server_operation_handler_trait::operation(registry.put_public_access_block),
            )
            .route(
                restore_object_request_spec,
                crate::server_operation_handler_trait::operation(registry.restore_object),
            )
            .route(
                upload_part_request_spec,
                crate::server_operation_handler_trait::operation(registry.upload_part),
            )
            .route(
                upload_part_copy_request_spec,
                crate::server_operation_handler_trait::operation(registry.upload_part_copy),
            )
            .route(
                write_get_object_response_request_spec,
                crate::server_operation_handler_trait::operation(
                    registry.write_get_object_response,
                ),
            )
    }
}
