// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn serialize_abort_multipart_upload_response(
    output: &crate::output::AbortMultipartUploadOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_abort_multipart_upload(
                output,
            )?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_abort_multipart_upload_error(
    error: &crate::error::AbortMultipartUploadError,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let response: axum_core::response::Response;
        match error {
            crate::error::AbortMultipartUploadError::NoSuchUpload(var_1) => {
                let payload =
                    crate::operation_ser::serialize_structure_crate_error_no_such_upload(var_1)?;
                response = http::Response::builder()
                    .status(400)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?;
            }
        };
        response
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_complete_multipart_upload_response(
    output: &crate::output::CompleteMultipartUploadOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_complete_multipart_upload(
                output,
            )?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_copy_object_response(
    output: &crate::output::CopyObjectOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_copy_object(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_copy_object_error(
    error: &crate::error::CopyObjectError,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let response: axum_core::response::Response;
        match error {
            crate::error::CopyObjectError::ObjectNotInActiveTierError(var_2) => {
                let payload = crate::operation_ser::serialize_structure_crate_error_object_not_in_active_tier_error(var_2)?;
                response = http::Response::builder()
                    .status(400)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?;
            }
        };
        response
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_create_bucket_response(
    output: &crate::output::CreateBucketOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_create_bucket(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_create_bucket_error(
    error: &crate::error::CreateBucketError,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let response: axum_core::response::Response;
        match error {
            crate::error::CreateBucketError::BucketAlreadyOwnedByYou(var_3) => {
                let payload = crate::operation_ser::serialize_structure_crate_error_bucket_already_owned_by_you(var_3)?;
                response = http::Response::builder()
                    .status(400)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?;
            }
            crate::error::CreateBucketError::BucketAlreadyExists(var_4) => {
                let payload =
                    crate::operation_ser::serialize_structure_crate_error_bucket_already_exists(
                        var_4,
                    )?;
                response = http::Response::builder()
                    .status(400)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?;
            }
        };
        response
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_create_multipart_upload_response(
    output: &crate::output::CreateMultipartUploadOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_create_multipart_upload(
                output,
            )?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_delete_bucket_response(
    output: &crate::output::DeleteBucketOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_delete_bucket(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_delete_bucket_analytics_configuration_response(
    output: &crate::output::DeleteBucketAnalyticsConfigurationOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload = crate::operation_ser::serialize_operation_crate_operation_delete_bucket_analytics_configuration(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_delete_bucket_cors_response(
    output: &crate::output::DeleteBucketCorsOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_delete_bucket_cors(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_delete_bucket_encryption_response(
    output: &crate::output::DeleteBucketEncryptionOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_delete_bucket_encryption(
                output,
            )?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_delete_bucket_intelligent_tiering_configuration_response(
    output: &crate::output::DeleteBucketIntelligentTieringConfigurationOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload = crate::operation_ser::serialize_operation_crate_operation_delete_bucket_intelligent_tiering_configuration(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_delete_bucket_inventory_configuration_response(
    output: &crate::output::DeleteBucketInventoryConfigurationOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload = crate::operation_ser::serialize_operation_crate_operation_delete_bucket_inventory_configuration(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_delete_bucket_lifecycle_response(
    output: &crate::output::DeleteBucketLifecycleOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_delete_bucket_lifecycle(
                output,
            )?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_delete_bucket_metrics_configuration_response(
    output: &crate::output::DeleteBucketMetricsConfigurationOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload = crate::operation_ser::serialize_operation_crate_operation_delete_bucket_metrics_configuration(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_delete_bucket_ownership_controls_response(
    output: &crate::output::DeleteBucketOwnershipControlsOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload = crate::operation_ser::serialize_operation_crate_operation_delete_bucket_ownership_controls(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_delete_bucket_policy_response(
    output: &crate::output::DeleteBucketPolicyOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_delete_bucket_policy(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_delete_bucket_replication_response(
    output: &crate::output::DeleteBucketReplicationOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_delete_bucket_replication(
                output,
            )?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_delete_bucket_tagging_response(
    output: &crate::output::DeleteBucketTaggingOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_delete_bucket_tagging(
                output,
            )?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_delete_bucket_website_response(
    output: &crate::output::DeleteBucketWebsiteOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_delete_bucket_website(
                output,
            )?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_delete_object_response(
    output: &crate::output::DeleteObjectOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_delete_object(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_delete_objects_response(
    output: &crate::output::DeleteObjectsOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_delete_objects(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_delete_object_tagging_response(
    output: &crate::output::DeleteObjectTaggingOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_delete_object_tagging(
                output,
            )?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_delete_public_access_block_response(
    output: &crate::output::DeletePublicAccessBlockOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_delete_public_access_block(
                output,
            )?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_get_bucket_accelerate_configuration_response(
    output: &crate::output::GetBucketAccelerateConfigurationOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload = crate::operation_ser::serialize_operation_crate_operation_get_bucket_accelerate_configuration(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_get_bucket_acl_response(
    output: &crate::output::GetBucketAclOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_get_bucket_acl(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_get_bucket_analytics_configuration_response(
    output: &crate::output::GetBucketAnalyticsConfigurationOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload = crate::operation_ser::serialize_operation_crate_operation_get_bucket_analytics_configuration(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_get_bucket_cors_response(
    output: &crate::output::GetBucketCorsOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_get_bucket_cors(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_get_bucket_encryption_response(
    output: &crate::output::GetBucketEncryptionOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_get_bucket_encryption(
                output,
            )?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_get_bucket_intelligent_tiering_configuration_response(
    output: &crate::output::GetBucketIntelligentTieringConfigurationOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload = crate::operation_ser::serialize_operation_crate_operation_get_bucket_intelligent_tiering_configuration(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_get_bucket_inventory_configuration_response(
    output: &crate::output::GetBucketInventoryConfigurationOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload = crate::operation_ser::serialize_operation_crate_operation_get_bucket_inventory_configuration(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_get_bucket_lifecycle_configuration_response(
    output: &crate::output::GetBucketLifecycleConfigurationOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload = crate::operation_ser::serialize_operation_crate_operation_get_bucket_lifecycle_configuration(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_get_bucket_location_response(
    output: &crate::output::GetBucketLocationOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_get_bucket_location(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_get_bucket_logging_response(
    output: &crate::output::GetBucketLoggingOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_get_bucket_logging(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_get_bucket_metrics_configuration_response(
    output: &crate::output::GetBucketMetricsConfigurationOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload = crate::operation_ser::serialize_operation_crate_operation_get_bucket_metrics_configuration(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_get_bucket_notification_configuration_response(
    output: &crate::output::GetBucketNotificationConfigurationOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload = crate::operation_ser::serialize_operation_crate_operation_get_bucket_notification_configuration(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_get_bucket_ownership_controls_response(
    output: &crate::output::GetBucketOwnershipControlsOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload = crate::operation_ser::serialize_operation_crate_operation_get_bucket_ownership_controls(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_get_bucket_policy_response(
    output: &crate::output::GetBucketPolicyOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_get_bucket_policy(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_get_bucket_policy_status_response(
    output: &crate::output::GetBucketPolicyStatusOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_get_bucket_policy_status(
                output,
            )?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_get_bucket_replication_response(
    output: &crate::output::GetBucketReplicationOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_get_bucket_replication(
                output,
            )?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_get_bucket_request_payment_response(
    output: &crate::output::GetBucketRequestPaymentOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_get_bucket_request_payment(
                output,
            )?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_get_bucket_tagging_response(
    output: &crate::output::GetBucketTaggingOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_get_bucket_tagging(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_get_bucket_versioning_response(
    output: &crate::output::GetBucketVersioningOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_get_bucket_versioning(
                output,
            )?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_get_bucket_website_response(
    output: &crate::output::GetBucketWebsiteOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_get_bucket_website(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_get_object_acl_response(
    output: &crate::output::GetObjectAclOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_get_object_acl(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_get_object_acl_error(
    error: &crate::error::GetObjectAclError,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let response: axum_core::response::Response;
        match error {
            crate::error::GetObjectAclError::NoSuchKey(var_5) => {
                let payload =
                    crate::operation_ser::serialize_structure_crate_error_no_such_key(var_5)?;
                response = http::Response::builder()
                    .status(400)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?;
            }
        };
        response
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_get_object_legal_hold_response(
    output: &crate::output::GetObjectLegalHoldOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_get_object_legal_hold(
                output,
            )?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_get_object_lock_configuration_response(
    output: &crate::output::GetObjectLockConfigurationOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload = crate::operation_ser::serialize_operation_crate_operation_get_object_lock_configuration(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_get_object_retention_response(
    output: &crate::output::GetObjectRetentionOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_get_object_retention(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_get_object_tagging_response(
    output: &crate::output::GetObjectTaggingOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_get_object_tagging(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_get_public_access_block_response(
    output: &crate::output::GetPublicAccessBlockOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_get_public_access_block(
                output,
            )?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_head_bucket_response(
    output: &crate::output::HeadBucketOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_head_bucket(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_head_bucket_error(
    error: &crate::error::HeadBucketError,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let response: axum_core::response::Response;
        match error {
            crate::error::HeadBucketError::NotFound(var_6) => {
                let payload =
                    crate::operation_ser::serialize_structure_crate_error_not_found(var_6)?;
                response = http::Response::builder()
                    .status(400)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?;
            }
        };
        response
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_head_object_response(
    output: &crate::output::HeadObjectOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_head_object(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_head_object_error(
    error: &crate::error::HeadObjectError,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let response: axum_core::response::Response;
        match error {
            crate::error::HeadObjectError::NotFound(var_7) => {
                let payload =
                    crate::operation_ser::serialize_structure_crate_error_not_found(var_7)?;
                response = http::Response::builder()
                    .status(400)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?;
            }
        };
        response
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_list_bucket_analytics_configurations_response(
    output: &crate::output::ListBucketAnalyticsConfigurationsOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload = crate::operation_ser::serialize_operation_crate_operation_list_bucket_analytics_configurations(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_list_bucket_intelligent_tiering_configurations_response(
    output: &crate::output::ListBucketIntelligentTieringConfigurationsOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload = crate::operation_ser::serialize_operation_crate_operation_list_bucket_intelligent_tiering_configurations(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_list_bucket_inventory_configurations_response(
    output: &crate::output::ListBucketInventoryConfigurationsOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload = crate::operation_ser::serialize_operation_crate_operation_list_bucket_inventory_configurations(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_list_bucket_metrics_configurations_response(
    output: &crate::output::ListBucketMetricsConfigurationsOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload = crate::operation_ser::serialize_operation_crate_operation_list_bucket_metrics_configurations(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_list_buckets_response(
    output: &crate::output::ListBucketsOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_list_buckets(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_list_multipart_uploads_response(
    output: &crate::output::ListMultipartUploadsOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_list_multipart_uploads(
                output,
            )?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_list_objects_response(
    output: &crate::output::ListObjectsOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_list_objects(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_list_objects_error(
    error: &crate::error::ListObjectsError,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let response: axum_core::response::Response;
        match error {
            crate::error::ListObjectsError::NoSuchBucket(var_8) => {
                let payload =
                    crate::operation_ser::serialize_structure_crate_error_no_such_bucket(var_8)?;
                response = http::Response::builder()
                    .status(400)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?;
            }
        };
        response
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_list_objects_v2_response(
    output: &crate::output::ListObjectsV2Output,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_list_objects_v2(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_list_objects_v2_error(
    error: &crate::error::ListObjectsV2Error,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let response: axum_core::response::Response;
        match error {
            crate::error::ListObjectsV2Error::NoSuchBucket(var_9) => {
                let payload =
                    crate::operation_ser::serialize_structure_crate_error_no_such_bucket(var_9)?;
                response = http::Response::builder()
                    .status(400)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?;
            }
        };
        response
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_list_object_versions_response(
    output: &crate::output::ListObjectVersionsOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_list_object_versions(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_list_parts_response(
    output: &crate::output::ListPartsOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload = crate::operation_ser::serialize_operation_crate_operation_list_parts(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_put_bucket_accelerate_configuration_response(
    output: &crate::output::PutBucketAccelerateConfigurationOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload = crate::operation_ser::serialize_operation_crate_operation_put_bucket_accelerate_configuration(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_put_bucket_acl_response(
    output: &crate::output::PutBucketAclOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_put_bucket_acl(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_put_bucket_analytics_configuration_response(
    output: &crate::output::PutBucketAnalyticsConfigurationOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload = crate::operation_ser::serialize_operation_crate_operation_put_bucket_analytics_configuration(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_put_bucket_cors_response(
    output: &crate::output::PutBucketCorsOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_put_bucket_cors(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_put_bucket_encryption_response(
    output: &crate::output::PutBucketEncryptionOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_put_bucket_encryption(
                output,
            )?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_put_bucket_intelligent_tiering_configuration_response(
    output: &crate::output::PutBucketIntelligentTieringConfigurationOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload = crate::operation_ser::serialize_operation_crate_operation_put_bucket_intelligent_tiering_configuration(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_put_bucket_inventory_configuration_response(
    output: &crate::output::PutBucketInventoryConfigurationOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload = crate::operation_ser::serialize_operation_crate_operation_put_bucket_inventory_configuration(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_put_bucket_lifecycle_configuration_response(
    output: &crate::output::PutBucketLifecycleConfigurationOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload = crate::operation_ser::serialize_operation_crate_operation_put_bucket_lifecycle_configuration(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_put_bucket_logging_response(
    output: &crate::output::PutBucketLoggingOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_put_bucket_logging(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_put_bucket_metrics_configuration_response(
    output: &crate::output::PutBucketMetricsConfigurationOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload = crate::operation_ser::serialize_operation_crate_operation_put_bucket_metrics_configuration(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_put_bucket_notification_configuration_response(
    output: &crate::output::PutBucketNotificationConfigurationOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload = crate::operation_ser::serialize_operation_crate_operation_put_bucket_notification_configuration(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_put_bucket_ownership_controls_response(
    output: &crate::output::PutBucketOwnershipControlsOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload = crate::operation_ser::serialize_operation_crate_operation_put_bucket_ownership_controls(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_put_bucket_policy_response(
    output: &crate::output::PutBucketPolicyOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_put_bucket_policy(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_put_bucket_replication_response(
    output: &crate::output::PutBucketReplicationOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_put_bucket_replication(
                output,
            )?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_put_bucket_request_payment_response(
    output: &crate::output::PutBucketRequestPaymentOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_put_bucket_request_payment(
                output,
            )?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_put_bucket_tagging_response(
    output: &crate::output::PutBucketTaggingOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_put_bucket_tagging(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_put_bucket_versioning_response(
    output: &crate::output::PutBucketVersioningOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_put_bucket_versioning(
                output,
            )?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_put_bucket_website_response(
    output: &crate::output::PutBucketWebsiteOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_put_bucket_website(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_put_object_response(
    output: &crate::output::PutObjectOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload = crate::operation_ser::serialize_operation_crate_operation_put_object(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_put_object_acl_response(
    output: &crate::output::PutObjectAclOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_put_object_acl(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_put_object_acl_error(
    error: &crate::error::PutObjectAclError,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let response: axum_core::response::Response;
        match error {
            crate::error::PutObjectAclError::NoSuchKey(var_10) => {
                let payload =
                    crate::operation_ser::serialize_structure_crate_error_no_such_key(var_10)?;
                response = http::Response::builder()
                    .status(400)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?;
            }
        };
        response
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_put_object_legal_hold_response(
    output: &crate::output::PutObjectLegalHoldOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_put_object_legal_hold(
                output,
            )?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_put_object_lock_configuration_response(
    output: &crate::output::PutObjectLockConfigurationOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload = crate::operation_ser::serialize_operation_crate_operation_put_object_lock_configuration(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_put_object_retention_response(
    output: &crate::output::PutObjectRetentionOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_put_object_retention(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_put_object_tagging_response(
    output: &crate::output::PutObjectTaggingOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_put_object_tagging(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_put_public_access_block_response(
    output: &crate::output::PutPublicAccessBlockOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_put_public_access_block(
                output,
            )?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_restore_object_response(
    output: &crate::output::RestoreObjectOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_restore_object(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_restore_object_error(
    error: &crate::error::RestoreObjectError,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let response: axum_core::response::Response;
        match error {
            crate::error::RestoreObjectError::ObjectAlreadyInActiveTierError(var_11) => {
                let payload = crate::operation_ser::serialize_structure_crate_error_object_already_in_active_tier_error(var_11)?;
                response = http::Response::builder()
                    .status(400)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?;
            }
        };
        response
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_upload_part_response(
    output: &crate::output::UploadPartOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_upload_part(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_upload_part_copy_response(
    output: &crate::output::UploadPartCopyOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_upload_part_copy(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_write_get_object_response_response(
    output: &crate::output::WriteGetObjectResponseOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_operation_crate_operation_write_get_object_response(
                output,
            )?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::body::to_boxed(payload))?
    })
}

pub fn serialize_operation_crate_operation_abort_multipart_upload(
    output: &crate::output::AbortMultipartUploadOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("AbortMultipartUploadOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_abort_multipart_upload_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_structure_crate_error_no_such_upload(
    error: &crate::error::NoSuchUpload,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("Error")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_error_no_such_upload(error, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_complete_multipart_upload(
    output: &crate::output::CompleteMultipartUploadOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("CompleteMultipartUploadResult")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_complete_multipart_upload_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_copy_object(
    output: &crate::output::CopyObjectOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("CopyObjectOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_copy_object_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_structure_crate_error_object_not_in_active_tier_error(
    error: &crate::error::ObjectNotInActiveTierError,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("Error")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_error_object_not_in_active_tier_error(
            error, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_create_bucket(
    output: &crate::output::CreateBucketOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("CreateBucketOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_create_bucket_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_structure_crate_error_bucket_already_owned_by_you(
    error: &crate::error::BucketAlreadyOwnedByYou,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("Error")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_error_bucket_already_owned_by_you(error, root)?
    }
    Ok(out)
}

pub fn serialize_structure_crate_error_bucket_already_exists(
    error: &crate::error::BucketAlreadyExists,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("Error")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_error_bucket_already_exists(error, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_create_multipart_upload(
    output: &crate::output::CreateMultipartUploadOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("InitiateMultipartUploadResult")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_create_multipart_upload_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_delete_bucket(
    output: &crate::output::DeleteBucketOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("DeleteBucketOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_delete_bucket_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_delete_bucket_analytics_configuration(
    output: &crate::output::DeleteBucketAnalyticsConfigurationOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("DeleteBucketAnalyticsConfigurationOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_delete_bucket_analytics_configuration_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_delete_bucket_cors(
    output: &crate::output::DeleteBucketCorsOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("DeleteBucketCorsOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_delete_bucket_cors_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_delete_bucket_encryption(
    output: &crate::output::DeleteBucketEncryptionOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("DeleteBucketEncryptionOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_delete_bucket_encryption_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_delete_bucket_intelligent_tiering_configuration(
    output: &crate::output::DeleteBucketIntelligentTieringConfigurationOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("DeleteBucketIntelligentTieringConfigurationOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_delete_bucket_intelligent_tiering_configuration_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_delete_bucket_inventory_configuration(
    output: &crate::output::DeleteBucketInventoryConfigurationOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("DeleteBucketInventoryConfigurationOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_delete_bucket_inventory_configuration_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_delete_bucket_lifecycle(
    output: &crate::output::DeleteBucketLifecycleOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("DeleteBucketLifecycleOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_delete_bucket_lifecycle_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_delete_bucket_metrics_configuration(
    output: &crate::output::DeleteBucketMetricsConfigurationOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("DeleteBucketMetricsConfigurationOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_delete_bucket_metrics_configuration_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_delete_bucket_ownership_controls(
    output: &crate::output::DeleteBucketOwnershipControlsOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("DeleteBucketOwnershipControlsOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_delete_bucket_ownership_controls_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_delete_bucket_policy(
    output: &crate::output::DeleteBucketPolicyOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("DeleteBucketPolicyOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_delete_bucket_policy_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_delete_bucket_replication(
    output: &crate::output::DeleteBucketReplicationOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("DeleteBucketReplicationOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_delete_bucket_replication_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_delete_bucket_tagging(
    output: &crate::output::DeleteBucketTaggingOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("DeleteBucketTaggingOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_delete_bucket_tagging_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_delete_bucket_website(
    output: &crate::output::DeleteBucketWebsiteOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("DeleteBucketWebsiteOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_delete_bucket_website_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_delete_object(
    output: &crate::output::DeleteObjectOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("DeleteObjectOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_delete_object_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_delete_objects(
    output: &crate::output::DeleteObjectsOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("DeleteResult")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_delete_objects_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_delete_object_tagging(
    output: &crate::output::DeleteObjectTaggingOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("DeleteObjectTaggingOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_delete_object_tagging_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_delete_public_access_block(
    output: &crate::output::DeletePublicAccessBlockOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("DeletePublicAccessBlockOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_delete_public_access_block_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_get_bucket_accelerate_configuration(
    output: &crate::output::GetBucketAccelerateConfigurationOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("AccelerateConfiguration")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_get_bucket_accelerate_configuration_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_get_bucket_acl(
    output: &crate::output::GetBucketAclOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("AccessControlPolicy")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_get_bucket_acl_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_get_bucket_analytics_configuration(
    output: &crate::output::GetBucketAnalyticsConfigurationOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("GetBucketAnalyticsConfigurationOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_get_bucket_analytics_configuration_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_get_bucket_cors(
    output: &crate::output::GetBucketCorsOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("CORSConfiguration")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_get_bucket_cors_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_get_bucket_encryption(
    output: &crate::output::GetBucketEncryptionOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("GetBucketEncryptionOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_get_bucket_encryption_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_get_bucket_intelligent_tiering_configuration(
    output: &crate::output::GetBucketIntelligentTieringConfigurationOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("GetBucketIntelligentTieringConfigurationOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_get_bucket_intelligent_tiering_configuration_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_get_bucket_inventory_configuration(
    output: &crate::output::GetBucketInventoryConfigurationOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("GetBucketInventoryConfigurationOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_get_bucket_inventory_configuration_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_get_bucket_lifecycle_configuration(
    output: &crate::output::GetBucketLifecycleConfigurationOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("LifecycleConfiguration")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_get_bucket_lifecycle_configuration_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_get_bucket_location(
    output: &crate::output::GetBucketLocationOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("LocationConstraint")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_get_bucket_location_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_get_bucket_logging(
    output: &crate::output::GetBucketLoggingOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("BucketLoggingStatus")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_get_bucket_logging_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_get_bucket_metrics_configuration(
    output: &crate::output::GetBucketMetricsConfigurationOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("GetBucketMetricsConfigurationOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_get_bucket_metrics_configuration_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_get_bucket_notification_configuration(
    output: &crate::output::GetBucketNotificationConfigurationOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("NotificationConfiguration")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_get_bucket_notification_configuration_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_get_bucket_ownership_controls(
    output: &crate::output::GetBucketOwnershipControlsOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("GetBucketOwnershipControlsOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_get_bucket_ownership_controls_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_get_bucket_policy(
    output: &crate::output::GetBucketPolicyOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("GetBucketPolicyOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_get_bucket_policy_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_get_bucket_policy_status(
    output: &crate::output::GetBucketPolicyStatusOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("GetBucketPolicyStatusOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_get_bucket_policy_status_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_get_bucket_replication(
    output: &crate::output::GetBucketReplicationOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("GetBucketReplicationOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_get_bucket_replication_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_get_bucket_request_payment(
    output: &crate::output::GetBucketRequestPaymentOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("RequestPaymentConfiguration")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_get_bucket_request_payment_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_get_bucket_tagging(
    output: &crate::output::GetBucketTaggingOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("Tagging")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_get_bucket_tagging_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_get_bucket_versioning(
    output: &crate::output::GetBucketVersioningOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("VersioningConfiguration")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_get_bucket_versioning_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_get_bucket_website(
    output: &crate::output::GetBucketWebsiteOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("WebsiteConfiguration")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_get_bucket_website_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_get_object_acl(
    output: &crate::output::GetObjectAclOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("AccessControlPolicy")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_get_object_acl_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_structure_crate_error_no_such_key(
    error: &crate::error::NoSuchKey,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("Error")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_error_no_such_key(error, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_get_object_legal_hold(
    output: &crate::output::GetObjectLegalHoldOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("GetObjectLegalHoldOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_get_object_legal_hold_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_get_object_lock_configuration(
    output: &crate::output::GetObjectLockConfigurationOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("GetObjectLockConfigurationOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_get_object_lock_configuration_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_get_object_retention(
    output: &crate::output::GetObjectRetentionOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("GetObjectRetentionOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_get_object_retention_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_get_object_tagging(
    output: &crate::output::GetObjectTaggingOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("Tagging")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_get_object_tagging_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_get_public_access_block(
    output: &crate::output::GetPublicAccessBlockOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("GetPublicAccessBlockOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_get_public_access_block_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_head_bucket(
    output: &crate::output::HeadBucketOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("HeadBucketOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_head_bucket_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_structure_crate_error_not_found(
    error: &crate::error::NotFound,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("Error")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_error_not_found(error, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_head_object(
    output: &crate::output::HeadObjectOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("HeadObjectOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_head_object_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_list_bucket_analytics_configurations(
    output: &crate::output::ListBucketAnalyticsConfigurationsOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("ListBucketAnalyticsConfigurationResult")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_list_bucket_analytics_configurations_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_list_bucket_intelligent_tiering_configurations(
    output: &crate::output::ListBucketIntelligentTieringConfigurationsOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("ListBucketIntelligentTieringConfigurationsOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_list_bucket_intelligent_tiering_configurations_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_list_bucket_inventory_configurations(
    output: &crate::output::ListBucketInventoryConfigurationsOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("ListInventoryConfigurationsResult")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_list_bucket_inventory_configurations_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_list_bucket_metrics_configurations(
    output: &crate::output::ListBucketMetricsConfigurationsOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("ListMetricsConfigurationsResult")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_list_bucket_metrics_configurations_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_list_buckets(
    output: &crate::output::ListBucketsOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("ListAllMyBucketsResult")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_list_buckets_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_list_multipart_uploads(
    output: &crate::output::ListMultipartUploadsOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("ListMultipartUploadsResult")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_list_multipart_uploads_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_list_objects(
    output: &crate::output::ListObjectsOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("ListBucketResult")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_list_objects_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_structure_crate_error_no_such_bucket(
    error: &crate::error::NoSuchBucket,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("Error")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_error_no_such_bucket(error, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_list_objects_v2(
    output: &crate::output::ListObjectsV2Output,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("ListBucketResult")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_list_objects_v2_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_list_object_versions(
    output: &crate::output::ListObjectVersionsOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("ListVersionsResult")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_list_object_versions_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_list_parts(
    output: &crate::output::ListPartsOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("ListPartsResult")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_list_parts_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_put_bucket_accelerate_configuration(
    output: &crate::output::PutBucketAccelerateConfigurationOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("PutBucketAccelerateConfigurationOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_put_bucket_accelerate_configuration_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_put_bucket_acl(
    output: &crate::output::PutBucketAclOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("PutBucketAclOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_put_bucket_acl_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_put_bucket_analytics_configuration(
    output: &crate::output::PutBucketAnalyticsConfigurationOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("PutBucketAnalyticsConfigurationOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_put_bucket_analytics_configuration_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_put_bucket_cors(
    output: &crate::output::PutBucketCorsOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("PutBucketCorsOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_put_bucket_cors_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_put_bucket_encryption(
    output: &crate::output::PutBucketEncryptionOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("PutBucketEncryptionOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_put_bucket_encryption_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_put_bucket_intelligent_tiering_configuration(
    output: &crate::output::PutBucketIntelligentTieringConfigurationOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("PutBucketIntelligentTieringConfigurationOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_put_bucket_intelligent_tiering_configuration_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_put_bucket_inventory_configuration(
    output: &crate::output::PutBucketInventoryConfigurationOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("PutBucketInventoryConfigurationOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_put_bucket_inventory_configuration_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_put_bucket_lifecycle_configuration(
    output: &crate::output::PutBucketLifecycleConfigurationOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("PutBucketLifecycleConfigurationOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_put_bucket_lifecycle_configuration_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_put_bucket_logging(
    output: &crate::output::PutBucketLoggingOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("PutBucketLoggingOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_put_bucket_logging_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_put_bucket_metrics_configuration(
    output: &crate::output::PutBucketMetricsConfigurationOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("PutBucketMetricsConfigurationOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_put_bucket_metrics_configuration_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_put_bucket_notification_configuration(
    output: &crate::output::PutBucketNotificationConfigurationOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("PutBucketNotificationConfigurationOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_put_bucket_notification_configuration_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_put_bucket_ownership_controls(
    output: &crate::output::PutBucketOwnershipControlsOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("PutBucketOwnershipControlsOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_put_bucket_ownership_controls_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_put_bucket_policy(
    output: &crate::output::PutBucketPolicyOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("PutBucketPolicyOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_put_bucket_policy_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_put_bucket_replication(
    output: &crate::output::PutBucketReplicationOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("PutBucketReplicationOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_put_bucket_replication_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_put_bucket_request_payment(
    output: &crate::output::PutBucketRequestPaymentOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("PutBucketRequestPaymentOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_put_bucket_request_payment_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_put_bucket_tagging(
    output: &crate::output::PutBucketTaggingOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("PutBucketTaggingOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_put_bucket_tagging_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_put_bucket_versioning(
    output: &crate::output::PutBucketVersioningOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("PutBucketVersioningOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_put_bucket_versioning_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_put_bucket_website(
    output: &crate::output::PutBucketWebsiteOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("PutBucketWebsiteOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_put_bucket_website_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_put_object(
    output: &crate::output::PutObjectOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("PutObjectOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_put_object_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_put_object_acl(
    output: &crate::output::PutObjectAclOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("PutObjectAclOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_put_object_acl_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_put_object_legal_hold(
    output: &crate::output::PutObjectLegalHoldOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("PutObjectLegalHoldOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_put_object_legal_hold_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_put_object_lock_configuration(
    output: &crate::output::PutObjectLockConfigurationOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("PutObjectLockConfigurationOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_put_object_lock_configuration_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_put_object_retention(
    output: &crate::output::PutObjectRetentionOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("PutObjectRetentionOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_put_object_retention_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_put_object_tagging(
    output: &crate::output::PutObjectTaggingOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("PutObjectTaggingOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_put_object_tagging_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_put_public_access_block(
    output: &crate::output::PutPublicAccessBlockOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("PutPublicAccessBlockOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_put_public_access_block_output(
            output, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_restore_object(
    output: &crate::output::RestoreObjectOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("RestoreObjectOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_restore_object_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_structure_crate_error_object_already_in_active_tier_error(
    error: &crate::error::ObjectAlreadyInActiveTierError,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("Error")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_error_object_already_in_active_tier_error(
            error, root,
        )?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_upload_part(
    output: &crate::output::UploadPartOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("UploadPartOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_upload_part_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_upload_part_copy(
    output: &crate::output::UploadPartCopyOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("UploadPartCopyOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_upload_part_copy_output(output, root)?
    }
    Ok(out)
}

pub fn serialize_operation_crate_operation_write_get_object_response(
    output: &crate::output::WriteGetObjectResponseOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("WriteGetObjectResponseOutput")
            .write_ns("http://s3.amazonaws.com/doc/2006-03-01/", None);
        crate::xml_ser::serialize_structure_crate_output_write_get_object_response_output(
            output, root,
        )?
    }
    Ok(out)
}
