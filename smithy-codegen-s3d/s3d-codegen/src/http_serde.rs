// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn deser_header_abort_multipart_upload_abort_multipart_upload_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_abort_multipart_upload_abort_multipart_upload_input_request_payer(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestPayer>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-payer").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_complete_multipart_upload_complete_multipart_upload_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_complete_multipart_upload_complete_multipart_upload_input_request_payer(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestPayer>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-payer").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_acl(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ObjectCannedAcl>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-acl").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_bucket_key_enabled(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<bool>, aws_smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-bucket-key-enabled")
        .iter();
    let var_1 = aws_smithy_http::header::read_many_primitive::<bool>(headers)?;
    if var_1.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_1.len()),
        ))
    } else {
        let mut var_1 = var_1;
        Ok(var_1.pop())
    }
}

pub fn deser_header_copy_object_copy_object_input_cache_control(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Cache-Control").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_content_disposition(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-Disposition").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_content_encoding(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-Encoding").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_content_language(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-Language").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_content_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-Type").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_copy_source(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-copy-source").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_copy_source_if_match(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-copy-source-if-match").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_copy_source_if_modified_since(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<aws_smithy_types::DateTime>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-copy-source-if-modified-since")
        .iter();
    let var_2: Vec<aws_smithy_types::DateTime> = aws_smithy_http::header::many_dates(
        headers,
        aws_smithy_types::date_time::Format::HttpDate,
    )?;
    if var_2.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_2.len()),
        ))
    } else {
        let mut var_2 = var_2;
        Ok(var_2.pop())
    }
}

pub fn deser_header_copy_object_copy_object_input_copy_source_if_none_match(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-copy-source-if-none-match").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_copy_source_if_unmodified_since(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<aws_smithy_types::DateTime>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-copy-source-if-unmodified-since")
        .iter();
    let var_3: Vec<aws_smithy_types::DateTime> = aws_smithy_http::header::many_dates(
        headers,
        aws_smithy_types::date_time::Format::HttpDate,
    )?;
    if var_3.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_3.len()),
        ))
    } else {
        let mut var_3 = var_3;
        Ok(var_3.pop())
    }
}

pub fn deser_header_copy_object_copy_object_input_copy_source_sse_customer_algorithm(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-copy-source-server-side-encryption-customer-algorithm")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_copy_source_sse_customer_key(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-copy-source-server-side-encryption-customer-key")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_copy_source_sse_customer_key_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-copy-source-server-side-encryption-customer-key-MD5")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_expected_source_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-source-expected-bucket-owner")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_expires(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<aws_smithy_types::DateTime>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Expires").iter();
    let var_4: Vec<aws_smithy_types::DateTime> = aws_smithy_http::header::many_dates(
        headers,
        aws_smithy_types::date_time::Format::HttpDate,
    )?;
    if var_4.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_4.len()),
        ))
    } else {
        let mut var_4 = var_4;
        Ok(var_4.pop())
    }
}

pub fn deser_header_copy_object_copy_object_input_grant_full_control(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-grant-full-control").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_grant_read(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-grant-read").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_grant_read_acp(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-grant-read-acp").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_grant_write_acp(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-grant-write-acp").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_metadata_directive(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::MetadataDirective>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-metadata-directive").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_object_lock_legal_hold_status(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ObjectLockLegalHoldStatus>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-object-lock-legal-hold").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_object_lock_mode(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ObjectLockMode>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-object-lock-mode").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_object_lock_retain_until_date(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<aws_smithy_types::DateTime>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-object-lock-retain-until-date")
        .iter();
    let var_5: Vec<aws_smithy_types::DateTime> = aws_smithy_http::header::many_dates(
        headers,
        aws_smithy_types::date_time::Format::DateTime,
    )?;
    if var_5.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_5.len()),
        ))
    } else {
        let mut var_5 = var_5;
        Ok(var_5.pop())
    }
}

pub fn deser_header_copy_object_copy_object_input_request_payer(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestPayer>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-payer").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_sse_customer_algorithm(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-algorithm")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_sse_customer_key(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-key")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_sse_customer_key_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-key-MD5")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_ssekms_encryption_context(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-context")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_ssekms_key_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-aws-kms-key-id")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_server_side_encryption(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ServerSideEncryption>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-server-side-encryption").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_storage_class(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::StorageClass>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-storage-class").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_tagging(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-tagging").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_tagging_directive(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::TaggingDirective>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-tagging-directive").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_copy_object_copy_object_input_website_redirect_location(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-website-redirect-location").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_bucket_create_bucket_input_acl(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::BucketCannedAcl>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-acl").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_bucket_create_bucket_input_grant_full_control(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-grant-full-control").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_bucket_create_bucket_input_grant_read(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-grant-read").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_bucket_create_bucket_input_grant_read_acp(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-grant-read-acp").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_bucket_create_bucket_input_grant_write(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-grant-write").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_bucket_create_bucket_input_grant_write_acp(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-grant-write-acp").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_bucket_create_bucket_input_object_lock_enabled_for_bucket(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<bool>, aws_smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-bucket-object-lock-enabled")
        .iter();
    let var_6 = aws_smithy_http::header::read_many_primitive::<bool>(headers)?;
    if var_6.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_6.len()),
        ))
    } else {
        let mut var_6 = var_6;
        Ok(var_6.pop())
    }
}

pub fn deser_header_create_bucket_create_bucket_input_object_ownership(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ObjectOwnership>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-object-ownership").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_multipart_upload_create_multipart_upload_input_acl(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ObjectCannedAcl>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-acl").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_multipart_upload_create_multipart_upload_input_bucket_key_enabled(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<bool>, aws_smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-bucket-key-enabled")
        .iter();
    let var_7 = aws_smithy_http::header::read_many_primitive::<bool>(headers)?;
    if var_7.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_7.len()),
        ))
    } else {
        let mut var_7 = var_7;
        Ok(var_7.pop())
    }
}

pub fn deser_header_create_multipart_upload_create_multipart_upload_input_cache_control(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Cache-Control").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_multipart_upload_create_multipart_upload_input_content_disposition(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-Disposition").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_multipart_upload_create_multipart_upload_input_content_encoding(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-Encoding").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_multipart_upload_create_multipart_upload_input_content_language(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-Language").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_multipart_upload_create_multipart_upload_input_content_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-Type").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_multipart_upload_create_multipart_upload_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_multipart_upload_create_multipart_upload_input_expires(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<aws_smithy_types::DateTime>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Expires").iter();
    let var_8: Vec<aws_smithy_types::DateTime> = aws_smithy_http::header::many_dates(
        headers,
        aws_smithy_types::date_time::Format::HttpDate,
    )?;
    if var_8.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_8.len()),
        ))
    } else {
        let mut var_8 = var_8;
        Ok(var_8.pop())
    }
}

pub fn deser_header_create_multipart_upload_create_multipart_upload_input_grant_full_control(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-grant-full-control").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_multipart_upload_create_multipart_upload_input_grant_read(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-grant-read").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_multipart_upload_create_multipart_upload_input_grant_read_acp(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-grant-read-acp").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_multipart_upload_create_multipart_upload_input_grant_write_acp(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-grant-write-acp").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_multipart_upload_create_multipart_upload_input_object_lock_legal_hold_status(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ObjectLockLegalHoldStatus>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-object-lock-legal-hold").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_multipart_upload_create_multipart_upload_input_object_lock_mode(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ObjectLockMode>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-object-lock-mode").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_multipart_upload_create_multipart_upload_input_object_lock_retain_until_date(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<aws_smithy_types::DateTime>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-object-lock-retain-until-date")
        .iter();
    let var_9: Vec<aws_smithy_types::DateTime> = aws_smithy_http::header::many_dates(
        headers,
        aws_smithy_types::date_time::Format::DateTime,
    )?;
    if var_9.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_9.len()),
        ))
    } else {
        let mut var_9 = var_9;
        Ok(var_9.pop())
    }
}

pub fn deser_header_create_multipart_upload_create_multipart_upload_input_request_payer(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestPayer>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-payer").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_multipart_upload_create_multipart_upload_input_sse_customer_algorithm(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-algorithm")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_multipart_upload_create_multipart_upload_input_sse_customer_key(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-key")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_multipart_upload_create_multipart_upload_input_sse_customer_key_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-key-MD5")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_multipart_upload_create_multipart_upload_input_ssekms_encryption_context(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-context")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_multipart_upload_create_multipart_upload_input_ssekms_key_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-aws-kms-key-id")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_multipart_upload_create_multipart_upload_input_server_side_encryption(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ServerSideEncryption>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-server-side-encryption").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_multipart_upload_create_multipart_upload_input_storage_class(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::StorageClass>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-storage-class").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_multipart_upload_create_multipart_upload_input_tagging(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-tagging").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_multipart_upload_create_multipart_upload_input_website_redirect_location(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-website-redirect-location").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_bucket_delete_bucket_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_bucket_analytics_configuration_delete_bucket_analytics_configuration_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_bucket_cors_delete_bucket_cors_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_bucket_encryption_delete_bucket_encryption_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_bucket_inventory_configuration_delete_bucket_inventory_configuration_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_bucket_lifecycle_delete_bucket_lifecycle_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_bucket_metrics_configuration_delete_bucket_metrics_configuration_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_bucket_ownership_controls_delete_bucket_ownership_controls_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_bucket_policy_delete_bucket_policy_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_bucket_replication_delete_bucket_replication_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_bucket_tagging_delete_bucket_tagging_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_bucket_website_delete_bucket_website_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_object_delete_object_input_bypass_governance_retention(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<bool>, aws_smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-bypass-governance-retention")
        .iter();
    let var_10 = aws_smithy_http::header::read_many_primitive::<bool>(headers)?;
    if var_10.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_10.len()),
        ))
    } else {
        let mut var_10 = var_10;
        Ok(var_10.pop())
    }
}

pub fn deser_header_delete_object_delete_object_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_object_delete_object_input_mfa(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-mfa").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_object_delete_object_input_request_payer(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestPayer>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-payer").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_objects_delete_objects_input_bypass_governance_retention(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<bool>, aws_smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-bypass-governance-retention")
        .iter();
    let var_11 = aws_smithy_http::header::read_many_primitive::<bool>(headers)?;
    if var_11.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_11.len()),
        ))
    } else {
        let mut var_11 = var_11;
        Ok(var_11.pop())
    }
}

pub fn deser_header_delete_objects_delete_objects_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_objects_delete_objects_input_mfa(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-mfa").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_objects_delete_objects_input_request_payer(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestPayer>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-payer").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_object_tagging_delete_object_tagging_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_public_access_block_delete_public_access_block_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_bucket_accelerate_configuration_get_bucket_accelerate_configuration_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_bucket_acl_get_bucket_acl_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_bucket_analytics_configuration_get_bucket_analytics_configuration_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_bucket_cors_get_bucket_cors_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_bucket_encryption_get_bucket_encryption_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_bucket_inventory_configuration_get_bucket_inventory_configuration_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_bucket_lifecycle_configuration_get_bucket_lifecycle_configuration_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_bucket_location_get_bucket_location_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_bucket_logging_get_bucket_logging_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_bucket_metrics_configuration_get_bucket_metrics_configuration_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_bucket_notification_configuration_get_bucket_notification_configuration_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_bucket_ownership_controls_get_bucket_ownership_controls_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_bucket_policy_get_bucket_policy_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_bucket_policy_status_get_bucket_policy_status_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_bucket_replication_get_bucket_replication_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_bucket_request_payment_get_bucket_request_payment_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_bucket_tagging_get_bucket_tagging_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_bucket_versioning_get_bucket_versioning_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_bucket_website_get_bucket_website_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_get_object_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_get_object_input_if_match(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("If-Match").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_get_object_input_if_modified_since(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<aws_smithy_types::DateTime>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("If-Modified-Since").iter();
    let var_12: Vec<aws_smithy_types::DateTime> = aws_smithy_http::header::many_dates(
        headers,
        aws_smithy_types::date_time::Format::HttpDate,
    )?;
    if var_12.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_12.len()),
        ))
    } else {
        let mut var_12 = var_12;
        Ok(var_12.pop())
    }
}

pub fn deser_header_get_object_get_object_input_if_none_match(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("If-None-Match").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_get_object_input_if_unmodified_since(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<aws_smithy_types::DateTime>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("If-Unmodified-Since").iter();
    let var_13: Vec<aws_smithy_types::DateTime> = aws_smithy_http::header::many_dates(
        headers,
        aws_smithy_types::date_time::Format::HttpDate,
    )?;
    if var_13.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_13.len()),
        ))
    } else {
        let mut var_13 = var_13;
        Ok(var_13.pop())
    }
}

pub fn deser_header_get_object_get_object_input_range(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Range").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_get_object_input_request_payer(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestPayer>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-payer").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_get_object_input_sse_customer_algorithm(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-algorithm")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_get_object_input_sse_customer_key(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-key")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_get_object_input_sse_customer_key_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-key-MD5")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_acl_get_object_acl_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_acl_get_object_acl_input_request_payer(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestPayer>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-payer").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_legal_hold_get_object_legal_hold_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_legal_hold_get_object_legal_hold_input_request_payer(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestPayer>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-payer").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_lock_configuration_get_object_lock_configuration_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_retention_get_object_retention_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_retention_get_object_retention_input_request_payer(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestPayer>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-payer").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_tagging_get_object_tagging_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_tagging_get_object_tagging_input_request_payer(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestPayer>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-payer").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_torrent_get_object_torrent_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_object_torrent_get_object_torrent_input_request_payer(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestPayer>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-payer").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_public_access_block_get_public_access_block_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_head_bucket_head_bucket_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_head_object_head_object_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_head_object_head_object_input_if_match(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("If-Match").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_head_object_head_object_input_if_modified_since(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<aws_smithy_types::DateTime>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("If-Modified-Since").iter();
    let var_14: Vec<aws_smithy_types::DateTime> = aws_smithy_http::header::many_dates(
        headers,
        aws_smithy_types::date_time::Format::HttpDate,
    )?;
    if var_14.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_14.len()),
        ))
    } else {
        let mut var_14 = var_14;
        Ok(var_14.pop())
    }
}

pub fn deser_header_head_object_head_object_input_if_none_match(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("If-None-Match").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_head_object_head_object_input_if_unmodified_since(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<aws_smithy_types::DateTime>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("If-Unmodified-Since").iter();
    let var_15: Vec<aws_smithy_types::DateTime> = aws_smithy_http::header::many_dates(
        headers,
        aws_smithy_types::date_time::Format::HttpDate,
    )?;
    if var_15.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_15.len()),
        ))
    } else {
        let mut var_15 = var_15;
        Ok(var_15.pop())
    }
}

pub fn deser_header_head_object_head_object_input_range(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Range").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_head_object_head_object_input_request_payer(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestPayer>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-payer").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_head_object_head_object_input_sse_customer_algorithm(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-algorithm")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_head_object_head_object_input_sse_customer_key(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-key")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_head_object_head_object_input_sse_customer_key_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-key-MD5")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_list_bucket_analytics_configurations_list_bucket_analytics_configurations_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_list_bucket_inventory_configurations_list_bucket_inventory_configurations_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_list_bucket_metrics_configurations_list_bucket_metrics_configurations_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_list_multipart_uploads_list_multipart_uploads_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_list_objects_list_objects_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_list_objects_list_objects_input_request_payer(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestPayer>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-payer").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_list_objects_v2_list_objects_v2_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_list_objects_v2_list_objects_v2_input_request_payer(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestPayer>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-payer").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_list_object_versions_list_object_versions_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_list_parts_list_parts_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_list_parts_list_parts_input_request_payer(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestPayer>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-payer").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_accelerate_configuration_put_bucket_accelerate_configuration_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_acl_put_bucket_acl_input_acl(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::BucketCannedAcl>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-acl").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_acl_put_bucket_acl_input_content_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-MD5").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_acl_put_bucket_acl_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_acl_put_bucket_acl_input_grant_full_control(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-grant-full-control").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_acl_put_bucket_acl_input_grant_read(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-grant-read").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_acl_put_bucket_acl_input_grant_read_acp(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-grant-read-acp").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_acl_put_bucket_acl_input_grant_write(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-grant-write").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_acl_put_bucket_acl_input_grant_write_acp(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-grant-write-acp").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_analytics_configuration_put_bucket_analytics_configuration_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_cors_put_bucket_cors_input_content_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-MD5").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_cors_put_bucket_cors_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_encryption_put_bucket_encryption_input_content_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-MD5").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_encryption_put_bucket_encryption_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_inventory_configuration_put_bucket_inventory_configuration_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_lifecycle_configuration_put_bucket_lifecycle_configuration_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_logging_put_bucket_logging_input_content_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-MD5").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_logging_put_bucket_logging_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_metrics_configuration_put_bucket_metrics_configuration_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_notification_configuration_put_bucket_notification_configuration_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_notification_configuration_put_bucket_notification_configuration_input_skip_destination_validation(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<bool>, aws_smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-skip-destination-validation")
        .iter();
    let var_16 = aws_smithy_http::header::read_many_primitive::<bool>(headers)?;
    if var_16.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_16.len()),
        ))
    } else {
        let mut var_16 = var_16;
        Ok(var_16.pop())
    }
}

pub fn deser_header_put_bucket_ownership_controls_put_bucket_ownership_controls_input_content_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-MD5").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_ownership_controls_put_bucket_ownership_controls_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_policy_put_bucket_policy_input_confirm_remove_self_bucket_access(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<bool>, aws_smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-confirm-remove-self-bucket-access")
        .iter();
    let var_17 = aws_smithy_http::header::read_many_primitive::<bool>(headers)?;
    if var_17.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_17.len()),
        ))
    } else {
        let mut var_17 = var_17;
        Ok(var_17.pop())
    }
}

pub fn deser_header_put_bucket_policy_put_bucket_policy_input_content_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-MD5").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_policy_put_bucket_policy_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_replication_put_bucket_replication_input_content_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-MD5").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_replication_put_bucket_replication_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_replication_put_bucket_replication_input_token(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-bucket-object-lock-token").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_request_payment_put_bucket_request_payment_input_content_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-MD5").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_request_payment_put_bucket_request_payment_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_tagging_put_bucket_tagging_input_content_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-MD5").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_tagging_put_bucket_tagging_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_versioning_put_bucket_versioning_input_content_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-MD5").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_versioning_put_bucket_versioning_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_versioning_put_bucket_versioning_input_mfa(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-mfa").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_website_put_bucket_website_input_content_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-MD5").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_bucket_website_put_bucket_website_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_put_object_input_acl(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ObjectCannedAcl>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-acl").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_put_object_input_bucket_key_enabled(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<bool>, aws_smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-bucket-key-enabled")
        .iter();
    let var_18 = aws_smithy_http::header::read_many_primitive::<bool>(headers)?;
    if var_18.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_18.len()),
        ))
    } else {
        let mut var_18 = var_18;
        Ok(var_18.pop())
    }
}

pub fn deser_header_put_object_put_object_input_cache_control(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Cache-Control").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_put_object_input_content_disposition(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-Disposition").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_put_object_input_content_encoding(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-Encoding").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_put_object_input_content_language(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-Language").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_put_object_input_content_length(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i64>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("Content-Length").iter();
    let var_19 = aws_smithy_http::header::read_many_primitive::<i64>(headers)?;
    if var_19.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_19.len()),
        ))
    } else {
        let mut var_19 = var_19;
        Ok(var_19.pop())
    }
}

pub fn deser_header_put_object_put_object_input_content_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-MD5").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_put_object_input_content_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-Type").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_put_object_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_put_object_input_expires(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<aws_smithy_types::DateTime>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Expires").iter();
    let var_20: Vec<aws_smithy_types::DateTime> = aws_smithy_http::header::many_dates(
        headers,
        aws_smithy_types::date_time::Format::HttpDate,
    )?;
    if var_20.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_20.len()),
        ))
    } else {
        let mut var_20 = var_20;
        Ok(var_20.pop())
    }
}

pub fn deser_header_put_object_put_object_input_grant_full_control(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-grant-full-control").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_put_object_input_grant_read(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-grant-read").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_put_object_input_grant_read_acp(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-grant-read-acp").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_put_object_input_grant_write_acp(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-grant-write-acp").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_put_object_input_object_lock_legal_hold_status(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ObjectLockLegalHoldStatus>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-object-lock-legal-hold").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_put_object_input_object_lock_mode(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ObjectLockMode>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-object-lock-mode").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_put_object_input_object_lock_retain_until_date(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<aws_smithy_types::DateTime>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-object-lock-retain-until-date")
        .iter();
    let var_21: Vec<aws_smithy_types::DateTime> = aws_smithy_http::header::many_dates(
        headers,
        aws_smithy_types::date_time::Format::DateTime,
    )?;
    if var_21.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_21.len()),
        ))
    } else {
        let mut var_21 = var_21;
        Ok(var_21.pop())
    }
}

pub fn deser_header_put_object_put_object_input_request_payer(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestPayer>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-payer").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_put_object_input_sse_customer_algorithm(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-algorithm")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_put_object_input_sse_customer_key(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-key")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_put_object_input_sse_customer_key_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-key-MD5")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_put_object_input_ssekms_encryption_context(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-context")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_put_object_input_ssekms_key_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-aws-kms-key-id")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_put_object_input_server_side_encryption(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ServerSideEncryption>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-server-side-encryption").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_put_object_input_storage_class(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::StorageClass>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-storage-class").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_put_object_input_tagging(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-tagging").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_put_object_input_website_redirect_location(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-website-redirect-location").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_acl_put_object_acl_input_acl(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ObjectCannedAcl>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-acl").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_acl_put_object_acl_input_content_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-MD5").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_acl_put_object_acl_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_acl_put_object_acl_input_grant_full_control(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-grant-full-control").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_acl_put_object_acl_input_grant_read(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-grant-read").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_acl_put_object_acl_input_grant_read_acp(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-grant-read-acp").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_acl_put_object_acl_input_grant_write(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-grant-write").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_acl_put_object_acl_input_grant_write_acp(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-grant-write-acp").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_acl_put_object_acl_input_request_payer(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestPayer>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-payer").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_legal_hold_put_object_legal_hold_input_content_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-MD5").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_legal_hold_put_object_legal_hold_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_legal_hold_put_object_legal_hold_input_request_payer(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestPayer>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-payer").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_lock_configuration_put_object_lock_configuration_input_content_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-MD5").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_lock_configuration_put_object_lock_configuration_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_lock_configuration_put_object_lock_configuration_input_request_payer(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestPayer>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-payer").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_lock_configuration_put_object_lock_configuration_input_token(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-bucket-object-lock-token").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_retention_put_object_retention_input_bypass_governance_retention(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<bool>, aws_smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-bypass-governance-retention")
        .iter();
    let var_22 = aws_smithy_http::header::read_many_primitive::<bool>(headers)?;
    if var_22.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_22.len()),
        ))
    } else {
        let mut var_22 = var_22;
        Ok(var_22.pop())
    }
}

pub fn deser_header_put_object_retention_put_object_retention_input_content_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-MD5").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_retention_put_object_retention_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_retention_put_object_retention_input_request_payer(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestPayer>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-payer").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_tagging_put_object_tagging_input_content_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-MD5").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_tagging_put_object_tagging_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_object_tagging_put_object_tagging_input_request_payer(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestPayer>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-payer").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_public_access_block_put_public_access_block_input_content_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-MD5").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_public_access_block_put_public_access_block_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_restore_object_restore_object_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_restore_object_restore_object_input_request_payer(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestPayer>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-payer").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_upload_part_input_content_length(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i64>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("Content-Length").iter();
    let var_23 = aws_smithy_http::header::read_many_primitive::<i64>(headers)?;
    if var_23.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_23.len()),
        ))
    } else {
        let mut var_23 = var_23;
        Ok(var_23.pop())
    }
}

pub fn deser_header_upload_part_upload_part_input_content_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-MD5").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_upload_part_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_upload_part_input_request_payer(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestPayer>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-payer").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_upload_part_input_sse_customer_algorithm(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-algorithm")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_upload_part_input_sse_customer_key(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-key")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_upload_part_input_sse_customer_key_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-key-MD5")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_copy_upload_part_copy_input_copy_source(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-copy-source").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_copy_upload_part_copy_input_copy_source_if_match(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-copy-source-if-match").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_copy_upload_part_copy_input_copy_source_if_modified_since(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<aws_smithy_types::DateTime>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-copy-source-if-modified-since")
        .iter();
    let var_24: Vec<aws_smithy_types::DateTime> = aws_smithy_http::header::many_dates(
        headers,
        aws_smithy_types::date_time::Format::HttpDate,
    )?;
    if var_24.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_24.len()),
        ))
    } else {
        let mut var_24 = var_24;
        Ok(var_24.pop())
    }
}

pub fn deser_header_upload_part_copy_upload_part_copy_input_copy_source_if_none_match(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-copy-source-if-none-match").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_copy_upload_part_copy_input_copy_source_if_unmodified_since(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<aws_smithy_types::DateTime>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-copy-source-if-unmodified-since")
        .iter();
    let var_25: Vec<aws_smithy_types::DateTime> = aws_smithy_http::header::many_dates(
        headers,
        aws_smithy_types::date_time::Format::HttpDate,
    )?;
    if var_25.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_25.len()),
        ))
    } else {
        let mut var_25 = var_25;
        Ok(var_25.pop())
    }
}

pub fn deser_header_upload_part_copy_upload_part_copy_input_copy_source_range(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-copy-source-range").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_copy_upload_part_copy_input_copy_source_sse_customer_algorithm(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-copy-source-server-side-encryption-customer-algorithm")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_copy_upload_part_copy_input_copy_source_sse_customer_key(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-copy-source-server-side-encryption-customer-key")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_copy_upload_part_copy_input_copy_source_sse_customer_key_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-copy-source-server-side-encryption-customer-key-MD5")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_copy_upload_part_copy_input_expected_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-expected-bucket-owner").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_copy_upload_part_copy_input_expected_source_bucket_owner(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-source-expected-bucket-owner")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_copy_upload_part_copy_input_request_payer(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestPayer>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-payer").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_copy_upload_part_copy_input_sse_customer_algorithm(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-algorithm")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_copy_upload_part_copy_input_sse_customer_key(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-key")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_part_copy_upload_part_copy_input_sse_customer_key_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-server-side-encryption-customer-key-MD5")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_accept_ranges(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-fwd-header-accept-ranges").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_bucket_key_enabled(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<bool>, aws_smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled")
        .iter();
    let var_26 = aws_smithy_http::header::read_many_primitive::<bool>(headers)?;
    if var_26.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_26.len()),
        ))
    } else {
        let mut var_26 = var_26;
        Ok(var_26.pop())
    }
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_cache_control(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-fwd-header-Cache-Control").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_content_disposition(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-fwd-header-Content-Disposition")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_content_encoding(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-fwd-header-Content-Encoding")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_content_language(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-fwd-header-Content-Language")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_content_length(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i64>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("Content-Length").iter();
    let var_27 = aws_smithy_http::header::read_many_primitive::<i64>(headers)?;
    if var_27.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_27.len()),
        ))
    } else {
        let mut var_27 = var_27;
        Ok(var_27.pop())
    }
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_content_range(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-fwd-header-Content-Range").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_content_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-fwd-header-Content-Type").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_delete_marker(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<bool>, aws_smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-fwd-header-x-amz-delete-marker")
        .iter();
    let var_28 = aws_smithy_http::header::read_many_primitive::<bool>(headers)?;
    if var_28.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_28.len()),
        ))
    } else {
        let mut var_28 = var_28;
        Ok(var_28.pop())
    }
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-fwd-header-ETag").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_error_code(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-fwd-error-code").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_error_message(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-fwd-error-message").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_expiration(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-fwd-header-x-amz-expiration")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_expires(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<aws_smithy_types::DateTime>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-fwd-header-Expires").iter();
    let var_29: Vec<aws_smithy_types::DateTime> = aws_smithy_http::header::many_dates(
        headers,
        aws_smithy_types::date_time::Format::HttpDate,
    )?;
    if var_29.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_29.len()),
        ))
    } else {
        let mut var_29 = var_29;
        Ok(var_29.pop())
    }
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_last_modified(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<aws_smithy_types::DateTime>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-fwd-header-Last-Modified").iter();
    let var_30: Vec<aws_smithy_types::DateTime> = aws_smithy_http::header::many_dates(
        headers,
        aws_smithy_types::date_time::Format::HttpDate,
    )?;
    if var_30.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_30.len()),
        ))
    } else {
        let mut var_30 = var_30;
        Ok(var_30.pop())
    }
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_missing_meta(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, aws_smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-fwd-header-x-amz-missing-meta")
        .iter();
    let var_31 = aws_smithy_http::header::read_many_primitive::<i32>(headers)?;
    if var_31.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_31.len()),
        ))
    } else {
        let mut var_31 = var_31;
        Ok(var_31.pop())
    }
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_object_lock_legal_hold_status(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ObjectLockLegalHoldStatus>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-fwd-header-x-amz-object-lock-legal-hold")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_object_lock_mode(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ObjectLockMode>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-fwd-header-x-amz-object-lock-mode")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_object_lock_retain_until_date(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<aws_smithy_types::DateTime>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-fwd-header-x-amz-object-lock-retain-until-date")
        .iter();
    let var_32: Vec<aws_smithy_types::DateTime> = aws_smithy_http::header::many_dates(
        headers,
        aws_smithy_types::date_time::Format::DateTime,
    )?;
    if var_32.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_32.len()),
        ))
    } else {
        let mut var_32 = var_32;
        Ok(var_32.pop())
    }
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_parts_count(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, aws_smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-fwd-header-x-amz-mp-parts-count")
        .iter();
    let var_33 = aws_smithy_http::header::read_many_primitive::<i32>(headers)?;
    if var_33.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_33.len()),
        ))
    } else {
        let mut var_33 = var_33;
        Ok(var_33.pop())
    }
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_replication_status(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ReplicationStatus>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-fwd-header-x-amz-replication-status")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_request_charged(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::RequestCharged>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-fwd-header-x-amz-request-charged")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_request_route(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-route").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_request_token(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-request-token").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_restore(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-fwd-header-x-amz-restore").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_sse_customer_algorithm(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_sse_customer_key_md5(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-fwd-header-x-amz-server-side-encryption-customer-key-MD5")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_ssekms_key_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_server_side_encryption(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ServerSideEncryption>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-fwd-header-x-amz-server-side-encryption")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_status_code(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-fwd-status").iter();
    let var_34 = aws_smithy_http::header::read_many_primitive::<i32>(headers)?;
    if var_34.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_34.len()),
        ))
    } else {
        let mut var_34 = var_34;
        Ok(var_34.pop())
    }
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_storage_class(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::StorageClass>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-fwd-header-x-amz-storage-class")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_tag_count(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, aws_smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amz-fwd-header-x-amz-tagging-count")
        .iter();
    let var_35 = aws_smithy_http::header::read_many_primitive::<i32>(headers)?;
    if var_35.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_35.len()),
        ))
    } else {
        let mut var_35 = var_35;
        Ok(var_35.pop())
    }
}

pub fn deser_header_write_get_object_response_write_get_object_response_input_version_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-fwd-header-x-amz-version-id")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}
