// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn deser_member_com_amazonaws_s3_synthetic_complete_multipart_upload_input_multipart_upload(
    inp: &[u8],
) -> Result<crate::model::CompletedMultipartUpload, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CompleteMultipartUpload")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CompleteMultipartUpload got {:?}",
            start_el
        )));
    }
    crate::xml_deser::deser_structure_crate_model_completed_multipart_upload(&mut decoder)
}

pub fn deser_member_com_amazonaws_s3_synthetic_create_bucket_input_create_bucket_configuration(
    inp: &[u8],
) -> Result<crate::model::CreateBucketConfiguration, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateBucketConfiguration")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateBucketConfiguration got {:?}",
            start_el
        )));
    }
    crate::xml_deser::deser_structure_crate_model_create_bucket_configuration(&mut decoder)
}

pub fn deser_member_com_amazonaws_s3_synthetic_delete_objects_input_delete(
    inp: &[u8],
) -> Result<crate::model::Delete, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("Delete")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected Delete got {:?}",
            start_el
        )));
    }
    crate::xml_deser::deser_structure_crate_model_delete(&mut decoder)
}

pub fn deser_member_com_amazonaws_s3_synthetic_put_bucket_accelerate_configuration_input_accelerate_configuration(
    inp: &[u8],
) -> Result<crate::model::AccelerateConfiguration, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AccelerateConfiguration")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AccelerateConfiguration got {:?}",
            start_el
        )));
    }
    crate::xml_deser::deser_structure_crate_model_accelerate_configuration(&mut decoder)
}

pub fn deser_member_com_amazonaws_s3_synthetic_put_bucket_acl_input_access_control_policy(
    inp: &[u8],
) -> Result<crate::model::AccessControlPolicy, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AccessControlPolicy")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AccessControlPolicy got {:?}",
            start_el
        )));
    }
    crate::xml_deser::deser_structure_crate_model_access_control_policy(&mut decoder)
}

pub fn deser_member_com_amazonaws_s3_synthetic_put_bucket_analytics_configuration_input_analytics_configuration(
    inp: &[u8],
) -> Result<crate::model::AnalyticsConfiguration, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AnalyticsConfiguration")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AnalyticsConfiguration got {:?}",
            start_el
        )));
    }
    crate::xml_deser::deser_structure_crate_model_analytics_configuration(&mut decoder)
}

pub fn deser_member_com_amazonaws_s3_synthetic_put_bucket_cors_input_cors_configuration(
    inp: &[u8],
) -> Result<crate::model::CorsConfiguration, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CORSConfiguration")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CORSConfiguration got {:?}",
            start_el
        )));
    }
    crate::xml_deser::deser_structure_crate_model_cors_configuration(&mut decoder)
}

pub fn deser_member_com_amazonaws_s3_synthetic_put_bucket_encryption_input_server_side_encryption_configuration(
    inp: &[u8],
) -> Result<crate::model::ServerSideEncryptionConfiguration, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ServerSideEncryptionConfiguration")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ServerSideEncryptionConfiguration got {:?}",
            start_el
        )));
    }
    crate::xml_deser::deser_structure_crate_model_server_side_encryption_configuration(&mut decoder)
}

pub fn deser_member_com_amazonaws_s3_synthetic_put_bucket_intelligent_tiering_configuration_input_intelligent_tiering_configuration(
    inp: &[u8],
) -> Result<crate::model::IntelligentTieringConfiguration, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("IntelligentTieringConfiguration")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected IntelligentTieringConfiguration got {:?}",
            start_el
        )));
    }
    crate::xml_deser::deser_structure_crate_model_intelligent_tiering_configuration(&mut decoder)
}

pub fn deser_member_com_amazonaws_s3_synthetic_put_bucket_inventory_configuration_input_inventory_configuration(
    inp: &[u8],
) -> Result<crate::model::InventoryConfiguration, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("InventoryConfiguration")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected InventoryConfiguration got {:?}",
            start_el
        )));
    }
    crate::xml_deser::deser_structure_crate_model_inventory_configuration(&mut decoder)
}

pub fn deser_member_com_amazonaws_s3_synthetic_put_bucket_lifecycle_configuration_input_lifecycle_configuration(
    inp: &[u8],
) -> Result<crate::model::BucketLifecycleConfiguration, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("LifecycleConfiguration")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected LifecycleConfiguration got {:?}",
            start_el
        )));
    }
    crate::xml_deser::deser_structure_crate_model_bucket_lifecycle_configuration(&mut decoder)
}

pub fn deser_member_com_amazonaws_s3_synthetic_put_bucket_logging_input_bucket_logging_status(
    inp: &[u8],
) -> Result<crate::model::BucketLoggingStatus, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("BucketLoggingStatus")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected BucketLoggingStatus got {:?}",
            start_el
        )));
    }
    crate::xml_deser::deser_structure_crate_model_bucket_logging_status(&mut decoder)
}

pub fn deser_member_com_amazonaws_s3_synthetic_put_bucket_metrics_configuration_input_metrics_configuration(
    inp: &[u8],
) -> Result<crate::model::MetricsConfiguration, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("MetricsConfiguration")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected MetricsConfiguration got {:?}",
            start_el
        )));
    }
    crate::xml_deser::deser_structure_crate_model_metrics_configuration(&mut decoder)
}

pub fn deser_member_com_amazonaws_s3_synthetic_put_bucket_notification_configuration_input_notification_configuration(
    inp: &[u8],
) -> Result<crate::model::NotificationConfiguration, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("NotificationConfiguration")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected NotificationConfiguration got {:?}",
            start_el
        )));
    }
    crate::xml_deser::deser_structure_crate_model_notification_configuration(&mut decoder)
}

pub fn deser_member_com_amazonaws_s3_synthetic_put_bucket_ownership_controls_input_ownership_controls(
    inp: &[u8],
) -> Result<crate::model::OwnershipControls, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("OwnershipControls")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected OwnershipControls got {:?}",
            start_el
        )));
    }
    crate::xml_deser::deser_structure_crate_model_ownership_controls(&mut decoder)
}

pub fn deser_member_com_amazonaws_s3_synthetic_put_bucket_replication_input_replication_configuration(
    inp: &[u8],
) -> Result<crate::model::ReplicationConfiguration, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ReplicationConfiguration")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ReplicationConfiguration got {:?}",
            start_el
        )));
    }
    crate::xml_deser::deser_structure_crate_model_replication_configuration(&mut decoder)
}

pub fn deser_member_com_amazonaws_s3_synthetic_put_bucket_request_payment_input_request_payment_configuration(
    inp: &[u8],
) -> Result<crate::model::RequestPaymentConfiguration, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("RequestPaymentConfiguration")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected RequestPaymentConfiguration got {:?}",
            start_el
        )));
    }
    crate::xml_deser::deser_structure_crate_model_request_payment_configuration(&mut decoder)
}

pub fn deser_member_com_amazonaws_s3_synthetic_put_bucket_tagging_input_tagging(
    inp: &[u8],
) -> Result<crate::model::Tagging, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("Tagging")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected Tagging got {:?}",
            start_el
        )));
    }
    crate::xml_deser::deser_structure_crate_model_tagging(&mut decoder)
}

pub fn deser_member_com_amazonaws_s3_synthetic_put_bucket_versioning_input_versioning_configuration(
    inp: &[u8],
) -> Result<crate::model::VersioningConfiguration, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("VersioningConfiguration")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected VersioningConfiguration got {:?}",
            start_el
        )));
    }
    crate::xml_deser::deser_structure_crate_model_versioning_configuration(&mut decoder)
}

pub fn deser_member_com_amazonaws_s3_synthetic_put_bucket_website_input_website_configuration(
    inp: &[u8],
) -> Result<crate::model::WebsiteConfiguration, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("WebsiteConfiguration")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected WebsiteConfiguration got {:?}",
            start_el
        )));
    }
    crate::xml_deser::deser_structure_crate_model_website_configuration(&mut decoder)
}

pub fn deser_member_com_amazonaws_s3_synthetic_put_object_acl_input_access_control_policy(
    inp: &[u8],
) -> Result<crate::model::AccessControlPolicy, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AccessControlPolicy")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AccessControlPolicy got {:?}",
            start_el
        )));
    }
    crate::xml_deser::deser_structure_crate_model_access_control_policy(&mut decoder)
}

pub fn deser_member_com_amazonaws_s3_synthetic_put_object_legal_hold_input_legal_hold(
    inp: &[u8],
) -> Result<crate::model::ObjectLockLegalHold, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("LegalHold")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected LegalHold got {:?}",
            start_el
        )));
    }
    crate::xml_deser::deser_structure_crate_model_object_lock_legal_hold(&mut decoder)
}

pub fn deser_member_com_amazonaws_s3_synthetic_put_object_lock_configuration_input_object_lock_configuration(
    inp: &[u8],
) -> Result<crate::model::ObjectLockConfiguration, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ObjectLockConfiguration")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ObjectLockConfiguration got {:?}",
            start_el
        )));
    }
    crate::xml_deser::deser_structure_crate_model_object_lock_configuration(&mut decoder)
}

pub fn deser_member_com_amazonaws_s3_synthetic_put_object_retention_input_retention(
    inp: &[u8],
) -> Result<crate::model::ObjectLockRetention, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("Retention")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected Retention got {:?}",
            start_el
        )));
    }
    crate::xml_deser::deser_structure_crate_model_object_lock_retention(&mut decoder)
}

pub fn deser_member_com_amazonaws_s3_synthetic_put_object_tagging_input_tagging(
    inp: &[u8],
) -> Result<crate::model::Tagging, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("Tagging")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected Tagging got {:?}",
            start_el
        )));
    }
    crate::xml_deser::deser_structure_crate_model_tagging(&mut decoder)
}

pub fn deser_member_com_amazonaws_s3_synthetic_put_public_access_block_input_public_access_block_configuration(
    inp: &[u8],
) -> Result<crate::model::PublicAccessBlockConfiguration, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("PublicAccessBlockConfiguration")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected PublicAccessBlockConfiguration got {:?}",
            start_el
        )));
    }
    crate::xml_deser::deser_structure_crate_model_public_access_block_configuration(&mut decoder)
}

pub fn deser_member_com_amazonaws_s3_synthetic_restore_object_input_restore_request(
    inp: &[u8],
) -> Result<crate::model::RestoreRequest, aws_smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("RestoreRequest")) {
        return Err(aws_smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected RestoreRequest got {:?}",
            start_el
        )));
    }
    crate::xml_deser::deser_structure_crate_model_restore_request(&mut decoder)
}

pub fn deser_structure_crate_model_completed_multipart_upload(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CompletedMultipartUpload, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::CompletedMultipartUpload::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Part") /* Parts com.amazonaws.s3#CompletedMultipartUpload$Parts */ =>  {
                let var_1 =
                    Some(
                        Result::<std::vec::Vec<crate::model::CompletedPart>, aws_smithy_xml::decode::XmlError>::Ok({
                            let mut list_2 = builder.parts.take().unwrap_or_default();
                            list_2.push(
                                crate::xml_deser::deser_structure_crate_model_completed_part(&mut tag)
                                ?
                            );
                            list_2
                        })
                        ?
                    )
                ;
                builder = builder.set_parts(var_1);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_create_bucket_configuration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CreateBucketConfiguration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::CreateBucketConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("LocationConstraint") /* LocationConstraint com.amazonaws.s3#CreateBucketConfiguration$LocationConstraint */ =>  {
                let var_3 =
                    Some(
                        Result::<crate::model::BucketLocationConstraint, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::BucketLocationConstraint::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_location_constraint(var_3);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_delete(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Delete, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Delete::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Object") /* Objects com.amazonaws.s3#Delete$Objects */ =>  {
                let var_4 =
                    Some(
                        Result::<std::vec::Vec<crate::model::ObjectIdentifier>, aws_smithy_xml::decode::XmlError>::Ok({
                            let mut list_5 = builder.objects.take().unwrap_or_default();
                            list_5.push(
                                crate::xml_deser::deser_structure_crate_model_object_identifier(&mut tag)
                                ?
                            );
                            list_5
                        })
                        ?
                    )
                ;
                builder = builder.set_objects(var_4);
            }
            ,
            s if s.matches("Quiet") /* Quiet com.amazonaws.s3#Delete$Quiet */ =>  {
                let var_6 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.s3#Quiet`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_quiet(var_6);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_accelerate_configuration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AccelerateConfiguration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AccelerateConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Status") /* Status com.amazonaws.s3#AccelerateConfiguration$Status */ =>  {
                let var_7 =
                    Some(
                        Result::<crate::model::BucketAccelerateStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::BucketAccelerateStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_7);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_access_control_policy(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AccessControlPolicy, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AccessControlPolicy::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("AccessControlList") /* Grants com.amazonaws.s3#AccessControlPolicy$Grants */ =>  {
                let var_8 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_s3_grants(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_grants(var_8);
            }
            ,
            s if s.matches("Owner") /* Owner com.amazonaws.s3#AccessControlPolicy$Owner */ =>  {
                let var_9 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_owner(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_owner(var_9);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_analytics_configuration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AnalyticsConfiguration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AnalyticsConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Id") /* Id com.amazonaws.s3#AnalyticsConfiguration$Id */ =>  {
                let var_10 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_10);
            }
            ,
            s if s.matches("Filter") /* Filter com.amazonaws.s3#AnalyticsConfiguration$Filter */ =>  {
                let var_11 =
                    Some(
                        crate::xml_deser::deser_union_crate_model_analytics_filter(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_filter(var_11);
            }
            ,
            s if s.matches("StorageClassAnalysis") /* StorageClassAnalysis com.amazonaws.s3#AnalyticsConfiguration$StorageClassAnalysis */ =>  {
                let var_12 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_storage_class_analysis(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_storage_class_analysis(var_12);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_cors_configuration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CorsConfiguration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::CorsConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("CORSRule") /* CORSRules com.amazonaws.s3#CORSConfiguration$CORSRules */ =>  {
                let var_13 =
                    Some(
                        Result::<std::vec::Vec<crate::model::CorsRule>, aws_smithy_xml::decode::XmlError>::Ok({
                            let mut list_14 = builder.cors_rules.take().unwrap_or_default();
                            list_14.push(
                                crate::xml_deser::deser_structure_crate_model_cors_rule(&mut tag)
                                ?
                            );
                            list_14
                        })
                        ?
                    )
                ;
                builder = builder.set_cors_rules(var_13);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_server_side_encryption_configuration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ServerSideEncryptionConfiguration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ServerSideEncryptionConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Rule") /* Rules com.amazonaws.s3#ServerSideEncryptionConfiguration$Rules */ =>  {
                let var_15 =
                    Some(
                        Result::<std::vec::Vec<crate::model::ServerSideEncryptionRule>, aws_smithy_xml::decode::XmlError>::Ok({
                            let mut list_16 = builder.rules.take().unwrap_or_default();
                            list_16.push(
                                crate::xml_deser::deser_structure_crate_model_server_side_encryption_rule(&mut tag)
                                ?
                            );
                            list_16
                        })
                        ?
                    )
                ;
                builder = builder.set_rules(var_15);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_intelligent_tiering_configuration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::IntelligentTieringConfiguration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::IntelligentTieringConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Id") /* Id com.amazonaws.s3#IntelligentTieringConfiguration$Id */ =>  {
                let var_17 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_17);
            }
            ,
            s if s.matches("Filter") /* Filter com.amazonaws.s3#IntelligentTieringConfiguration$Filter */ =>  {
                let var_18 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_intelligent_tiering_filter(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_filter(var_18);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.s3#IntelligentTieringConfiguration$Status */ =>  {
                let var_19 =
                    Some(
                        Result::<crate::model::IntelligentTieringStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::IntelligentTieringStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_19);
            }
            ,
            s if s.matches("Tiering") /* Tierings com.amazonaws.s3#IntelligentTieringConfiguration$Tierings */ =>  {
                let var_20 =
                    Some(
                        Result::<std::vec::Vec<crate::model::Tiering>, aws_smithy_xml::decode::XmlError>::Ok({
                            let mut list_21 = builder.tierings.take().unwrap_or_default();
                            list_21.push(
                                crate::xml_deser::deser_structure_crate_model_tiering(&mut tag)
                                ?
                            );
                            list_21
                        })
                        ?
                    )
                ;
                builder = builder.set_tierings(var_20);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_inventory_configuration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InventoryConfiguration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InventoryConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Destination") /* Destination com.amazonaws.s3#InventoryConfiguration$Destination */ =>  {
                let var_22 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_inventory_destination(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_destination(var_22);
            }
            ,
            s if s.matches("IsEnabled") /* IsEnabled com.amazonaws.s3#InventoryConfiguration$IsEnabled */ =>  {
                let var_23 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.s3#IsEnabled`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_enabled(var_23);
            }
            ,
            s if s.matches("Filter") /* Filter com.amazonaws.s3#InventoryConfiguration$Filter */ =>  {
                let var_24 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_inventory_filter(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_filter(var_24);
            }
            ,
            s if s.matches("Id") /* Id com.amazonaws.s3#InventoryConfiguration$Id */ =>  {
                let var_25 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_25);
            }
            ,
            s if s.matches("IncludedObjectVersions") /* IncludedObjectVersions com.amazonaws.s3#InventoryConfiguration$IncludedObjectVersions */ =>  {
                let var_26 =
                    Some(
                        Result::<crate::model::InventoryIncludedObjectVersions, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InventoryIncludedObjectVersions::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_included_object_versions(var_26);
            }
            ,
            s if s.matches("OptionalFields") /* OptionalFields com.amazonaws.s3#InventoryConfiguration$OptionalFields */ =>  {
                let var_27 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_s3_inventory_optional_fields(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_optional_fields(var_27);
            }
            ,
            s if s.matches("Schedule") /* Schedule com.amazonaws.s3#InventoryConfiguration$Schedule */ =>  {
                let var_28 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_inventory_schedule(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_schedule(var_28);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_bucket_lifecycle_configuration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::BucketLifecycleConfiguration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::BucketLifecycleConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Rule") /* Rules com.amazonaws.s3#BucketLifecycleConfiguration$Rules */ =>  {
                let var_29 =
                    Some(
                        Result::<std::vec::Vec<crate::model::LifecycleRule>, aws_smithy_xml::decode::XmlError>::Ok({
                            let mut list_30 = builder.rules.take().unwrap_or_default();
                            list_30.push(
                                crate::xml_deser::deser_structure_crate_model_lifecycle_rule(&mut tag)
                                ?
                            );
                            list_30
                        })
                        ?
                    )
                ;
                builder = builder.set_rules(var_29);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_bucket_logging_status(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::BucketLoggingStatus, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::BucketLoggingStatus::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("LoggingEnabled") /* LoggingEnabled com.amazonaws.s3#BucketLoggingStatus$LoggingEnabled */ =>  {
                let var_31 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_logging_enabled(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_logging_enabled(var_31);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_metrics_configuration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::MetricsConfiguration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::MetricsConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Id") /* Id com.amazonaws.s3#MetricsConfiguration$Id */ =>  {
                let var_32 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_32);
            }
            ,
            s if s.matches("Filter") /* Filter com.amazonaws.s3#MetricsConfiguration$Filter */ =>  {
                let var_33 =
                    Some(
                        crate::xml_deser::deser_union_crate_model_metrics_filter(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_filter(var_33);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_notification_configuration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::NotificationConfiguration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::NotificationConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("TopicConfiguration") /* TopicConfigurations com.amazonaws.s3#NotificationConfiguration$TopicConfigurations */ =>  {
                let var_34 =
                    Some(
                        Result::<std::vec::Vec<crate::model::TopicConfiguration>, aws_smithy_xml::decode::XmlError>::Ok({
                            let mut list_35 = builder.topic_configurations.take().unwrap_or_default();
                            list_35.push(
                                crate::xml_deser::deser_structure_crate_model_topic_configuration(&mut tag)
                                ?
                            );
                            list_35
                        })
                        ?
                    )
                ;
                builder = builder.set_topic_configurations(var_34);
            }
            ,
            s if s.matches("QueueConfiguration") /* QueueConfigurations com.amazonaws.s3#NotificationConfiguration$QueueConfigurations */ =>  {
                let var_36 =
                    Some(
                        Result::<std::vec::Vec<crate::model::QueueConfiguration>, aws_smithy_xml::decode::XmlError>::Ok({
                            let mut list_37 = builder.queue_configurations.take().unwrap_or_default();
                            list_37.push(
                                crate::xml_deser::deser_structure_crate_model_queue_configuration(&mut tag)
                                ?
                            );
                            list_37
                        })
                        ?
                    )
                ;
                builder = builder.set_queue_configurations(var_36);
            }
            ,
            s if s.matches("CloudFunctionConfiguration") /* LambdaFunctionConfigurations com.amazonaws.s3#NotificationConfiguration$LambdaFunctionConfigurations */ =>  {
                let var_38 =
                    Some(
                        Result::<std::vec::Vec<crate::model::LambdaFunctionConfiguration>, aws_smithy_xml::decode::XmlError>::Ok({
                            let mut list_39 = builder.lambda_function_configurations.take().unwrap_or_default();
                            list_39.push(
                                crate::xml_deser::deser_structure_crate_model_lambda_function_configuration(&mut tag)
                                ?
                            );
                            list_39
                        })
                        ?
                    )
                ;
                builder = builder.set_lambda_function_configurations(var_38);
            }
            ,
            s if s.matches("EventBridgeConfiguration") /* EventBridgeConfiguration com.amazonaws.s3#NotificationConfiguration$EventBridgeConfiguration */ =>  {
                let var_40 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_event_bridge_configuration(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_event_bridge_configuration(var_40);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_ownership_controls(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::OwnershipControls, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::OwnershipControls::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Rule") /* Rules com.amazonaws.s3#OwnershipControls$Rules */ =>  {
                let var_41 =
                    Some(
                        Result::<std::vec::Vec<crate::model::OwnershipControlsRule>, aws_smithy_xml::decode::XmlError>::Ok({
                            let mut list_42 = builder.rules.take().unwrap_or_default();
                            list_42.push(
                                crate::xml_deser::deser_structure_crate_model_ownership_controls_rule(&mut tag)
                                ?
                            );
                            list_42
                        })
                        ?
                    )
                ;
                builder = builder.set_rules(var_41);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_replication_configuration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ReplicationConfiguration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ReplicationConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Role") /* Role com.amazonaws.s3#ReplicationConfiguration$Role */ =>  {
                let var_43 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_role(var_43);
            }
            ,
            s if s.matches("Rule") /* Rules com.amazonaws.s3#ReplicationConfiguration$Rules */ =>  {
                let var_44 =
                    Some(
                        Result::<std::vec::Vec<crate::model::ReplicationRule>, aws_smithy_xml::decode::XmlError>::Ok({
                            let mut list_45 = builder.rules.take().unwrap_or_default();
                            list_45.push(
                                crate::xml_deser::deser_structure_crate_model_replication_rule(&mut tag)
                                ?
                            );
                            list_45
                        })
                        ?
                    )
                ;
                builder = builder.set_rules(var_44);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_request_payment_configuration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::RequestPaymentConfiguration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::RequestPaymentConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Payer") /* Payer com.amazonaws.s3#RequestPaymentConfiguration$Payer */ =>  {
                let var_46 =
                    Some(
                        Result::<crate::model::Payer, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::Payer::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_payer(var_46);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_tagging(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Tagging, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Tagging::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("TagSet") /* TagSet com.amazonaws.s3#Tagging$TagSet */ =>  {
                let var_47 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_s3_tag_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tag_set(var_47);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_versioning_configuration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::VersioningConfiguration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::VersioningConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("MfaDelete") /* MFADelete com.amazonaws.s3#VersioningConfiguration$MFADelete */ =>  {
                let var_48 =
                    Some(
                        Result::<crate::model::MfaDelete, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::MfaDelete::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_mfa_delete(var_48);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.s3#VersioningConfiguration$Status */ =>  {
                let var_49 =
                    Some(
                        Result::<crate::model::BucketVersioningStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::BucketVersioningStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_49);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_website_configuration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::WebsiteConfiguration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::WebsiteConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ErrorDocument") /* ErrorDocument com.amazonaws.s3#WebsiteConfiguration$ErrorDocument */ =>  {
                let var_50 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_error_document(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_error_document(var_50);
            }
            ,
            s if s.matches("IndexDocument") /* IndexDocument com.amazonaws.s3#WebsiteConfiguration$IndexDocument */ =>  {
                let var_51 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_index_document(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_index_document(var_51);
            }
            ,
            s if s.matches("RedirectAllRequestsTo") /* RedirectAllRequestsTo com.amazonaws.s3#WebsiteConfiguration$RedirectAllRequestsTo */ =>  {
                let var_52 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_redirect_all_requests_to(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_redirect_all_requests_to(var_52);
            }
            ,
            s if s.matches("RoutingRules") /* RoutingRules com.amazonaws.s3#WebsiteConfiguration$RoutingRules */ =>  {
                let var_53 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_s3_routing_rules(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_routing_rules(var_53);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_object_lock_legal_hold(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ObjectLockLegalHold, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ObjectLockLegalHold::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Status") /* Status com.amazonaws.s3#ObjectLockLegalHold$Status */ =>  {
                let var_54 =
                    Some(
                        Result::<crate::model::ObjectLockLegalHoldStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ObjectLockLegalHoldStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_54);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_object_lock_configuration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ObjectLockConfiguration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ObjectLockConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ObjectLockEnabled") /* ObjectLockEnabled com.amazonaws.s3#ObjectLockConfiguration$ObjectLockEnabled */ =>  {
                let var_55 =
                    Some(
                        Result::<crate::model::ObjectLockEnabled, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ObjectLockEnabled::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_object_lock_enabled(var_55);
            }
            ,
            s if s.matches("Rule") /* Rule com.amazonaws.s3#ObjectLockConfiguration$Rule */ =>  {
                let var_56 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_object_lock_rule(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_rule(var_56);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_object_lock_retention(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ObjectLockRetention, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ObjectLockRetention::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Mode") /* Mode com.amazonaws.s3#ObjectLockRetention$Mode */ =>  {
                let var_57 =
                    Some(
                        Result::<crate::model::ObjectLockRetentionMode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ObjectLockRetentionMode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_mode(var_57);
            }
            ,
            s if s.matches("RetainUntilDate") /* RetainUntilDate com.amazonaws.s3#ObjectLockRetention$RetainUntilDate */ =>  {
                let var_58 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.s3#Date`)"))
                        ?
                    )
                ;
                builder = builder.set_retain_until_date(var_58);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_public_access_block_configuration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::PublicAccessBlockConfiguration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::PublicAccessBlockConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("BlockPublicAcls") /* BlockPublicAcls com.amazonaws.s3#PublicAccessBlockConfiguration$BlockPublicAcls */ =>  {
                let var_59 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.s3#Setting`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_block_public_acls(var_59);
            }
            ,
            s if s.matches("IgnorePublicAcls") /* IgnorePublicAcls com.amazonaws.s3#PublicAccessBlockConfiguration$IgnorePublicAcls */ =>  {
                let var_60 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.s3#Setting`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_ignore_public_acls(var_60);
            }
            ,
            s if s.matches("BlockPublicPolicy") /* BlockPublicPolicy com.amazonaws.s3#PublicAccessBlockConfiguration$BlockPublicPolicy */ =>  {
                let var_61 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.s3#Setting`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_block_public_policy(var_61);
            }
            ,
            s if s.matches("RestrictPublicBuckets") /* RestrictPublicBuckets com.amazonaws.s3#PublicAccessBlockConfiguration$RestrictPublicBuckets */ =>  {
                let var_62 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.s3#Setting`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_restrict_public_buckets(var_62);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_restore_request(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::RestoreRequest, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::RestoreRequest::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Days") /* Days com.amazonaws.s3#RestoreRequest$Days */ =>  {
                let var_63 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.s3#Days`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_days(var_63);
            }
            ,
            s if s.matches("GlacierJobParameters") /* GlacierJobParameters com.amazonaws.s3#RestoreRequest$GlacierJobParameters */ =>  {
                let var_64 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_glacier_job_parameters(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_glacier_job_parameters(var_64);
            }
            ,
            s if s.matches("Type") /* Type com.amazonaws.s3#RestoreRequest$Type */ =>  {
                let var_65 =
                    Some(
                        Result::<crate::model::RestoreRequestType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::RestoreRequestType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_65);
            }
            ,
            s if s.matches("Tier") /* Tier com.amazonaws.s3#RestoreRequest$Tier */ =>  {
                let var_66 =
                    Some(
                        Result::<crate::model::Tier, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::Tier::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_tier(var_66);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.s3#RestoreRequest$Description */ =>  {
                let var_67 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_67);
            }
            ,
            s if s.matches("SelectParameters") /* SelectParameters com.amazonaws.s3#RestoreRequest$SelectParameters */ =>  {
                let var_68 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_select_parameters(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_select_parameters(var_68);
            }
            ,
            s if s.matches("OutputLocation") /* OutputLocation com.amazonaws.s3#RestoreRequest$OutputLocation */ =>  {
                let var_69 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_output_location(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_output_location(var_69);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_completed_part(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CompletedPart, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::CompletedPart::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ETag") /* ETag com.amazonaws.s3#CompletedPart$ETag */ =>  {
                let var_70 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_e_tag(var_70);
            }
            ,
            s if s.matches("PartNumber") /* PartNumber com.amazonaws.s3#CompletedPart$PartNumber */ =>  {
                let var_71 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.s3#PartNumber`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_part_number(var_71);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_object_identifier(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ObjectIdentifier, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ObjectIdentifier::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Key") /* Key com.amazonaws.s3#ObjectIdentifier$Key */ =>  {
                let var_72 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key(var_72);
            }
            ,
            s if s.matches("VersionId") /* VersionId com.amazonaws.s3#ObjectIdentifier$VersionId */ =>  {
                let var_73 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_version_id(var_73);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_s3_grants(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Grant>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Grant") /* member com.amazonaws.s3#Grants$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_grant(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_owner(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Owner, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Owner::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DisplayName") /* DisplayName com.amazonaws.s3#Owner$DisplayName */ =>  {
                let var_74 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_display_name(var_74);
            }
            ,
            s if s.matches("ID") /* ID com.amazonaws.s3#Owner$ID */ =>  {
                let var_75 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_75);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_union_crate_model_analytics_filter(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AnalyticsFilter, aws_smithy_xml::decode::XmlError> {
    let mut base: Option<crate::model::AnalyticsFilter> = None;
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Prefix") /* Prefix com.amazonaws.s3#AnalyticsFilter$Prefix */ =>  {
                let tmp =
                    Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                ;
                base = Some(crate::model::AnalyticsFilter::Prefix(tmp));
            }
            ,
            s if s.matches("Tag") /* Tag com.amazonaws.s3#AnalyticsFilter$Tag */ =>  {
                let tmp =
                    crate::xml_deser::deser_structure_crate_model_tag(&mut tag)
                    ?
                ;
                base = Some(crate::model::AnalyticsFilter::Tag(tmp));
            }
            ,
            s if s.matches("And") /* And com.amazonaws.s3#AnalyticsFilter$And */ =>  {
                let tmp =
                    crate::xml_deser::deser_structure_crate_model_analytics_and_operator(&mut tag)
                    ?
                ;
                base = Some(crate::model::AnalyticsFilter::And(tmp));
            }
            ,
            variant => return Err(aws_smithy_xml::decode::XmlError::custom(format!("unexpected union variant: {:?}", variant)))
        }
    }
    base.ok_or_else(|| aws_smithy_xml::decode::XmlError::custom("expected union, got nothing"))
}

pub fn deser_structure_crate_model_storage_class_analysis(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::StorageClassAnalysis, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::StorageClassAnalysis::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DataExport") /* DataExport com.amazonaws.s3#StorageClassAnalysis$DataExport */ =>  {
                let var_76 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_storage_class_analysis_data_export(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_data_export(var_76);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_cors_rule(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CorsRule, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::CorsRule::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ID") /* ID com.amazonaws.s3#CORSRule$ID */ =>  {
                let var_77 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_77);
            }
            ,
            s if s.matches("AllowedHeader") /* AllowedHeaders com.amazonaws.s3#CORSRule$AllowedHeaders */ =>  {
                let var_78 =
                    Some(
                        Result::<std::vec::Vec<std::string::String>, aws_smithy_xml::decode::XmlError>::Ok({
                            let mut list_79 = builder.allowed_headers.take().unwrap_or_default();
                            list_79.push(
                                Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                                    aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                                    .into()
                                )
                                ?
                            );
                            list_79
                        })
                        ?
                    )
                ;
                builder = builder.set_allowed_headers(var_78);
            }
            ,
            s if s.matches("AllowedMethod") /* AllowedMethods com.amazonaws.s3#CORSRule$AllowedMethods */ =>  {
                let var_80 =
                    Some(
                        Result::<std::vec::Vec<std::string::String>, aws_smithy_xml::decode::XmlError>::Ok({
                            let mut list_81 = builder.allowed_methods.take().unwrap_or_default();
                            list_81.push(
                                Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                                    aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                                    .into()
                                )
                                ?
                            );
                            list_81
                        })
                        ?
                    )
                ;
                builder = builder.set_allowed_methods(var_80);
            }
            ,
            s if s.matches("AllowedOrigin") /* AllowedOrigins com.amazonaws.s3#CORSRule$AllowedOrigins */ =>  {
                let var_82 =
                    Some(
                        Result::<std::vec::Vec<std::string::String>, aws_smithy_xml::decode::XmlError>::Ok({
                            let mut list_83 = builder.allowed_origins.take().unwrap_or_default();
                            list_83.push(
                                Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                                    aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                                    .into()
                                )
                                ?
                            );
                            list_83
                        })
                        ?
                    )
                ;
                builder = builder.set_allowed_origins(var_82);
            }
            ,
            s if s.matches("ExposeHeader") /* ExposeHeaders com.amazonaws.s3#CORSRule$ExposeHeaders */ =>  {
                let var_84 =
                    Some(
                        Result::<std::vec::Vec<std::string::String>, aws_smithy_xml::decode::XmlError>::Ok({
                            let mut list_85 = builder.expose_headers.take().unwrap_or_default();
                            list_85.push(
                                Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                                    aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                                    .into()
                                )
                                ?
                            );
                            list_85
                        })
                        ?
                    )
                ;
                builder = builder.set_expose_headers(var_84);
            }
            ,
            s if s.matches("MaxAgeSeconds") /* MaxAgeSeconds com.amazonaws.s3#CORSRule$MaxAgeSeconds */ =>  {
                let var_86 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.s3#MaxAgeSeconds`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_age_seconds(var_86);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_server_side_encryption_rule(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ServerSideEncryptionRule, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ServerSideEncryptionRule::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ApplyServerSideEncryptionByDefault") /* ApplyServerSideEncryptionByDefault com.amazonaws.s3#ServerSideEncryptionRule$ApplyServerSideEncryptionByDefault */ =>  {
                let var_87 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_server_side_encryption_by_default(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_apply_server_side_encryption_by_default(var_87);
            }
            ,
            s if s.matches("BucketKeyEnabled") /* BucketKeyEnabled com.amazonaws.s3#ServerSideEncryptionRule$BucketKeyEnabled */ =>  {
                let var_88 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.s3#BucketKeyEnabled`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_bucket_key_enabled(var_88);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_intelligent_tiering_filter(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::IntelligentTieringFilter, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::IntelligentTieringFilter::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Prefix") /* Prefix com.amazonaws.s3#IntelligentTieringFilter$Prefix */ =>  {
                let var_89 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix(var_89);
            }
            ,
            s if s.matches("Tag") /* Tag com.amazonaws.s3#IntelligentTieringFilter$Tag */ =>  {
                let var_90 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_tag(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tag(var_90);
            }
            ,
            s if s.matches("And") /* And com.amazonaws.s3#IntelligentTieringFilter$And */ =>  {
                let var_91 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_intelligent_tiering_and_operator(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_and(var_91);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_tiering(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Tiering, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Tiering::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Days") /* Days com.amazonaws.s3#Tiering$Days */ =>  {
                let var_92 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.s3#IntelligentTieringDays`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_days(var_92);
            }
            ,
            s if s.matches("AccessTier") /* AccessTier com.amazonaws.s3#Tiering$AccessTier */ =>  {
                let var_93 =
                    Some(
                        Result::<crate::model::IntelligentTieringAccessTier, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::IntelligentTieringAccessTier::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_access_tier(var_93);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_inventory_destination(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InventoryDestination, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InventoryDestination::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("S3BucketDestination") /* S3BucketDestination com.amazonaws.s3#InventoryDestination$S3BucketDestination */ =>  {
                let var_94 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_inventory_s3_bucket_destination(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_s3_bucket_destination(var_94);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_inventory_filter(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InventoryFilter, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InventoryFilter::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Prefix") /* Prefix com.amazonaws.s3#InventoryFilter$Prefix */ =>  {
                let var_95 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix(var_95);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_s3_inventory_optional_fields(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::InventoryOptionalField>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Field") /* member com.amazonaws.s3#InventoryOptionalFields$member */ =>  {
                out.push(
                    Result::<crate::model::InventoryOptionalField, aws_smithy_xml::decode::XmlError>::Ok(
                        crate::model::InventoryOptionalField::from(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                    )
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_inventory_schedule(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InventorySchedule, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InventorySchedule::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Frequency") /* Frequency com.amazonaws.s3#InventorySchedule$Frequency */ =>  {
                let var_96 =
                    Some(
                        Result::<crate::model::InventoryFrequency, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InventoryFrequency::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_frequency(var_96);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_lifecycle_rule(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LifecycleRule, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LifecycleRule::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Expiration") /* Expiration com.amazonaws.s3#LifecycleRule$Expiration */ =>  {
                let var_97 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_lifecycle_expiration(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_expiration(var_97);
            }
            ,
            s if s.matches("ID") /* ID com.amazonaws.s3#LifecycleRule$ID */ =>  {
                let var_98 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_98);
            }
            ,
            s if s.matches("Prefix") /* Prefix com.amazonaws.s3#LifecycleRule$Prefix */ =>  {
                let var_99 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix(var_99);
            }
            ,
            s if s.matches("Filter") /* Filter com.amazonaws.s3#LifecycleRule$Filter */ =>  {
                let var_100 =
                    Some(
                        crate::xml_deser::deser_union_crate_model_lifecycle_rule_filter(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_filter(var_100);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.s3#LifecycleRule$Status */ =>  {
                let var_101 =
                    Some(
                        Result::<crate::model::ExpirationStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ExpirationStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_101);
            }
            ,
            s if s.matches("Transition") /* Transitions com.amazonaws.s3#LifecycleRule$Transitions */ =>  {
                let var_102 =
                    Some(
                        Result::<std::vec::Vec<crate::model::Transition>, aws_smithy_xml::decode::XmlError>::Ok({
                            let mut list_103 = builder.transitions.take().unwrap_or_default();
                            list_103.push(
                                crate::xml_deser::deser_structure_crate_model_transition(&mut tag)
                                ?
                            );
                            list_103
                        })
                        ?
                    )
                ;
                builder = builder.set_transitions(var_102);
            }
            ,
            s if s.matches("NoncurrentVersionTransition") /* NoncurrentVersionTransitions com.amazonaws.s3#LifecycleRule$NoncurrentVersionTransitions */ =>  {
                let var_104 =
                    Some(
                        Result::<std::vec::Vec<crate::model::NoncurrentVersionTransition>, aws_smithy_xml::decode::XmlError>::Ok({
                            let mut list_105 = builder.noncurrent_version_transitions.take().unwrap_or_default();
                            list_105.push(
                                crate::xml_deser::deser_structure_crate_model_noncurrent_version_transition(&mut tag)
                                ?
                            );
                            list_105
                        })
                        ?
                    )
                ;
                builder = builder.set_noncurrent_version_transitions(var_104);
            }
            ,
            s if s.matches("NoncurrentVersionExpiration") /* NoncurrentVersionExpiration com.amazonaws.s3#LifecycleRule$NoncurrentVersionExpiration */ =>  {
                let var_106 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_noncurrent_version_expiration(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_noncurrent_version_expiration(var_106);
            }
            ,
            s if s.matches("AbortIncompleteMultipartUpload") /* AbortIncompleteMultipartUpload com.amazonaws.s3#LifecycleRule$AbortIncompleteMultipartUpload */ =>  {
                let var_107 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_abort_incomplete_multipart_upload(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_abort_incomplete_multipart_upload(var_107);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_logging_enabled(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LoggingEnabled, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LoggingEnabled::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("TargetBucket") /* TargetBucket com.amazonaws.s3#LoggingEnabled$TargetBucket */ =>  {
                let var_108 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_target_bucket(var_108);
            }
            ,
            s if s.matches("TargetGrants") /* TargetGrants com.amazonaws.s3#LoggingEnabled$TargetGrants */ =>  {
                let var_109 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_s3_target_grants(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_target_grants(var_109);
            }
            ,
            s if s.matches("TargetPrefix") /* TargetPrefix com.amazonaws.s3#LoggingEnabled$TargetPrefix */ =>  {
                let var_110 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_target_prefix(var_110);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_union_crate_model_metrics_filter(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::MetricsFilter, aws_smithy_xml::decode::XmlError> {
    let mut base: Option<crate::model::MetricsFilter> = None;
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Prefix") /* Prefix com.amazonaws.s3#MetricsFilter$Prefix */ =>  {
                let tmp =
                    Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                ;
                base = Some(crate::model::MetricsFilter::Prefix(tmp));
            }
            ,
            s if s.matches("Tag") /* Tag com.amazonaws.s3#MetricsFilter$Tag */ =>  {
                let tmp =
                    crate::xml_deser::deser_structure_crate_model_tag(&mut tag)
                    ?
                ;
                base = Some(crate::model::MetricsFilter::Tag(tmp));
            }
            ,
            s if s.matches("AccessPointArn") /* AccessPointArn com.amazonaws.s3#MetricsFilter$AccessPointArn */ =>  {
                let tmp =
                    Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                ;
                base = Some(crate::model::MetricsFilter::AccessPointArn(tmp));
            }
            ,
            s if s.matches("And") /* And com.amazonaws.s3#MetricsFilter$And */ =>  {
                let tmp =
                    crate::xml_deser::deser_structure_crate_model_metrics_and_operator(&mut tag)
                    ?
                ;
                base = Some(crate::model::MetricsFilter::And(tmp));
            }
            ,
            variant => return Err(aws_smithy_xml::decode::XmlError::custom(format!("unexpected union variant: {:?}", variant)))
        }
    }
    base.ok_or_else(|| aws_smithy_xml::decode::XmlError::custom("expected union, got nothing"))
}

pub fn deser_structure_crate_model_topic_configuration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TopicConfiguration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TopicConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Id") /* Id com.amazonaws.s3#TopicConfiguration$Id */ =>  {
                let var_111 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_111);
            }
            ,
            s if s.matches("Topic") /* TopicArn com.amazonaws.s3#TopicConfiguration$TopicArn */ =>  {
                let var_112 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_topic_arn(var_112);
            }
            ,
            s if s.matches("Event") /* Events com.amazonaws.s3#TopicConfiguration$Events */ =>  {
                let var_113 =
                    Some(
                        Result::<std::vec::Vec<crate::model::Event>, aws_smithy_xml::decode::XmlError>::Ok({
                            let mut list_114 = builder.events.take().unwrap_or_default();
                            list_114.push(
                                Result::<crate::model::Event, aws_smithy_xml::decode::XmlError>::Ok(
                                    crate::model::Event::from(
                                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                                    )
                                )
                                ?
                            );
                            list_114
                        })
                        ?
                    )
                ;
                builder = builder.set_events(var_113);
            }
            ,
            s if s.matches("Filter") /* Filter com.amazonaws.s3#TopicConfiguration$Filter */ =>  {
                let var_115 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_notification_configuration_filter(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_filter(var_115);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_queue_configuration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::QueueConfiguration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::QueueConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Id") /* Id com.amazonaws.s3#QueueConfiguration$Id */ =>  {
                let var_116 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_116);
            }
            ,
            s if s.matches("Queue") /* QueueArn com.amazonaws.s3#QueueConfiguration$QueueArn */ =>  {
                let var_117 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_queue_arn(var_117);
            }
            ,
            s if s.matches("Event") /* Events com.amazonaws.s3#QueueConfiguration$Events */ =>  {
                let var_118 =
                    Some(
                        Result::<std::vec::Vec<crate::model::Event>, aws_smithy_xml::decode::XmlError>::Ok({
                            let mut list_119 = builder.events.take().unwrap_or_default();
                            list_119.push(
                                Result::<crate::model::Event, aws_smithy_xml::decode::XmlError>::Ok(
                                    crate::model::Event::from(
                                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                                    )
                                )
                                ?
                            );
                            list_119
                        })
                        ?
                    )
                ;
                builder = builder.set_events(var_118);
            }
            ,
            s if s.matches("Filter") /* Filter com.amazonaws.s3#QueueConfiguration$Filter */ =>  {
                let var_120 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_notification_configuration_filter(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_filter(var_120);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_lambda_function_configuration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LambdaFunctionConfiguration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LambdaFunctionConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Id") /* Id com.amazonaws.s3#LambdaFunctionConfiguration$Id */ =>  {
                let var_121 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_121);
            }
            ,
            s if s.matches("CloudFunction") /* LambdaFunctionArn com.amazonaws.s3#LambdaFunctionConfiguration$LambdaFunctionArn */ =>  {
                let var_122 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_lambda_function_arn(var_122);
            }
            ,
            s if s.matches("Event") /* Events com.amazonaws.s3#LambdaFunctionConfiguration$Events */ =>  {
                let var_123 =
                    Some(
                        Result::<std::vec::Vec<crate::model::Event>, aws_smithy_xml::decode::XmlError>::Ok({
                            let mut list_124 = builder.events.take().unwrap_or_default();
                            list_124.push(
                                Result::<crate::model::Event, aws_smithy_xml::decode::XmlError>::Ok(
                                    crate::model::Event::from(
                                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                                    )
                                )
                                ?
                            );
                            list_124
                        })
                        ?
                    )
                ;
                builder = builder.set_events(var_123);
            }
            ,
            s if s.matches("Filter") /* Filter com.amazonaws.s3#LambdaFunctionConfiguration$Filter */ =>  {
                let var_125 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_notification_configuration_filter(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_filter(var_125);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_event_bridge_configuration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::EventBridgeConfiguration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::EventBridgeConfiguration::builder();
    let _ = decoder;
    Ok(builder.build())
}

pub fn deser_structure_crate_model_ownership_controls_rule(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::OwnershipControlsRule, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::OwnershipControlsRule::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ObjectOwnership") /* ObjectOwnership com.amazonaws.s3#OwnershipControlsRule$ObjectOwnership */ =>  {
                let var_126 =
                    Some(
                        Result::<crate::model::ObjectOwnership, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ObjectOwnership::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_object_ownership(var_126);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_replication_rule(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ReplicationRule, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ReplicationRule::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ID") /* ID com.amazonaws.s3#ReplicationRule$ID */ =>  {
                let var_127 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_127);
            }
            ,
            s if s.matches("Priority") /* Priority com.amazonaws.s3#ReplicationRule$Priority */ =>  {
                let var_128 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.s3#Priority`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_priority(var_128);
            }
            ,
            s if s.matches("Prefix") /* Prefix com.amazonaws.s3#ReplicationRule$Prefix */ =>  {
                let var_129 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix(var_129);
            }
            ,
            s if s.matches("Filter") /* Filter com.amazonaws.s3#ReplicationRule$Filter */ =>  {
                let var_130 =
                    Some(
                        crate::xml_deser::deser_union_crate_model_replication_rule_filter(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_filter(var_130);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.s3#ReplicationRule$Status */ =>  {
                let var_131 =
                    Some(
                        Result::<crate::model::ReplicationRuleStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ReplicationRuleStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_131);
            }
            ,
            s if s.matches("SourceSelectionCriteria") /* SourceSelectionCriteria com.amazonaws.s3#ReplicationRule$SourceSelectionCriteria */ =>  {
                let var_132 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_source_selection_criteria(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_source_selection_criteria(var_132);
            }
            ,
            s if s.matches("ExistingObjectReplication") /* ExistingObjectReplication com.amazonaws.s3#ReplicationRule$ExistingObjectReplication */ =>  {
                let var_133 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_existing_object_replication(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_existing_object_replication(var_133);
            }
            ,
            s if s.matches("Destination") /* Destination com.amazonaws.s3#ReplicationRule$Destination */ =>  {
                let var_134 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_destination(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_destination(var_134);
            }
            ,
            s if s.matches("DeleteMarkerReplication") /* DeleteMarkerReplication com.amazonaws.s3#ReplicationRule$DeleteMarkerReplication */ =>  {
                let var_135 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_delete_marker_replication(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_delete_marker_replication(var_135);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_s3_tag_set(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::Tag>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Tag") /* member com.amazonaws.s3#TagSet$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_tag(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_error_document(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ErrorDocument, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ErrorDocument::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Key") /* Key com.amazonaws.s3#ErrorDocument$Key */ =>  {
                let var_136 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key(var_136);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_index_document(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::IndexDocument, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::IndexDocument::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Suffix") /* Suffix com.amazonaws.s3#IndexDocument$Suffix */ =>  {
                let var_137 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_suffix(var_137);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_redirect_all_requests_to(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::RedirectAllRequestsTo, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::RedirectAllRequestsTo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("HostName") /* HostName com.amazonaws.s3#RedirectAllRequestsTo$HostName */ =>  {
                let var_138 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_host_name(var_138);
            }
            ,
            s if s.matches("Protocol") /* Protocol com.amazonaws.s3#RedirectAllRequestsTo$Protocol */ =>  {
                let var_139 =
                    Some(
                        Result::<crate::model::Protocol, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::Protocol::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_protocol(var_139);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_s3_routing_rules(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::RoutingRule>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("RoutingRule") /* member com.amazonaws.s3#RoutingRules$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_routing_rule(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_object_lock_rule(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ObjectLockRule, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ObjectLockRule::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DefaultRetention") /* DefaultRetention com.amazonaws.s3#ObjectLockRule$DefaultRetention */ =>  {
                let var_140 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_default_retention(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_default_retention(var_140);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_glacier_job_parameters(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::GlacierJobParameters, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::GlacierJobParameters::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Tier") /* Tier com.amazonaws.s3#GlacierJobParameters$Tier */ =>  {
                let var_141 =
                    Some(
                        Result::<crate::model::Tier, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::Tier::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_tier(var_141);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_select_parameters(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SelectParameters, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SelectParameters::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("InputSerialization") /* InputSerialization com.amazonaws.s3#SelectParameters$InputSerialization */ =>  {
                let var_142 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_input_serialization(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_input_serialization(var_142);
            }
            ,
            s if s.matches("ExpressionType") /* ExpressionType com.amazonaws.s3#SelectParameters$ExpressionType */ =>  {
                let var_143 =
                    Some(
                        Result::<crate::model::ExpressionType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ExpressionType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_expression_type(var_143);
            }
            ,
            s if s.matches("Expression") /* Expression com.amazonaws.s3#SelectParameters$Expression */ =>  {
                let var_144 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_expression(var_144);
            }
            ,
            s if s.matches("OutputSerialization") /* OutputSerialization com.amazonaws.s3#SelectParameters$OutputSerialization */ =>  {
                let var_145 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_output_serialization(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_output_serialization(var_145);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_output_location(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::OutputLocation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::OutputLocation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("S3") /* S3 com.amazonaws.s3#OutputLocation$S3 */ =>  {
                let var_146 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_s3_location(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_s3(var_146);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_grant(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Grant, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Grant::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Grantee") /* Grantee com.amazonaws.s3#Grant$Grantee */ =>  {
                let var_147 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_grantee(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_grantee(var_147);
            }
            ,
            s if s.matches("Permission") /* Permission com.amazonaws.s3#Grant$Permission */ =>  {
                let var_148 =
                    Some(
                        Result::<crate::model::Permission, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::Permission::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_permission(var_148);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_tag(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Tag, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Tag::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Key") /* Key com.amazonaws.s3#Tag$Key */ =>  {
                let var_149 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key(var_149);
            }
            ,
            s if s.matches("Value") /* Value com.amazonaws.s3#Tag$Value */ =>  {
                let var_150 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_value(var_150);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_analytics_and_operator(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AnalyticsAndOperator, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AnalyticsAndOperator::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Prefix") /* Prefix com.amazonaws.s3#AnalyticsAndOperator$Prefix */ =>  {
                let var_151 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix(var_151);
            }
            ,
            s if s.matches("Tag") /* Tags com.amazonaws.s3#AnalyticsAndOperator$Tags */ =>  {
                let var_152 =
                    Some(
                        Result::<std::vec::Vec<crate::model::Tag>, aws_smithy_xml::decode::XmlError>::Ok({
                            let mut list_153 = builder.tags.take().unwrap_or_default();
                            list_153.push(
                                crate::xml_deser::deser_structure_crate_model_tag(&mut tag)
                                ?
                            );
                            list_153
                        })
                        ?
                    )
                ;
                builder = builder.set_tags(var_152);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_storage_class_analysis_data_export(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::StorageClassAnalysisDataExport, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::StorageClassAnalysisDataExport::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("OutputSchemaVersion") /* OutputSchemaVersion com.amazonaws.s3#StorageClassAnalysisDataExport$OutputSchemaVersion */ =>  {
                let var_154 =
                    Some(
                        Result::<crate::model::StorageClassAnalysisSchemaVersion, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::StorageClassAnalysisSchemaVersion::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_output_schema_version(var_154);
            }
            ,
            s if s.matches("Destination") /* Destination com.amazonaws.s3#StorageClassAnalysisDataExport$Destination */ =>  {
                let var_155 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analytics_export_destination(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_destination(var_155);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_server_side_encryption_by_default(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ServerSideEncryptionByDefault, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ServerSideEncryptionByDefault::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("SSEAlgorithm") /* SSEAlgorithm com.amazonaws.s3#ServerSideEncryptionByDefault$SSEAlgorithm */ =>  {
                let var_156 =
                    Some(
                        Result::<crate::model::ServerSideEncryption, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ServerSideEncryption::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_sse_algorithm(var_156);
            }
            ,
            s if s.matches("KMSMasterKeyID") /* KMSMasterKeyID com.amazonaws.s3#ServerSideEncryptionByDefault$KMSMasterKeyID */ =>  {
                let var_157 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_kms_master_key_id(var_157);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_intelligent_tiering_and_operator(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::IntelligentTieringAndOperator, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::IntelligentTieringAndOperator::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Prefix") /* Prefix com.amazonaws.s3#IntelligentTieringAndOperator$Prefix */ =>  {
                let var_158 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix(var_158);
            }
            ,
            s if s.matches("Tag") /* Tags com.amazonaws.s3#IntelligentTieringAndOperator$Tags */ =>  {
                let var_159 =
                    Some(
                        Result::<std::vec::Vec<crate::model::Tag>, aws_smithy_xml::decode::XmlError>::Ok({
                            let mut list_160 = builder.tags.take().unwrap_or_default();
                            list_160.push(
                                crate::xml_deser::deser_structure_crate_model_tag(&mut tag)
                                ?
                            );
                            list_160
                        })
                        ?
                    )
                ;
                builder = builder.set_tags(var_159);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_inventory_s3_bucket_destination(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InventoryS3BucketDestination, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InventoryS3BucketDestination::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("AccountId") /* AccountId com.amazonaws.s3#InventoryS3BucketDestination$AccountId */ =>  {
                let var_161 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_account_id(var_161);
            }
            ,
            s if s.matches("Bucket") /* Bucket com.amazonaws.s3#InventoryS3BucketDestination$Bucket */ =>  {
                let var_162 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_bucket(var_162);
            }
            ,
            s if s.matches("Format") /* Format com.amazonaws.s3#InventoryS3BucketDestination$Format */ =>  {
                let var_163 =
                    Some(
                        Result::<crate::model::InventoryFormat, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::InventoryFormat::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_format(var_163);
            }
            ,
            s if s.matches("Prefix") /* Prefix com.amazonaws.s3#InventoryS3BucketDestination$Prefix */ =>  {
                let var_164 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix(var_164);
            }
            ,
            s if s.matches("Encryption") /* Encryption com.amazonaws.s3#InventoryS3BucketDestination$Encryption */ =>  {
                let var_165 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_inventory_encryption(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_encryption(var_165);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_lifecycle_expiration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LifecycleExpiration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LifecycleExpiration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Date") /* Date com.amazonaws.s3#LifecycleExpiration$Date */ =>  {
                let var_166 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.s3#Date`)"))
                        ?
                    )
                ;
                builder = builder.set_date(var_166);
            }
            ,
            s if s.matches("Days") /* Days com.amazonaws.s3#LifecycleExpiration$Days */ =>  {
                let var_167 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.s3#Days`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_days(var_167);
            }
            ,
            s if s.matches("ExpiredObjectDeleteMarker") /* ExpiredObjectDeleteMarker com.amazonaws.s3#LifecycleExpiration$ExpiredObjectDeleteMarker */ =>  {
                let var_168 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.s3#ExpiredObjectDeleteMarker`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_expired_object_delete_marker(var_168);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_union_crate_model_lifecycle_rule_filter(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LifecycleRuleFilter, aws_smithy_xml::decode::XmlError> {
    let mut base: Option<crate::model::LifecycleRuleFilter> = None;
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Prefix") /* Prefix com.amazonaws.s3#LifecycleRuleFilter$Prefix */ =>  {
                let tmp =
                    Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                ;
                base = Some(crate::model::LifecycleRuleFilter::Prefix(tmp));
            }
            ,
            s if s.matches("Tag") /* Tag com.amazonaws.s3#LifecycleRuleFilter$Tag */ =>  {
                let tmp =
                    crate::xml_deser::deser_structure_crate_model_tag(&mut tag)
                    ?
                ;
                base = Some(crate::model::LifecycleRuleFilter::Tag(tmp));
            }
            ,
            s if s.matches("ObjectSizeGreaterThan") /* ObjectSizeGreaterThan com.amazonaws.s3#LifecycleRuleFilter$ObjectSizeGreaterThan */ =>  {
                let tmp =
                     {
                        <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.s3#ObjectSizeGreaterThanBytes`)"))
                    }
                    ?
                ;
                base = Some(crate::model::LifecycleRuleFilter::ObjectSizeGreaterThan(tmp));
            }
            ,
            s if s.matches("ObjectSizeLessThan") /* ObjectSizeLessThan com.amazonaws.s3#LifecycleRuleFilter$ObjectSizeLessThan */ =>  {
                let tmp =
                     {
                        <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.s3#ObjectSizeLessThanBytes`)"))
                    }
                    ?
                ;
                base = Some(crate::model::LifecycleRuleFilter::ObjectSizeLessThan(tmp));
            }
            ,
            s if s.matches("And") /* And com.amazonaws.s3#LifecycleRuleFilter$And */ =>  {
                let tmp =
                    crate::xml_deser::deser_structure_crate_model_lifecycle_rule_and_operator(&mut tag)
                    ?
                ;
                base = Some(crate::model::LifecycleRuleFilter::And(tmp));
            }
            ,
            variant => return Err(aws_smithy_xml::decode::XmlError::custom(format!("unexpected union variant: {:?}", variant)))
        }
    }
    base.ok_or_else(|| aws_smithy_xml::decode::XmlError::custom("expected union, got nothing"))
}

pub fn deser_structure_crate_model_transition(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Transition, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Transition::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Date") /* Date com.amazonaws.s3#Transition$Date */ =>  {
                let var_169 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTime
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.s3#Date`)"))
                        ?
                    )
                ;
                builder = builder.set_date(var_169);
            }
            ,
            s if s.matches("Days") /* Days com.amazonaws.s3#Transition$Days */ =>  {
                let var_170 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.s3#Days`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_days(var_170);
            }
            ,
            s if s.matches("StorageClass") /* StorageClass com.amazonaws.s3#Transition$StorageClass */ =>  {
                let var_171 =
                    Some(
                        Result::<crate::model::TransitionStorageClass, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransitionStorageClass::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_storage_class(var_171);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_noncurrent_version_transition(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::NoncurrentVersionTransition, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::NoncurrentVersionTransition::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("NoncurrentDays") /* NoncurrentDays com.amazonaws.s3#NoncurrentVersionTransition$NoncurrentDays */ =>  {
                let var_172 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.s3#Days`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_noncurrent_days(var_172);
            }
            ,
            s if s.matches("StorageClass") /* StorageClass com.amazonaws.s3#NoncurrentVersionTransition$StorageClass */ =>  {
                let var_173 =
                    Some(
                        Result::<crate::model::TransitionStorageClass, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::TransitionStorageClass::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_storage_class(var_173);
            }
            ,
            s if s.matches("NewerNoncurrentVersions") /* NewerNoncurrentVersions com.amazonaws.s3#NoncurrentVersionTransition$NewerNoncurrentVersions */ =>  {
                let var_174 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.s3#VersionCount`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_newer_noncurrent_versions(var_174);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_noncurrent_version_expiration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::NoncurrentVersionExpiration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::NoncurrentVersionExpiration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("NoncurrentDays") /* NoncurrentDays com.amazonaws.s3#NoncurrentVersionExpiration$NoncurrentDays */ =>  {
                let var_175 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.s3#Days`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_noncurrent_days(var_175);
            }
            ,
            s if s.matches("NewerNoncurrentVersions") /* NewerNoncurrentVersions com.amazonaws.s3#NoncurrentVersionExpiration$NewerNoncurrentVersions */ =>  {
                let var_176 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.s3#VersionCount`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_newer_noncurrent_versions(var_176);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_abort_incomplete_multipart_upload(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AbortIncompleteMultipartUpload, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AbortIncompleteMultipartUpload::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DaysAfterInitiation") /* DaysAfterInitiation com.amazonaws.s3#AbortIncompleteMultipartUpload$DaysAfterInitiation */ =>  {
                let var_177 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.s3#DaysAfterInitiation`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_days_after_initiation(var_177);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_s3_target_grants(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::TargetGrant>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Grant") /* member com.amazonaws.s3#TargetGrants$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_target_grant(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_metrics_and_operator(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::MetricsAndOperator, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::MetricsAndOperator::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Prefix") /* Prefix com.amazonaws.s3#MetricsAndOperator$Prefix */ =>  {
                let var_178 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix(var_178);
            }
            ,
            s if s.matches("Tag") /* Tags com.amazonaws.s3#MetricsAndOperator$Tags */ =>  {
                let var_179 =
                    Some(
                        Result::<std::vec::Vec<crate::model::Tag>, aws_smithy_xml::decode::XmlError>::Ok({
                            let mut list_180 = builder.tags.take().unwrap_or_default();
                            list_180.push(
                                crate::xml_deser::deser_structure_crate_model_tag(&mut tag)
                                ?
                            );
                            list_180
                        })
                        ?
                    )
                ;
                builder = builder.set_tags(var_179);
            }
            ,
            s if s.matches("AccessPointArn") /* AccessPointArn com.amazonaws.s3#MetricsAndOperator$AccessPointArn */ =>  {
                let var_181 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_access_point_arn(var_181);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_notification_configuration_filter(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::NotificationConfigurationFilter, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::NotificationConfigurationFilter::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("S3Key") /* Key com.amazonaws.s3#NotificationConfigurationFilter$Key */ =>  {
                let var_182 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_s3_key_filter(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_key(var_182);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_union_crate_model_replication_rule_filter(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ReplicationRuleFilter, aws_smithy_xml::decode::XmlError> {
    let mut base: Option<crate::model::ReplicationRuleFilter> = None;
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Prefix") /* Prefix com.amazonaws.s3#ReplicationRuleFilter$Prefix */ =>  {
                let tmp =
                    Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                        aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                ;
                base = Some(crate::model::ReplicationRuleFilter::Prefix(tmp));
            }
            ,
            s if s.matches("Tag") /* Tag com.amazonaws.s3#ReplicationRuleFilter$Tag */ =>  {
                let tmp =
                    crate::xml_deser::deser_structure_crate_model_tag(&mut tag)
                    ?
                ;
                base = Some(crate::model::ReplicationRuleFilter::Tag(tmp));
            }
            ,
            s if s.matches("And") /* And com.amazonaws.s3#ReplicationRuleFilter$And */ =>  {
                let tmp =
                    crate::xml_deser::deser_structure_crate_model_replication_rule_and_operator(&mut tag)
                    ?
                ;
                base = Some(crate::model::ReplicationRuleFilter::And(tmp));
            }
            ,
            variant => return Err(aws_smithy_xml::decode::XmlError::custom(format!("unexpected union variant: {:?}", variant)))
        }
    }
    base.ok_or_else(|| aws_smithy_xml::decode::XmlError::custom("expected union, got nothing"))
}

pub fn deser_structure_crate_model_source_selection_criteria(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SourceSelectionCriteria, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SourceSelectionCriteria::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("SseKmsEncryptedObjects") /* SseKmsEncryptedObjects com.amazonaws.s3#SourceSelectionCriteria$SseKmsEncryptedObjects */ =>  {
                let var_183 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_sse_kms_encrypted_objects(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_sse_kms_encrypted_objects(var_183);
            }
            ,
            s if s.matches("ReplicaModifications") /* ReplicaModifications com.amazonaws.s3#SourceSelectionCriteria$ReplicaModifications */ =>  {
                let var_184 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_replica_modifications(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_replica_modifications(var_184);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_existing_object_replication(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ExistingObjectReplication, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ExistingObjectReplication::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Status") /* Status com.amazonaws.s3#ExistingObjectReplication$Status */ =>  {
                let var_185 =
                    Some(
                        Result::<crate::model::ExistingObjectReplicationStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ExistingObjectReplicationStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_185);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_destination(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Destination, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Destination::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Bucket") /* Bucket com.amazonaws.s3#Destination$Bucket */ =>  {
                let var_186 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_bucket(var_186);
            }
            ,
            s if s.matches("Account") /* Account com.amazonaws.s3#Destination$Account */ =>  {
                let var_187 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_account(var_187);
            }
            ,
            s if s.matches("StorageClass") /* StorageClass com.amazonaws.s3#Destination$StorageClass */ =>  {
                let var_188 =
                    Some(
                        Result::<crate::model::StorageClass, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::StorageClass::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_storage_class(var_188);
            }
            ,
            s if s.matches("AccessControlTranslation") /* AccessControlTranslation com.amazonaws.s3#Destination$AccessControlTranslation */ =>  {
                let var_189 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_access_control_translation(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_access_control_translation(var_189);
            }
            ,
            s if s.matches("EncryptionConfiguration") /* EncryptionConfiguration com.amazonaws.s3#Destination$EncryptionConfiguration */ =>  {
                let var_190 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_encryption_configuration(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_encryption_configuration(var_190);
            }
            ,
            s if s.matches("ReplicationTime") /* ReplicationTime com.amazonaws.s3#Destination$ReplicationTime */ =>  {
                let var_191 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_replication_time(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_replication_time(var_191);
            }
            ,
            s if s.matches("Metrics") /* Metrics com.amazonaws.s3#Destination$Metrics */ =>  {
                let var_192 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_metrics(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_metrics(var_192);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_delete_marker_replication(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DeleteMarkerReplication, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DeleteMarkerReplication::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Status") /* Status com.amazonaws.s3#DeleteMarkerReplication$Status */ =>  {
                let var_193 =
                    Some(
                        Result::<crate::model::DeleteMarkerReplicationStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::DeleteMarkerReplicationStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_193);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_routing_rule(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::RoutingRule, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::RoutingRule::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Condition") /* Condition com.amazonaws.s3#RoutingRule$Condition */ =>  {
                let var_194 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_condition(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_condition(var_194);
            }
            ,
            s if s.matches("Redirect") /* Redirect com.amazonaws.s3#RoutingRule$Redirect */ =>  {
                let var_195 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_redirect(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_redirect(var_195);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_default_retention(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DefaultRetention, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DefaultRetention::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Mode") /* Mode com.amazonaws.s3#DefaultRetention$Mode */ =>  {
                let var_196 =
                    Some(
                        Result::<crate::model::ObjectLockRetentionMode, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ObjectLockRetentionMode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_mode(var_196);
            }
            ,
            s if s.matches("Days") /* Days com.amazonaws.s3#DefaultRetention$Days */ =>  {
                let var_197 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.s3#Days`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_days(var_197);
            }
            ,
            s if s.matches("Years") /* Years com.amazonaws.s3#DefaultRetention$Years */ =>  {
                let var_198 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.s3#Years`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_years(var_198);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_input_serialization(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InputSerialization, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InputSerialization::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("CSV") /* CSV com.amazonaws.s3#InputSerialization$CSV */ =>  {
                let var_199 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_csv_input(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_csv(var_199);
            }
            ,
            s if s.matches("CompressionType") /* CompressionType com.amazonaws.s3#InputSerialization$CompressionType */ =>  {
                let var_200 =
                    Some(
                        Result::<crate::model::CompressionType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::CompressionType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_compression_type(var_200);
            }
            ,
            s if s.matches("JSON") /* JSON com.amazonaws.s3#InputSerialization$JSON */ =>  {
                let var_201 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_json_input(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_json(var_201);
            }
            ,
            s if s.matches("Parquet") /* Parquet com.amazonaws.s3#InputSerialization$Parquet */ =>  {
                let var_202 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_parquet_input(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_parquet(var_202);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_output_serialization(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::OutputSerialization, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::OutputSerialization::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("CSV") /* CSV com.amazonaws.s3#OutputSerialization$CSV */ =>  {
                let var_203 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_csv_output(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_csv(var_203);
            }
            ,
            s if s.matches("JSON") /* JSON com.amazonaws.s3#OutputSerialization$JSON */ =>  {
                let var_204 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_json_output(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_json(var_204);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_s3_location(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::S3Location, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::S3Location::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("BucketName") /* BucketName com.amazonaws.s3#S3Location$BucketName */ =>  {
                let var_205 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_bucket_name(var_205);
            }
            ,
            s if s.matches("Prefix") /* Prefix com.amazonaws.s3#S3Location$Prefix */ =>  {
                let var_206 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix(var_206);
            }
            ,
            s if s.matches("Encryption") /* Encryption com.amazonaws.s3#S3Location$Encryption */ =>  {
                let var_207 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_encryption(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_encryption(var_207);
            }
            ,
            s if s.matches("CannedACL") /* CannedACL com.amazonaws.s3#S3Location$CannedACL */ =>  {
                let var_208 =
                    Some(
                        Result::<crate::model::ObjectCannedAcl, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ObjectCannedAcl::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_canned_acl(var_208);
            }
            ,
            s if s.matches("AccessControlList") /* AccessControlList com.amazonaws.s3#S3Location$AccessControlList */ =>  {
                let var_209 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_s3_grants(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_access_control_list(var_209);
            }
            ,
            s if s.matches("Tagging") /* Tagging com.amazonaws.s3#S3Location$Tagging */ =>  {
                let var_210 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_tagging(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tagging(var_210);
            }
            ,
            s if s.matches("UserMetadata") /* UserMetadata com.amazonaws.s3#S3Location$UserMetadata */ =>  {
                let var_211 =
                    Some(
                        crate::xml_deser::deser_list_com_amazonaws_s3_user_metadata(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_user_metadata(var_211);
            }
            ,
            s if s.matches("StorageClass") /* StorageClass com.amazonaws.s3#S3Location$StorageClass */ =>  {
                let var_212 =
                    Some(
                        Result::<crate::model::StorageClass, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::StorageClass::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_storage_class(var_212);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_grantee(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Grantee, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Grantee::builder();
    let attrib_213 = {
        let s = decoder.start_el().attr("xsi:type");
        match s {
            None => None,
            Some(s) => Some(Result::<
                crate::model::Type,
                aws_smithy_xml::decode::XmlError,
            >::Ok(crate::model::Type::from(s))?),
        }
    };
    builder.r#type = attrib_213;
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DisplayName") /* DisplayName com.amazonaws.s3#Grantee$DisplayName */ =>  {
                let var_214 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_display_name(var_214);
            }
            ,
            s if s.matches("EmailAddress") /* EmailAddress com.amazonaws.s3#Grantee$EmailAddress */ =>  {
                let var_215 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_email_address(var_215);
            }
            ,
            s if s.matches("ID") /* ID com.amazonaws.s3#Grantee$ID */ =>  {
                let var_216 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_216);
            }
            ,
            s if s.matches("URI") /* URI com.amazonaws.s3#Grantee$URI */ =>  {
                let var_217 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_uri(var_217);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_analytics_export_destination(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AnalyticsExportDestination, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AnalyticsExportDestination::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("S3BucketDestination") /* S3BucketDestination com.amazonaws.s3#AnalyticsExportDestination$S3BucketDestination */ =>  {
                let var_218 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_analytics_s3_bucket_destination(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_s3_bucket_destination(var_218);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_inventory_encryption(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::InventoryEncryption, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::InventoryEncryption::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("SSE-S3") /* SSES3 com.amazonaws.s3#InventoryEncryption$SSES3 */ =>  {
                let var_219 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_sses3(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_sses3(var_219);
            }
            ,
            s if s.matches("SSE-KMS") /* SSEKMS com.amazonaws.s3#InventoryEncryption$SSEKMS */ =>  {
                let var_220 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_ssekms(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ssekms(var_220);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_lifecycle_rule_and_operator(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::LifecycleRuleAndOperator, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::LifecycleRuleAndOperator::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Prefix") /* Prefix com.amazonaws.s3#LifecycleRuleAndOperator$Prefix */ =>  {
                let var_221 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix(var_221);
            }
            ,
            s if s.matches("Tag") /* Tags com.amazonaws.s3#LifecycleRuleAndOperator$Tags */ =>  {
                let var_222 =
                    Some(
                        Result::<std::vec::Vec<crate::model::Tag>, aws_smithy_xml::decode::XmlError>::Ok({
                            let mut list_223 = builder.tags.take().unwrap_or_default();
                            list_223.push(
                                crate::xml_deser::deser_structure_crate_model_tag(&mut tag)
                                ?
                            );
                            list_223
                        })
                        ?
                    )
                ;
                builder = builder.set_tags(var_222);
            }
            ,
            s if s.matches("ObjectSizeGreaterThan") /* ObjectSizeGreaterThan com.amazonaws.s3#LifecycleRuleAndOperator$ObjectSizeGreaterThan */ =>  {
                let var_224 =
                    Some(
                         {
                            <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.s3#ObjectSizeGreaterThanBytes`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_object_size_greater_than(var_224);
            }
            ,
            s if s.matches("ObjectSizeLessThan") /* ObjectSizeLessThan com.amazonaws.s3#LifecycleRuleAndOperator$ObjectSizeLessThan */ =>  {
                let var_225 =
                    Some(
                         {
                            <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (long: `com.amazonaws.s3#ObjectSizeLessThanBytes`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_object_size_less_than(var_225);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_target_grant(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::TargetGrant, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::TargetGrant::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Grantee") /* Grantee com.amazonaws.s3#TargetGrant$Grantee */ =>  {
                let var_226 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_grantee(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_grantee(var_226);
            }
            ,
            s if s.matches("Permission") /* Permission com.amazonaws.s3#TargetGrant$Permission */ =>  {
                let var_227 =
                    Some(
                        Result::<crate::model::BucketLogsPermission, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::BucketLogsPermission::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_permission(var_227);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_s3_key_filter(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::S3KeyFilter, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::S3KeyFilter::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("FilterRule") /* FilterRules com.amazonaws.s3#S3KeyFilter$FilterRules */ =>  {
                let var_228 =
                    Some(
                        Result::<std::vec::Vec<crate::model::FilterRule>, aws_smithy_xml::decode::XmlError>::Ok({
                            let mut list_229 = builder.filter_rules.take().unwrap_or_default();
                            list_229.push(
                                crate::xml_deser::deser_structure_crate_model_filter_rule(&mut tag)
                                ?
                            );
                            list_229
                        })
                        ?
                    )
                ;
                builder = builder.set_filter_rules(var_228);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_replication_rule_and_operator(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ReplicationRuleAndOperator, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ReplicationRuleAndOperator::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Prefix") /* Prefix com.amazonaws.s3#ReplicationRuleAndOperator$Prefix */ =>  {
                let var_230 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix(var_230);
            }
            ,
            s if s.matches("Tag") /* Tags com.amazonaws.s3#ReplicationRuleAndOperator$Tags */ =>  {
                let var_231 =
                    Some(
                        Result::<std::vec::Vec<crate::model::Tag>, aws_smithy_xml::decode::XmlError>::Ok({
                            let mut list_232 = builder.tags.take().unwrap_or_default();
                            list_232.push(
                                crate::xml_deser::deser_structure_crate_model_tag(&mut tag)
                                ?
                            );
                            list_232
                        })
                        ?
                    )
                ;
                builder = builder.set_tags(var_231);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_sse_kms_encrypted_objects(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SseKmsEncryptedObjects, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SseKmsEncryptedObjects::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Status") /* Status com.amazonaws.s3#SseKmsEncryptedObjects$Status */ =>  {
                let var_233 =
                    Some(
                        Result::<crate::model::SseKmsEncryptedObjectsStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::SseKmsEncryptedObjectsStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_233);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_replica_modifications(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ReplicaModifications, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ReplicaModifications::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Status") /* Status com.amazonaws.s3#ReplicaModifications$Status */ =>  {
                let var_234 =
                    Some(
                        Result::<crate::model::ReplicaModificationsStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ReplicaModificationsStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_234);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_access_control_translation(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AccessControlTranslation, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AccessControlTranslation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Owner") /* Owner com.amazonaws.s3#AccessControlTranslation$Owner */ =>  {
                let var_235 =
                    Some(
                        Result::<crate::model::OwnerOverride, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::OwnerOverride::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_owner(var_235);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_encryption_configuration(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::EncryptionConfiguration, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::EncryptionConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ReplicaKmsKeyID") /* ReplicaKmsKeyID com.amazonaws.s3#EncryptionConfiguration$ReplicaKmsKeyID */ =>  {
                let var_236 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_replica_kms_key_id(var_236);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_replication_time(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ReplicationTime, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ReplicationTime::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Status") /* Status com.amazonaws.s3#ReplicationTime$Status */ =>  {
                let var_237 =
                    Some(
                        Result::<crate::model::ReplicationTimeStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ReplicationTimeStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_237);
            }
            ,
            s if s.matches("Time") /* Time com.amazonaws.s3#ReplicationTime$Time */ =>  {
                let var_238 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_replication_time_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_time(var_238);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_metrics(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Metrics, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Metrics::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Status") /* Status com.amazonaws.s3#Metrics$Status */ =>  {
                let var_239 =
                    Some(
                        Result::<crate::model::MetricsStatus, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::MetricsStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_239);
            }
            ,
            s if s.matches("EventThreshold") /* EventThreshold com.amazonaws.s3#Metrics$EventThreshold */ =>  {
                let var_240 =
                    Some(
                        crate::xml_deser::deser_structure_crate_model_replication_time_value(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_event_threshold(var_240);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_condition(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Condition, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Condition::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("HttpErrorCodeReturnedEquals") /* HttpErrorCodeReturnedEquals com.amazonaws.s3#Condition$HttpErrorCodeReturnedEquals */ =>  {
                let var_241 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_http_error_code_returned_equals(var_241);
            }
            ,
            s if s.matches("KeyPrefixEquals") /* KeyPrefixEquals com.amazonaws.s3#Condition$KeyPrefixEquals */ =>  {
                let var_242 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key_prefix_equals(var_242);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_redirect(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Redirect, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Redirect::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("HostName") /* HostName com.amazonaws.s3#Redirect$HostName */ =>  {
                let var_243 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_host_name(var_243);
            }
            ,
            s if s.matches("HttpRedirectCode") /* HttpRedirectCode com.amazonaws.s3#Redirect$HttpRedirectCode */ =>  {
                let var_244 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_http_redirect_code(var_244);
            }
            ,
            s if s.matches("Protocol") /* Protocol com.amazonaws.s3#Redirect$Protocol */ =>  {
                let var_245 =
                    Some(
                        Result::<crate::model::Protocol, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::Protocol::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_protocol(var_245);
            }
            ,
            s if s.matches("ReplaceKeyPrefixWith") /* ReplaceKeyPrefixWith com.amazonaws.s3#Redirect$ReplaceKeyPrefixWith */ =>  {
                let var_246 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_replace_key_prefix_with(var_246);
            }
            ,
            s if s.matches("ReplaceKeyWith") /* ReplaceKeyWith com.amazonaws.s3#Redirect$ReplaceKeyWith */ =>  {
                let var_247 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_replace_key_with(var_247);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_csv_input(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CsvInput, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::CsvInput::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("FileHeaderInfo") /* FileHeaderInfo com.amazonaws.s3#CSVInput$FileHeaderInfo */ =>  {
                let var_248 =
                    Some(
                        Result::<crate::model::FileHeaderInfo, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::FileHeaderInfo::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_file_header_info(var_248);
            }
            ,
            s if s.matches("Comments") /* Comments com.amazonaws.s3#CSVInput$Comments */ =>  {
                let var_249 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_comments(var_249);
            }
            ,
            s if s.matches("QuoteEscapeCharacter") /* QuoteEscapeCharacter com.amazonaws.s3#CSVInput$QuoteEscapeCharacter */ =>  {
                let var_250 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_quote_escape_character(var_250);
            }
            ,
            s if s.matches("RecordDelimiter") /* RecordDelimiter com.amazonaws.s3#CSVInput$RecordDelimiter */ =>  {
                let var_251 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_record_delimiter(var_251);
            }
            ,
            s if s.matches("FieldDelimiter") /* FieldDelimiter com.amazonaws.s3#CSVInput$FieldDelimiter */ =>  {
                let var_252 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_field_delimiter(var_252);
            }
            ,
            s if s.matches("QuoteCharacter") /* QuoteCharacter com.amazonaws.s3#CSVInput$QuoteCharacter */ =>  {
                let var_253 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_quote_character(var_253);
            }
            ,
            s if s.matches("AllowQuotedRecordDelimiter") /* AllowQuotedRecordDelimiter com.amazonaws.s3#CSVInput$AllowQuotedRecordDelimiter */ =>  {
                let var_254 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.s3#AllowQuotedRecordDelimiter`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_allow_quoted_record_delimiter(var_254);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_json_input(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::JsonInput, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::JsonInput::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Type") /* Type com.amazonaws.s3#JSONInput$Type */ =>  {
                let var_255 =
                    Some(
                        Result::<crate::model::JsonType, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::JsonType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_255);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_parquet_input(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ParquetInput, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ParquetInput::builder();
    let _ = decoder;
    Ok(builder.build())
}

pub fn deser_structure_crate_model_csv_output(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::CsvOutput, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::CsvOutput::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("QuoteFields") /* QuoteFields com.amazonaws.s3#CSVOutput$QuoteFields */ =>  {
                let var_256 =
                    Some(
                        Result::<crate::model::QuoteFields, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::QuoteFields::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_quote_fields(var_256);
            }
            ,
            s if s.matches("QuoteEscapeCharacter") /* QuoteEscapeCharacter com.amazonaws.s3#CSVOutput$QuoteEscapeCharacter */ =>  {
                let var_257 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_quote_escape_character(var_257);
            }
            ,
            s if s.matches("RecordDelimiter") /* RecordDelimiter com.amazonaws.s3#CSVOutput$RecordDelimiter */ =>  {
                let var_258 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_record_delimiter(var_258);
            }
            ,
            s if s.matches("FieldDelimiter") /* FieldDelimiter com.amazonaws.s3#CSVOutput$FieldDelimiter */ =>  {
                let var_259 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_field_delimiter(var_259);
            }
            ,
            s if s.matches("QuoteCharacter") /* QuoteCharacter com.amazonaws.s3#CSVOutput$QuoteCharacter */ =>  {
                let var_260 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_quote_character(var_260);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_json_output(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::JsonOutput, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::JsonOutput::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("RecordDelimiter") /* RecordDelimiter com.amazonaws.s3#JSONOutput$RecordDelimiter */ =>  {
                let var_261 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_record_delimiter(var_261);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_encryption(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Encryption, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Encryption::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("EncryptionType") /* EncryptionType com.amazonaws.s3#Encryption$EncryptionType */ =>  {
                let var_262 =
                    Some(
                        Result::<crate::model::ServerSideEncryption, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::ServerSideEncryption::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_encryption_type(var_262);
            }
            ,
            s if s.matches("KMSKeyId") /* KMSKeyId com.amazonaws.s3#Encryption$KMSKeyId */ =>  {
                let var_263 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_kms_key_id(var_263);
            }
            ,
            s if s.matches("KMSContext") /* KMSContext com.amazonaws.s3#Encryption$KMSContext */ =>  {
                let var_264 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_kms_context(var_264);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_list_com_amazonaws_s3_user_metadata(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<std::vec::Vec<crate::model::MetadataEntry>, aws_smithy_xml::decode::XmlError> {
    let mut out = std::vec::Vec::new();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("MetadataEntry") /* member com.amazonaws.s3#UserMetadata$member */ =>  {
                out.push(
                    crate::xml_deser::deser_structure_crate_model_metadata_entry(&mut tag)
                    ?
                );
            }
            ,
            _ => {}
        }
    }
    Ok(out)
}

pub fn deser_structure_crate_model_analytics_s3_bucket_destination(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AnalyticsS3BucketDestination, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AnalyticsS3BucketDestination::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Format") /* Format com.amazonaws.s3#AnalyticsS3BucketDestination$Format */ =>  {
                let var_265 =
                    Some(
                        Result::<crate::model::AnalyticsS3ExportFileFormat, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::AnalyticsS3ExportFileFormat::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_format(var_265);
            }
            ,
            s if s.matches("BucketAccountId") /* BucketAccountId com.amazonaws.s3#AnalyticsS3BucketDestination$BucketAccountId */ =>  {
                let var_266 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_bucket_account_id(var_266);
            }
            ,
            s if s.matches("Bucket") /* Bucket com.amazonaws.s3#AnalyticsS3BucketDestination$Bucket */ =>  {
                let var_267 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_bucket(var_267);
            }
            ,
            s if s.matches("Prefix") /* Prefix com.amazonaws.s3#AnalyticsS3BucketDestination$Prefix */ =>  {
                let var_268 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix(var_268);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_sses3(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Sses3, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Sses3::builder();
    let _ = decoder;
    Ok(builder.build())
}

pub fn deser_structure_crate_model_ssekms(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Ssekms, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Ssekms::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("KeyId") /* KeyId com.amazonaws.s3#SSEKMS$KeyId */ =>  {
                let var_269 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_key_id(var_269);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_filter_rule(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::FilterRule, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::FilterRule::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Name") /* Name com.amazonaws.s3#FilterRule$Name */ =>  {
                let var_270 =
                    Some(
                        Result::<crate::model::FilterRuleName, aws_smithy_xml::decode::XmlError>::Ok(
                            crate::model::FilterRuleName::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_270);
            }
            ,
            s if s.matches("Value") /* Value com.amazonaws.s3#FilterRule$Value */ =>  {
                let var_271 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_value(var_271);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_replication_time_value(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ReplicationTimeValue, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ReplicationTimeValue::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Minutes") /* Minutes com.amazonaws.s3#ReplicationTimeValue$Minutes */ =>  {
                let var_272 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.s3#Minutes`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_minutes(var_272);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_crate_model_metadata_entry(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::MetadataEntry, aws_smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::MetadataEntry::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Name") /* Name com.amazonaws.s3#MetadataEntry$Name */ =>  {
                let var_273 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_273);
            }
            ,
            s if s.matches("Value") /* Value com.amazonaws.s3#MetadataEntry$Value */ =>  {
                let var_274 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_value(var_274);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
